// <auto-generated>
/*
 * Kinde Account API
 *
 *  Provides endpoints to operate on an authenticated user.  ## Intro  ## How to use  1. Get a user access token - this can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc).  2. Call one of the endpoints below using the user access token in the Authorization header as a Bearer token. Typically, you can use the `getToken` command in the relevant SDK. 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Accounts.Client;

namespace Kinde.Accounts.Model
{
    /// <summary>
    /// GetUserPermissionsResponseDataPermissionsInner
    /// </summary>
    public partial class GetUserPermissionsResponseDataPermissionsInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserPermissionsResponseDataPermissionsInner" /> class.
        /// </summary>
        /// <param name="id">The friendly ID of a permission</param>
        /// <param name="name">The name of the permission</param>
        /// <param name="key">The key of the permission</param>
        [JsonConstructor]
        public GetUserPermissionsResponseDataPermissionsInner(Option<string?> id = default, Option<string?> name = default, Option<string?> key = default)
        {
            IdOption = id;
            NameOption = name;
            KeyOption = key;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The friendly ID of a permission
        /// </summary>
        /// <value>The friendly ID of a permission</value>
        /* <example>perm_0195ac80a14e8d71f42b98e75d3c61ad</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The name of the permission
        /// </summary>
        /// <value>The name of the permission</value>
        /* <example>View reports</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Key
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyOption { get; private set; }

        /// <summary>
        /// The key of the permission
        /// </summary>
        /// <value>The key of the permission</value>
        /* <example>view_reports</example> */
        [JsonPropertyName("key")]
        public string? Key { get { return this.KeyOption; } set { this.KeyOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserPermissionsResponseDataPermissionsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetUserPermissionsResponseDataPermissionsInner" />
    /// </summary>
    public class GetUserPermissionsResponseDataPermissionsInnerJsonConverter : JsonConverter<GetUserPermissionsResponseDataPermissionsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetUserPermissionsResponseDataPermissionsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetUserPermissionsResponseDataPermissionsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> key = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetUserPermissionsResponseDataPermissionsInner.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetUserPermissionsResponseDataPermissionsInner.");

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class GetUserPermissionsResponseDataPermissionsInner.");

            return new GetUserPermissionsResponseDataPermissionsInner(id, name, key);
        }

        /// <summary>
        /// Serializes a <see cref="GetUserPermissionsResponseDataPermissionsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserPermissionsResponseDataPermissionsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetUserPermissionsResponseDataPermissionsInner getUserPermissionsResponseDataPermissionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getUserPermissionsResponseDataPermissionsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetUserPermissionsResponseDataPermissionsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserPermissionsResponseDataPermissionsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetUserPermissionsResponseDataPermissionsInner getUserPermissionsResponseDataPermissionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getUserPermissionsResponseDataPermissionsInner.IdOption.IsSet && getUserPermissionsResponseDataPermissionsInner.Id == null)
                throw new ArgumentNullException(nameof(getUserPermissionsResponseDataPermissionsInner.Id), "Property is required for class GetUserPermissionsResponseDataPermissionsInner.");

            if (getUserPermissionsResponseDataPermissionsInner.NameOption.IsSet && getUserPermissionsResponseDataPermissionsInner.Name == null)
                throw new ArgumentNullException(nameof(getUserPermissionsResponseDataPermissionsInner.Name), "Property is required for class GetUserPermissionsResponseDataPermissionsInner.");

            if (getUserPermissionsResponseDataPermissionsInner.KeyOption.IsSet && getUserPermissionsResponseDataPermissionsInner.Key == null)
                throw new ArgumentNullException(nameof(getUserPermissionsResponseDataPermissionsInner.Key), "Property is required for class GetUserPermissionsResponseDataPermissionsInner.");

            if (getUserPermissionsResponseDataPermissionsInner.IdOption.IsSet)
                writer.WriteString("id", getUserPermissionsResponseDataPermissionsInner.Id);

            if (getUserPermissionsResponseDataPermissionsInner.NameOption.IsSet)
                writer.WriteString("name", getUserPermissionsResponseDataPermissionsInner.Name);

            if (getUserPermissionsResponseDataPermissionsInner.KeyOption.IsSet)
                writer.WriteString("key", getUserPermissionsResponseDataPermissionsInner.Key);
        }
    }
}
