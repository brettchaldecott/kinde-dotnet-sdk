// <auto-generated>
/*
 * Kinde Account API
 *
 *  Provides endpoints to operate on an authenticated user.  ## Intro  ## How to use  1. Get a user access token - this can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc).  2. Call one of the endpoints below using the user access token in the Authorization header as a Bearer token. Typically, you can use the `getToken` command in the relevant SDK. 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Accounts.Client;

namespace Kinde.Accounts.Model
{
    /// <summary>
    /// GetEntitlementsResponse
    /// </summary>
    public partial class GetEntitlementsResponse
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEntitlementsResponse" /> class.
        /// </summary>
        /// <param name="data">data</param>
        /// <param name="metadata">metadata</param>
        [JsonConstructor]
        public GetEntitlementsResponse(Option<GetEntitlementsResponseData?> data = default, Option<GetEntitlementsResponseMetadata?> metadata = default)
        {
            DataOption = data;
            MetadataOption = metadata;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEntitlementsResponseData?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public GetEntitlementsResponseData? Data { get { return this.DataOption; } set { this.DataOption = new Option<GetEntitlementsResponseData?>(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEntitlementsResponseMetadata?> MetadataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [JsonPropertyName("metadata")]
        public GetEntitlementsResponseMetadata? Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new Option<GetEntitlementsResponseMetadata?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEntitlementsResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetEntitlementsResponse" />
    /// </summary>
    public class GetEntitlementsResponseJsonConverter : JsonConverter<GetEntitlementsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetEntitlementsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetEntitlementsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GetEntitlementsResponseData?> data = default;
            Option<GetEntitlementsResponseMetadata?> metadata = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "data":
                            data = new Option<GetEntitlementsResponseData?>(JsonSerializer.Deserialize<GetEntitlementsResponseData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "metadata":
                            metadata = new Option<GetEntitlementsResponseMetadata?>(JsonSerializer.Deserialize<GetEntitlementsResponseMetadata>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class GetEntitlementsResponse.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class GetEntitlementsResponse.");

            return new GetEntitlementsResponse(data, metadata);
        }

        /// <summary>
        /// Serializes a <see cref="GetEntitlementsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEntitlementsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetEntitlementsResponse getEntitlementsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getEntitlementsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetEntitlementsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEntitlementsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetEntitlementsResponse getEntitlementsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getEntitlementsResponse.DataOption.IsSet && getEntitlementsResponse.Data == null)
                throw new ArgumentNullException(nameof(getEntitlementsResponse.Data), "Property is required for class GetEntitlementsResponse.");

            if (getEntitlementsResponse.MetadataOption.IsSet && getEntitlementsResponse.Metadata == null)
                throw new ArgumentNullException(nameof(getEntitlementsResponse.Metadata), "Property is required for class GetEntitlementsResponse.");

            if (getEntitlementsResponse.DataOption.IsSet)
            {
                writer.WritePropertyName("data");
                JsonSerializer.Serialize(writer, getEntitlementsResponse.Data, jsonSerializerOptions);
            }
            if (getEntitlementsResponse.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, getEntitlementsResponse.Metadata, jsonSerializerOptions);
            }
        }
    }
}
