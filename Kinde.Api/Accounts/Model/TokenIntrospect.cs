// <auto-generated>
/*
 * Kinde Account API
 *
 *  Provides endpoints to operate on an authenticated user.  ## Intro  ## How to use  1. Get a user access token - this can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc).  2. Call one of the endpoints below using the user access token in the Authorization header as a Bearer token. Typically, you can use the `getToken` command in the relevant SDK. 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Accounts.Client;

namespace Kinde.Accounts.Model
{
    /// <summary>
    /// TokenIntrospect
    /// </summary>
    public partial class TokenIntrospect
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenIntrospect" /> class.
        /// </summary>
        /// <param name="active">Indicates the status of the token.</param>
        /// <param name="aud">Array of intended token recipients.</param>
        /// <param name="clientId">Identifier for the requesting client.</param>
        /// <param name="exp">Token expiration timestamp.</param>
        /// <param name="iat">Token issuance timestamp.</param>
        [JsonConstructor]
        public TokenIntrospect(Option<bool?> active = default, Option<List<string>?> aud = default, Option<string?> clientId = default, Option<int?> exp = default, Option<int?> iat = default)
        {
            ActiveOption = active;
            AudOption = aud;
            ClientIdOption = clientId;
            ExpOption = exp;
            IatOption = iat;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// Indicates the status of the token.
        /// </summary>
        /// <value>Indicates the status of the token.</value>
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Aud
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AudOption { get; private set; }

        /// <summary>
        /// Array of intended token recipients.
        /// </summary>
        /// <value>Array of intended token recipients.</value>
        [JsonPropertyName("aud")]
        public List<string>? Aud { get { return this.AudOption; } set { this.AudOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClientId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientIdOption { get; private set; }

        /// <summary>
        /// Identifier for the requesting client.
        /// </summary>
        /// <value>Identifier for the requesting client.</value>
        /* <example>3b0b5c6c8fcc464fab397f4969b5f482</example> */
        [JsonPropertyName("client_id")]
        public string? ClientId { get { return this.ClientIdOption; } set { this.ClientIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Exp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExpOption { get; private set; }

        /// <summary>
        /// Token expiration timestamp.
        /// </summary>
        /// <value>Token expiration timestamp.</value>
        /* <example>1612345678</example> */
        [JsonPropertyName("exp")]
        public int? Exp { get { return this.ExpOption; } set { this.ExpOption = new(value); } }

        /// <summary>
        /// Used to track the state of Iat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IatOption { get; private set; }

        /// <summary>
        /// Token issuance timestamp.
        /// </summary>
        /// <value>Token issuance timestamp.</value>
        /* <example>1612345678</example> */
        [JsonPropertyName("iat")]
        public int? Iat { get { return this.IatOption; } set { this.IatOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenIntrospect {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Aud: ").Append(Aud).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Exp: ").Append(Exp).Append("\n");
            sb.Append("  Iat: ").Append(Iat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TokenIntrospect" />
    /// </summary>
    public class TokenIntrospectJsonConverter : JsonConverter<TokenIntrospect>
    {
        /// <summary>
        /// Deserializes json to <see cref="TokenIntrospect" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TokenIntrospect Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> active = default;
            Option<List<string>?> aud = default;
            Option<string?> clientId = default;
            Option<int?> exp = default;
            Option<int?> iat = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "active":
                            active = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "aud":
                            aud = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "client_id":
                            clientId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "exp":
                            exp = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "iat":
                            iat = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class TokenIntrospect.");

            if (aud.IsSet && aud.Value == null)
                throw new ArgumentNullException(nameof(aud), "Property is not nullable for class TokenIntrospect.");

            if (clientId.IsSet && clientId.Value == null)
                throw new ArgumentNullException(nameof(clientId), "Property is not nullable for class TokenIntrospect.");

            if (exp.IsSet && exp.Value == null)
                throw new ArgumentNullException(nameof(exp), "Property is not nullable for class TokenIntrospect.");

            if (iat.IsSet && iat.Value == null)
                throw new ArgumentNullException(nameof(iat), "Property is not nullable for class TokenIntrospect.");

            return new TokenIntrospect(active, aud, clientId, exp, iat);
        }

        /// <summary>
        /// Serializes a <see cref="TokenIntrospect" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tokenIntrospect"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TokenIntrospect tokenIntrospect, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tokenIntrospect, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TokenIntrospect" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tokenIntrospect"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TokenIntrospect tokenIntrospect, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tokenIntrospect.AudOption.IsSet && tokenIntrospect.Aud == null)
                throw new ArgumentNullException(nameof(tokenIntrospect.Aud), "Property is required for class TokenIntrospect.");

            if (tokenIntrospect.ClientIdOption.IsSet && tokenIntrospect.ClientId == null)
                throw new ArgumentNullException(nameof(tokenIntrospect.ClientId), "Property is required for class TokenIntrospect.");

            if (tokenIntrospect.ActiveOption.IsSet)
                writer.WriteBoolean("active", tokenIntrospect.ActiveOption.Value!.Value);

            if (tokenIntrospect.AudOption.IsSet)
            {
                writer.WritePropertyName("aud");
                JsonSerializer.Serialize(writer, tokenIntrospect.Aud, jsonSerializerOptions);
            }
            if (tokenIntrospect.ClientIdOption.IsSet)
                writer.WriteString("client_id", tokenIntrospect.ClientId);

            if (tokenIntrospect.ExpOption.IsSet)
                writer.WriteNumber("exp", tokenIntrospect.ExpOption.Value!.Value);

            if (tokenIntrospect.IatOption.IsSet)
                writer.WriteNumber("iat", tokenIntrospect.IatOption.Value!.Value);
        }
    }
}
