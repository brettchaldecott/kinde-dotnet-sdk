// <auto-generated>
/*
 * Kinde Account API
 *
 *  Provides endpoints to operate on an authenticated user.  ## Intro  ## How to use  1. Get a user access token - this can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc).  2. Call one of the endpoints below using the user access token in the Authorization header as a Bearer token. Typically, you can use the `getToken` command in the relevant SDK. 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Accounts.Client;

namespace Kinde.Accounts.Model
{
    /// <summary>
    /// The value of the property
    /// </summary>
    public partial class GetUserPropertiesResponseDataPropertiesInnerValue
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserPropertiesResponseDataPropertiesInnerValue" /> class.
        /// </summary>
        /// <param name="string"></param>
        internal GetUserPropertiesResponseDataPropertiesInnerValue(string @string)
        {
            String = @string;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserPropertiesResponseDataPropertiesInnerValue" /> class.
        /// </summary>
        /// <param name="bool"></param>
        internal GetUserPropertiesResponseDataPropertiesInnerValue(bool @bool)
        {
            Bool = @bool;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserPropertiesResponseDataPropertiesInnerValue" /> class.
        /// </summary>
        /// <param name="int"></param>
        internal GetUserPropertiesResponseDataPropertiesInnerValue(int @int)
        {
            Int = @int;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets String
        /// </summary>
        public string? String { get; set; }

        /// <summary>
        /// Gets or Sets Bool
        /// </summary>
        public bool? Bool { get; set; }

        /// <summary>
        /// Gets or Sets Int
        /// </summary>
        public int? Int { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserPropertiesResponseDataPropertiesInnerValue {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetUserPropertiesResponseDataPropertiesInnerValue" />
    /// </summary>
    public class GetUserPropertiesResponseDataPropertiesInnerValueJsonConverter : JsonConverter<GetUserPropertiesResponseDataPropertiesInnerValue>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetUserPropertiesResponseDataPropertiesInnerValue" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetUserPropertiesResponseDataPropertiesInnerValue Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string? varString = default;
            bool? varBool = default;
            int? varInt = default;

            Utf8JsonReader utf8JsonReaderOneOf = utf8JsonReader;
            while (utf8JsonReaderOneOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (utf8JsonReaderOneOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderOneOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderString = utf8JsonReader;
                    ClientUtils.TryDeserialize<string?>(ref utf8JsonReaderString, jsonSerializerOptions, out varString);

                    Utf8JsonReader utf8JsonReaderBool = utf8JsonReader;
                    ClientUtils.TryDeserialize<bool?>(ref utf8JsonReaderBool, jsonSerializerOptions, out varBool);

                    Utf8JsonReader utf8JsonReaderInt = utf8JsonReader;
                    ClientUtils.TryDeserialize<int?>(ref utf8JsonReaderInt, jsonSerializerOptions, out varInt);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            if (varString != null)
                return new GetUserPropertiesResponseDataPropertiesInnerValue(varString);

            if (varBool != null)
                return new GetUserPropertiesResponseDataPropertiesInnerValue(varBool.Value);

            if (varInt != null)
                return new GetUserPropertiesResponseDataPropertiesInnerValue(varInt.Value);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="GetUserPropertiesResponseDataPropertiesInnerValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserPropertiesResponseDataPropertiesInnerValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetUserPropertiesResponseDataPropertiesInnerValue getUserPropertiesResponseDataPropertiesInnerValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getUserPropertiesResponseDataPropertiesInnerValue, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetUserPropertiesResponseDataPropertiesInnerValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserPropertiesResponseDataPropertiesInnerValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetUserPropertiesResponseDataPropertiesInnerValue getUserPropertiesResponseDataPropertiesInnerValue, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
