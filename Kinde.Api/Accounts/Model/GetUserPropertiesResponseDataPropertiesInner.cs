// <auto-generated>
/*
 * Kinde Account API
 *
 *  Provides endpoints to operate on an authenticated user.  ## Intro  ## How to use  1. Get a user access token - this can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc).  2. Call one of the endpoints below using the user access token in the Authorization header as a Bearer token. Typically, you can use the `getToken` command in the relevant SDK. 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Accounts.Client;

namespace Kinde.Accounts.Model
{
    /// <summary>
    /// GetUserPropertiesResponseDataPropertiesInner
    /// </summary>
    public partial class GetUserPropertiesResponseDataPropertiesInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserPropertiesResponseDataPropertiesInner" /> class.
        /// </summary>
        /// <param name="id">The friendly ID of a property</param>
        /// <param name="name">The name of the property</param>
        /// <param name="key">The key of the property</param>
        /// <param name="value">value</param>
        [JsonConstructor]
        public GetUserPropertiesResponseDataPropertiesInner(Option<string?> id = default, Option<string?> name = default, Option<string?> key = default, Option<GetUserPropertiesResponseDataPropertiesInnerValue?> value = default)
        {
            IdOption = id;
            NameOption = name;
            KeyOption = key;
            ValueOption = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The friendly ID of a property
        /// </summary>
        /// <value>The friendly ID of a property</value>
        /* <example>prop_0195ac80a14e8d71f42b98e75d3c61ad</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The name of the property
        /// </summary>
        /// <value>The name of the property</value>
        /* <example>Company name</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Key
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyOption { get; private set; }

        /// <summary>
        /// The key of the property
        /// </summary>
        /// <value>The key of the property</value>
        /* <example>company_name</example> */
        [JsonPropertyName("key")]
        public string? Key { get { return this.KeyOption; } set { this.KeyOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetUserPropertiesResponseDataPropertiesInnerValue?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public GetUserPropertiesResponseDataPropertiesInnerValue? Value { get { return this.ValueOption; } set { this.ValueOption = new Option<GetUserPropertiesResponseDataPropertiesInnerValue?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserPropertiesResponseDataPropertiesInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetUserPropertiesResponseDataPropertiesInner" />
    /// </summary>
    public class GetUserPropertiesResponseDataPropertiesInnerJsonConverter : JsonConverter<GetUserPropertiesResponseDataPropertiesInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetUserPropertiesResponseDataPropertiesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetUserPropertiesResponseDataPropertiesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> key = default;
            Option<GetUserPropertiesResponseDataPropertiesInnerValue?> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            value = new Option<GetUserPropertiesResponseDataPropertiesInnerValue?>(JsonSerializer.Deserialize<GetUserPropertiesResponseDataPropertiesInnerValue>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetUserPropertiesResponseDataPropertiesInner.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetUserPropertiesResponseDataPropertiesInner.");

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class GetUserPropertiesResponseDataPropertiesInner.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class GetUserPropertiesResponseDataPropertiesInner.");

            return new GetUserPropertiesResponseDataPropertiesInner(id, name, key, value);
        }

        /// <summary>
        /// Serializes a <see cref="GetUserPropertiesResponseDataPropertiesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserPropertiesResponseDataPropertiesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetUserPropertiesResponseDataPropertiesInner getUserPropertiesResponseDataPropertiesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getUserPropertiesResponseDataPropertiesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetUserPropertiesResponseDataPropertiesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserPropertiesResponseDataPropertiesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetUserPropertiesResponseDataPropertiesInner getUserPropertiesResponseDataPropertiesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getUserPropertiesResponseDataPropertiesInner.IdOption.IsSet && getUserPropertiesResponseDataPropertiesInner.Id == null)
                throw new ArgumentNullException(nameof(getUserPropertiesResponseDataPropertiesInner.Id), "Property is required for class GetUserPropertiesResponseDataPropertiesInner.");

            if (getUserPropertiesResponseDataPropertiesInner.NameOption.IsSet && getUserPropertiesResponseDataPropertiesInner.Name == null)
                throw new ArgumentNullException(nameof(getUserPropertiesResponseDataPropertiesInner.Name), "Property is required for class GetUserPropertiesResponseDataPropertiesInner.");

            if (getUserPropertiesResponseDataPropertiesInner.KeyOption.IsSet && getUserPropertiesResponseDataPropertiesInner.Key == null)
                throw new ArgumentNullException(nameof(getUserPropertiesResponseDataPropertiesInner.Key), "Property is required for class GetUserPropertiesResponseDataPropertiesInner.");

            if (getUserPropertiesResponseDataPropertiesInner.ValueOption.IsSet && getUserPropertiesResponseDataPropertiesInner.Value == null)
                throw new ArgumentNullException(nameof(getUserPropertiesResponseDataPropertiesInner.Value), "Property is required for class GetUserPropertiesResponseDataPropertiesInner.");

            if (getUserPropertiesResponseDataPropertiesInner.IdOption.IsSet)
                writer.WriteString("id", getUserPropertiesResponseDataPropertiesInner.Id);

            if (getUserPropertiesResponseDataPropertiesInner.NameOption.IsSet)
                writer.WriteString("name", getUserPropertiesResponseDataPropertiesInner.Name);

            if (getUserPropertiesResponseDataPropertiesInner.KeyOption.IsSet)
                writer.WriteString("key", getUserPropertiesResponseDataPropertiesInner.Key);

            if (getUserPropertiesResponseDataPropertiesInner.ValueOption.IsSet)
            {
                writer.WritePropertyName("value");
                JsonSerializer.Serialize(writer, getUserPropertiesResponseDataPropertiesInner.Value, jsonSerializerOptions);
            }
        }
    }
}
