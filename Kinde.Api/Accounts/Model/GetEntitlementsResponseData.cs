// <auto-generated>
/*
 * Kinde Account API
 *
 *  Provides endpoints to operate on an authenticated user.  ## Intro  ## How to use  1. Get a user access token - this can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc).  2. Call one of the endpoints below using the user access token in the Authorization header as a Bearer token. Typically, you can use the `getToken` command in the relevant SDK. 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Accounts.Client;

namespace Kinde.Accounts.Model
{
    /// <summary>
    /// GetEntitlementsResponseData
    /// </summary>
    public partial class GetEntitlementsResponseData
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEntitlementsResponseData" /> class.
        /// </summary>
        /// <param name="orgCode">The organization code the entitlements are associated with.</param>
        /// <param name="plans">A list of plans the user is subscribed to</param>
        /// <param name="entitlements">A list of entitlements</param>
        [JsonConstructor]
        public GetEntitlementsResponseData(Option<string?> orgCode = default, Option<List<GetEntitlementsResponseDataPlansInner>?> plans = default, Option<List<GetEntitlementsResponseDataEntitlementsInner>?> entitlements = default)
        {
            OrgCodeOption = orgCode;
            PlansOption = plans;
            EntitlementsOption = entitlements;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of OrgCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrgCodeOption { get; private set; }

        /// <summary>
        /// The organization code the entitlements are associated with.
        /// </summary>
        /// <value>The organization code the entitlements are associated with.</value>
        /* <example>org_0195ac80a14e</example> */
        [JsonPropertyName("org_code")]
        public string? OrgCode { get { return this.OrgCodeOption; } set { this.OrgCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Plans
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetEntitlementsResponseDataPlansInner>?> PlansOption { get; private set; }

        /// <summary>
        /// A list of plans the user is subscribed to
        /// </summary>
        /// <value>A list of plans the user is subscribed to</value>
        [JsonPropertyName("plans")]
        public List<GetEntitlementsResponseDataPlansInner>? Plans { get { return this.PlansOption; } set { this.PlansOption = new(value); } }

        /// <summary>
        /// Used to track the state of Entitlements
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetEntitlementsResponseDataEntitlementsInner>?> EntitlementsOption { get; private set; }

        /// <summary>
        /// A list of entitlements
        /// </summary>
        /// <value>A list of entitlements</value>
        [JsonPropertyName("entitlements")]
        public List<GetEntitlementsResponseDataEntitlementsInner>? Entitlements { get { return this.EntitlementsOption; } set { this.EntitlementsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEntitlementsResponseData {\n");
            sb.Append("  OrgCode: ").Append(OrgCode).Append("\n");
            sb.Append("  Plans: ").Append(Plans).Append("\n");
            sb.Append("  Entitlements: ").Append(Entitlements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetEntitlementsResponseData" />
    /// </summary>
    public class GetEntitlementsResponseDataJsonConverter : JsonConverter<GetEntitlementsResponseData>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetEntitlementsResponseData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetEntitlementsResponseData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> orgCode = default;
            Option<List<GetEntitlementsResponseDataPlansInner>?> plans = default;
            Option<List<GetEntitlementsResponseDataEntitlementsInner>?> entitlements = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "org_code":
                            orgCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "plans":
                            plans = new Option<List<GetEntitlementsResponseDataPlansInner>?>(JsonSerializer.Deserialize<List<GetEntitlementsResponseDataPlansInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "entitlements":
                            entitlements = new Option<List<GetEntitlementsResponseDataEntitlementsInner>?>(JsonSerializer.Deserialize<List<GetEntitlementsResponseDataEntitlementsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (orgCode.IsSet && orgCode.Value == null)
                throw new ArgumentNullException(nameof(orgCode), "Property is not nullable for class GetEntitlementsResponseData.");

            if (plans.IsSet && plans.Value == null)
                throw new ArgumentNullException(nameof(plans), "Property is not nullable for class GetEntitlementsResponseData.");

            if (entitlements.IsSet && entitlements.Value == null)
                throw new ArgumentNullException(nameof(entitlements), "Property is not nullable for class GetEntitlementsResponseData.");

            return new GetEntitlementsResponseData(orgCode, plans, entitlements);
        }

        /// <summary>
        /// Serializes a <see cref="GetEntitlementsResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEntitlementsResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetEntitlementsResponseData getEntitlementsResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getEntitlementsResponseData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetEntitlementsResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEntitlementsResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetEntitlementsResponseData getEntitlementsResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getEntitlementsResponseData.OrgCodeOption.IsSet && getEntitlementsResponseData.OrgCode == null)
                throw new ArgumentNullException(nameof(getEntitlementsResponseData.OrgCode), "Property is required for class GetEntitlementsResponseData.");

            if (getEntitlementsResponseData.PlansOption.IsSet && getEntitlementsResponseData.Plans == null)
                throw new ArgumentNullException(nameof(getEntitlementsResponseData.Plans), "Property is required for class GetEntitlementsResponseData.");

            if (getEntitlementsResponseData.EntitlementsOption.IsSet && getEntitlementsResponseData.Entitlements == null)
                throw new ArgumentNullException(nameof(getEntitlementsResponseData.Entitlements), "Property is required for class GetEntitlementsResponseData.");

            if (getEntitlementsResponseData.OrgCodeOption.IsSet)
                writer.WriteString("org_code", getEntitlementsResponseData.OrgCode);

            if (getEntitlementsResponseData.PlansOption.IsSet)
            {
                writer.WritePropertyName("plans");
                JsonSerializer.Serialize(writer, getEntitlementsResponseData.Plans, jsonSerializerOptions);
            }
            if (getEntitlementsResponseData.EntitlementsOption.IsSet)
            {
                writer.WritePropertyName("entitlements");
                JsonSerializer.Serialize(writer, getEntitlementsResponseData.Entitlements, jsonSerializerOptions);
            }
        }
    }
}
