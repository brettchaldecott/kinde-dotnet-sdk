// <auto-generated>
/*
 * Kinde Account API
 *
 *  Provides endpoints to operate on an authenticated user.  ## Intro  ## How to use  1. Get a user access token - this can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc).  2. Call one of the endpoints below using the user access token in the Authorization header as a Bearer token. Typically, you can use the `getToken` command in the relevant SDK. 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Accounts.Client;

namespace Kinde.Accounts.Model
{
    /// <summary>
    /// GetEntitlementsResponseDataPlansInner
    /// </summary>
    public partial class GetEntitlementsResponseDataPlansInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEntitlementsResponseDataPlansInner" /> class.
        /// </summary>
        /// <param name="key">A unique code for the plan</param>
        /// <param name="name">Name of the plan</param>
        /// <param name="subscribedOn">The date the user subscribed to the plan</param>
        [JsonConstructor]
        public GetEntitlementsResponseDataPlansInner(Option<string?> key = default, Option<string?> name = default, Option<DateTimeOffset?> subscribedOn = default)
        {
            KeyOption = key;
            NameOption = name;
            SubscribedOnOption = subscribedOn;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Key
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyOption { get; private set; }

        /// <summary>
        /// A unique code for the plan
        /// </summary>
        /// <value>A unique code for the plan</value>
        /* <example>pro_plan</example> */
        [JsonPropertyName("key")]
        public string? Key { get { return this.KeyOption; } set { this.KeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Name of the plan
        /// </summary>
        /// <value>Name of the plan</value>
        /* <example>Pro</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubscribedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> SubscribedOnOption { get; private set; }

        /// <summary>
        /// The date the user subscribed to the plan
        /// </summary>
        /// <value>The date the user subscribed to the plan</value>
        /* <example>2025-06-01T12:00Z</example> */
        [JsonPropertyName("subscribed_on")]
        public DateTimeOffset? SubscribedOn { get { return this.SubscribedOnOption; } set { this.SubscribedOnOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEntitlementsResponseDataPlansInner {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SubscribedOn: ").Append(SubscribedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetEntitlementsResponseDataPlansInner" />
    /// </summary>
    public class GetEntitlementsResponseDataPlansInnerJsonConverter : JsonConverter<GetEntitlementsResponseDataPlansInner>
    {
        /// <summary>
        /// The format to use to serialize SubscribedOn
        /// </summary>
        public static string SubscribedOnFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetEntitlementsResponseDataPlansInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetEntitlementsResponseDataPlansInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> key = default;
            Option<string?> name = default;
            Option<DateTimeOffset?> subscribedOn = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subscribed_on":
                            subscribedOn = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class GetEntitlementsResponseDataPlansInner.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetEntitlementsResponseDataPlansInner.");

            if (subscribedOn.IsSet && subscribedOn.Value == null)
                throw new ArgumentNullException(nameof(subscribedOn), "Property is not nullable for class GetEntitlementsResponseDataPlansInner.");

            return new GetEntitlementsResponseDataPlansInner(key, name, subscribedOn);
        }

        /// <summary>
        /// Serializes a <see cref="GetEntitlementsResponseDataPlansInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEntitlementsResponseDataPlansInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetEntitlementsResponseDataPlansInner getEntitlementsResponseDataPlansInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getEntitlementsResponseDataPlansInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetEntitlementsResponseDataPlansInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEntitlementsResponseDataPlansInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetEntitlementsResponseDataPlansInner getEntitlementsResponseDataPlansInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getEntitlementsResponseDataPlansInner.KeyOption.IsSet && getEntitlementsResponseDataPlansInner.Key == null)
                throw new ArgumentNullException(nameof(getEntitlementsResponseDataPlansInner.Key), "Property is required for class GetEntitlementsResponseDataPlansInner.");

            if (getEntitlementsResponseDataPlansInner.NameOption.IsSet && getEntitlementsResponseDataPlansInner.Name == null)
                throw new ArgumentNullException(nameof(getEntitlementsResponseDataPlansInner.Name), "Property is required for class GetEntitlementsResponseDataPlansInner.");

            if (getEntitlementsResponseDataPlansInner.KeyOption.IsSet)
                writer.WriteString("key", getEntitlementsResponseDataPlansInner.Key);

            if (getEntitlementsResponseDataPlansInner.NameOption.IsSet)
                writer.WriteString("name", getEntitlementsResponseDataPlansInner.Name);

            if (getEntitlementsResponseDataPlansInner.SubscribedOnOption.IsSet)
                writer.WriteString("subscribed_on", getEntitlementsResponseDataPlansInner.SubscribedOnOption.Value!.Value.ToString(SubscribedOnFormat));
        }
    }
}
