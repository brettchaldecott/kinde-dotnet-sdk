// <auto-generated>
/*
 * Kinde Account API
 *
 *  Provides endpoints to operate on an authenticated user.  ## Intro  ## How to use  1. Get a user access token - this can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc).  2. Call one of the endpoints below using the user access token in the Authorization header as a Bearer token. Typically, you can use the `getToken` command in the relevant SDK. 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Accounts.Client;

namespace Kinde.Accounts.Model
{
    /// <summary>
    /// GetEntitlementsResponseDataEntitlementsInner
    /// </summary>
    public partial class GetEntitlementsResponseDataEntitlementsInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEntitlementsResponseDataEntitlementsInner" /> class.
        /// </summary>
        /// <param name="id">The friendly id of an entitlement</param>
        /// <param name="fixedCharge">The price charged if this is an entitlement for a fixed charged</param>
        /// <param name="priceName">The name of the price associated with the entitlement</param>
        /// <param name="unitAmount">The price charged for this entitlement in cents</param>
        /// <param name="featureKey">The key of the feature corresponding to this entitlement</param>
        /// <param name="featureName">The name of the feature corresponding to this entitlement</param>
        /// <param name="entitlementLimitMax">The maximum number of units of the feature the customer is entitled to</param>
        /// <param name="entitlementLimitMin">The minimum number of units of the feature the customer is entitled to</param>
        [JsonConstructor]
        public GetEntitlementsResponseDataEntitlementsInner(Option<string?> id = default, Option<int?> fixedCharge = default, Option<string?> priceName = default, Option<int?> unitAmount = default, Option<string?> featureKey = default, Option<string?> featureName = default, Option<int?> entitlementLimitMax = default, Option<int?> entitlementLimitMin = default)
        {
            IdOption = id;
            FixedChargeOption = fixedCharge;
            PriceNameOption = priceName;
            UnitAmountOption = unitAmount;
            FeatureKeyOption = featureKey;
            FeatureNameOption = featureName;
            EntitlementLimitMaxOption = entitlementLimitMax;
            EntitlementLimitMinOption = entitlementLimitMin;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The friendly id of an entitlement
        /// </summary>
        /// <value>The friendly id of an entitlement</value>
        /* <example>entitlement_0195ac80a14e8d71f42b98e75d3c61ad</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FixedCharge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FixedChargeOption { get; private set; }

        /// <summary>
        /// The price charged if this is an entitlement for a fixed charged
        /// </summary>
        /// <value>The price charged if this is an entitlement for a fixed charged</value>
        /* <example>35</example> */
        [JsonPropertyName("fixed_charge")]
        public int? FixedCharge { get { return this.FixedChargeOption; } set { this.FixedChargeOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of PriceName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PriceNameOption { get; private set; }

        /// <summary>
        /// The name of the price associated with the entitlement
        /// </summary>
        /// <value>The name of the price associated with the entitlement</value>
        /* <example>Pro gym</example> */
        [JsonPropertyName("price_name")]
        public string? PriceName { get { return this.PriceNameOption; } set { this.PriceNameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of UnitAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> UnitAmountOption { get; private set; }

        /// <summary>
        /// The price charged for this entitlement in cents
        /// </summary>
        /// <value>The price charged for this entitlement in cents</value>
        [JsonPropertyName("unit_amount")]
        public int? UnitAmount { get { return this.UnitAmountOption; } set { this.UnitAmountOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of FeatureKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FeatureKeyOption { get; private set; }

        /// <summary>
        /// The key of the feature corresponding to this entitlement
        /// </summary>
        /// <value>The key of the feature corresponding to this entitlement</value>
        /* <example>base_price</example> */
        [JsonPropertyName("feature_key")]
        public string? FeatureKey { get { return this.FeatureKeyOption; } set { this.FeatureKeyOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FeatureName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FeatureNameOption { get; private set; }

        /// <summary>
        /// The name of the feature corresponding to this entitlement
        /// </summary>
        /// <value>The name of the feature corresponding to this entitlement</value>
        /* <example>Pro Gym</example> */
        [JsonPropertyName("feature_name")]
        public string? FeatureName { get { return this.FeatureNameOption; } set { this.FeatureNameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of EntitlementLimitMax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EntitlementLimitMaxOption { get; private set; }

        /// <summary>
        /// The maximum number of units of the feature the customer is entitled to
        /// </summary>
        /// <value>The maximum number of units of the feature the customer is entitled to</value>
        [JsonPropertyName("entitlement_limit_max")]
        public int? EntitlementLimitMax { get { return this.EntitlementLimitMaxOption; } set { this.EntitlementLimitMaxOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of EntitlementLimitMin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EntitlementLimitMinOption { get; private set; }

        /// <summary>
        /// The minimum number of units of the feature the customer is entitled to
        /// </summary>
        /// <value>The minimum number of units of the feature the customer is entitled to</value>
        [JsonPropertyName("entitlement_limit_min")]
        public int? EntitlementLimitMin { get { return this.EntitlementLimitMinOption; } set { this.EntitlementLimitMinOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEntitlementsResponseDataEntitlementsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FixedCharge: ").Append(FixedCharge).Append("\n");
            sb.Append("  PriceName: ").Append(PriceName).Append("\n");
            sb.Append("  UnitAmount: ").Append(UnitAmount).Append("\n");
            sb.Append("  FeatureKey: ").Append(FeatureKey).Append("\n");
            sb.Append("  FeatureName: ").Append(FeatureName).Append("\n");
            sb.Append("  EntitlementLimitMax: ").Append(EntitlementLimitMax).Append("\n");
            sb.Append("  EntitlementLimitMin: ").Append(EntitlementLimitMin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetEntitlementsResponseDataEntitlementsInner" />
    /// </summary>
    public class GetEntitlementsResponseDataEntitlementsInnerJsonConverter : JsonConverter<GetEntitlementsResponseDataEntitlementsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetEntitlementsResponseDataEntitlementsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetEntitlementsResponseDataEntitlementsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<int?> fixedCharge = default;
            Option<string?> priceName = default;
            Option<int?> unitAmount = default;
            Option<string?> featureKey = default;
            Option<string?> featureName = default;
            Option<int?> entitlementLimitMax = default;
            Option<int?> entitlementLimitMin = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fixed_charge":
                            fixedCharge = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "price_name":
                            priceName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "unit_amount":
                            unitAmount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "feature_key":
                            featureKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "feature_name":
                            featureName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "entitlement_limit_max":
                            entitlementLimitMax = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "entitlement_limit_min":
                            entitlementLimitMin = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetEntitlementsResponseDataEntitlementsInner.");

            if (priceName.IsSet && priceName.Value == null)
                throw new ArgumentNullException(nameof(priceName), "Property is not nullable for class GetEntitlementsResponseDataEntitlementsInner.");

            if (featureKey.IsSet && featureKey.Value == null)
                throw new ArgumentNullException(nameof(featureKey), "Property is not nullable for class GetEntitlementsResponseDataEntitlementsInner.");

            if (featureName.IsSet && featureName.Value == null)
                throw new ArgumentNullException(nameof(featureName), "Property is not nullable for class GetEntitlementsResponseDataEntitlementsInner.");

            return new GetEntitlementsResponseDataEntitlementsInner(id, fixedCharge, priceName, unitAmount, featureKey, featureName, entitlementLimitMax, entitlementLimitMin);
        }

        /// <summary>
        /// Serializes a <see cref="GetEntitlementsResponseDataEntitlementsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEntitlementsResponseDataEntitlementsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetEntitlementsResponseDataEntitlementsInner getEntitlementsResponseDataEntitlementsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getEntitlementsResponseDataEntitlementsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetEntitlementsResponseDataEntitlementsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEntitlementsResponseDataEntitlementsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetEntitlementsResponseDataEntitlementsInner getEntitlementsResponseDataEntitlementsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getEntitlementsResponseDataEntitlementsInner.IdOption.IsSet && getEntitlementsResponseDataEntitlementsInner.Id == null)
                throw new ArgumentNullException(nameof(getEntitlementsResponseDataEntitlementsInner.Id), "Property is required for class GetEntitlementsResponseDataEntitlementsInner.");

            if (getEntitlementsResponseDataEntitlementsInner.PriceNameOption.IsSet && getEntitlementsResponseDataEntitlementsInner.PriceName == null)
                throw new ArgumentNullException(nameof(getEntitlementsResponseDataEntitlementsInner.PriceName), "Property is required for class GetEntitlementsResponseDataEntitlementsInner.");

            if (getEntitlementsResponseDataEntitlementsInner.FeatureKeyOption.IsSet && getEntitlementsResponseDataEntitlementsInner.FeatureKey == null)
                throw new ArgumentNullException(nameof(getEntitlementsResponseDataEntitlementsInner.FeatureKey), "Property is required for class GetEntitlementsResponseDataEntitlementsInner.");

            if (getEntitlementsResponseDataEntitlementsInner.FeatureNameOption.IsSet && getEntitlementsResponseDataEntitlementsInner.FeatureName == null)
                throw new ArgumentNullException(nameof(getEntitlementsResponseDataEntitlementsInner.FeatureName), "Property is required for class GetEntitlementsResponseDataEntitlementsInner.");

            if (getEntitlementsResponseDataEntitlementsInner.IdOption.IsSet)
                writer.WriteString("id", getEntitlementsResponseDataEntitlementsInner.Id);

            if (getEntitlementsResponseDataEntitlementsInner.FixedChargeOption.IsSet)
                if (getEntitlementsResponseDataEntitlementsInner.FixedChargeOption.Value != null)
                    writer.WriteNumber("fixed_charge", getEntitlementsResponseDataEntitlementsInner.FixedChargeOption.Value!.Value);
                else
                    writer.WriteNull("fixed_charge");

            if (getEntitlementsResponseDataEntitlementsInner.PriceNameOption.IsSet)
                writer.WriteString("price_name", getEntitlementsResponseDataEntitlementsInner.PriceName);

            if (getEntitlementsResponseDataEntitlementsInner.UnitAmountOption.IsSet)
                if (getEntitlementsResponseDataEntitlementsInner.UnitAmountOption.Value != null)
                    writer.WriteNumber("unit_amount", getEntitlementsResponseDataEntitlementsInner.UnitAmountOption.Value!.Value);
                else
                    writer.WriteNull("unit_amount");

            if (getEntitlementsResponseDataEntitlementsInner.FeatureKeyOption.IsSet)
                writer.WriteString("feature_key", getEntitlementsResponseDataEntitlementsInner.FeatureKey);

            if (getEntitlementsResponseDataEntitlementsInner.FeatureNameOption.IsSet)
                writer.WriteString("feature_name", getEntitlementsResponseDataEntitlementsInner.FeatureName);

            if (getEntitlementsResponseDataEntitlementsInner.EntitlementLimitMaxOption.IsSet)
                if (getEntitlementsResponseDataEntitlementsInner.EntitlementLimitMaxOption.Value != null)
                    writer.WriteNumber("entitlement_limit_max", getEntitlementsResponseDataEntitlementsInner.EntitlementLimitMaxOption.Value!.Value);
                else
                    writer.WriteNull("entitlement_limit_max");

            if (getEntitlementsResponseDataEntitlementsInner.EntitlementLimitMinOption.IsSet)
                if (getEntitlementsResponseDataEntitlementsInner.EntitlementLimitMinOption.Value != null)
                    writer.WriteNumber("entitlement_limit_min", getEntitlementsResponseDataEntitlementsInner.EntitlementLimitMinOption.Value!.Value);
                else
                    writer.WriteNull("entitlement_limit_min");
        }
    }
}
