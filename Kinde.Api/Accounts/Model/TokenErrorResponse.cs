// <auto-generated>
/*
 * Kinde Account API
 *
 *  Provides endpoints to operate on an authenticated user.  ## Intro  ## How to use  1. Get a user access token - this can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc).  2. Call one of the endpoints below using the user access token in the Authorization header as a Bearer token. Typically, you can use the `getToken` command in the relevant SDK. 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Accounts.Client;

namespace Kinde.Accounts.Model
{
    /// <summary>
    /// TokenErrorResponse
    /// </summary>
    public partial class TokenErrorResponse
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenErrorResponse" /> class.
        /// </summary>
        /// <param name="error">Error.</param>
        /// <param name="errorDescription">The error description.</param>
        [JsonConstructor]
        public TokenErrorResponse(Option<string?> error = default, Option<string?> errorDescription = default)
        {
            ErrorOption = error;
            ErrorDescriptionOption = errorDescription;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ErrorOption { get; private set; }

        /// <summary>
        /// Error.
        /// </summary>
        /// <value>Error.</value>
        [JsonPropertyName("error")]
        public string? Error { get { return this.ErrorOption; } set { this.ErrorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ErrorDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ErrorDescriptionOption { get; private set; }

        /// <summary>
        /// The error description.
        /// </summary>
        /// <value>The error description.</value>
        [JsonPropertyName("error_description")]
        public string? ErrorDescription { get { return this.ErrorDescriptionOption; } set { this.ErrorDescriptionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenErrorResponse {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  ErrorDescription: ").Append(ErrorDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TokenErrorResponse" />
    /// </summary>
    public class TokenErrorResponseJsonConverter : JsonConverter<TokenErrorResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="TokenErrorResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TokenErrorResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> error = default;
            Option<string?> errorDescription = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "error":
                            error = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "error_description":
                            errorDescription = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (error.IsSet && error.Value == null)
                throw new ArgumentNullException(nameof(error), "Property is not nullable for class TokenErrorResponse.");

            if (errorDescription.IsSet && errorDescription.Value == null)
                throw new ArgumentNullException(nameof(errorDescription), "Property is not nullable for class TokenErrorResponse.");

            return new TokenErrorResponse(error, errorDescription);
        }

        /// <summary>
        /// Serializes a <see cref="TokenErrorResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tokenErrorResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TokenErrorResponse tokenErrorResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tokenErrorResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TokenErrorResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tokenErrorResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TokenErrorResponse tokenErrorResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tokenErrorResponse.ErrorOption.IsSet && tokenErrorResponse.Error == null)
                throw new ArgumentNullException(nameof(tokenErrorResponse.Error), "Property is required for class TokenErrorResponse.");

            if (tokenErrorResponse.ErrorDescriptionOption.IsSet && tokenErrorResponse.ErrorDescription == null)
                throw new ArgumentNullException(nameof(tokenErrorResponse.ErrorDescription), "Property is required for class TokenErrorResponse.");

            if (tokenErrorResponse.ErrorOption.IsSet)
                writer.WriteString("error", tokenErrorResponse.Error);

            if (tokenErrorResponse.ErrorDescriptionOption.IsSet)
                writer.WriteString("error_description", tokenErrorResponse.ErrorDescription);
        }
    }
}
