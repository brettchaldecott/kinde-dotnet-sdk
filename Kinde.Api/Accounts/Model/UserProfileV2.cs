// <auto-generated>
/*
 * Kinde Account API
 *
 *  Provides endpoints to operate on an authenticated user.  ## Intro  ## How to use  1. Get a user access token - this can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc).  2. Call one of the endpoints below using the user access token in the Authorization header as a Bearer token. Typically, you can use the `getToken` command in the relevant SDK. 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Accounts.Client;

namespace Kinde.Accounts.Model
{
    /// <summary>
    /// UserProfileV2
    /// </summary>
    public partial class UserProfileV2
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserProfileV2" /> class.
        /// </summary>
        /// <param name="sub">Unique ID of the user in Kinde.</param>
        /// <param name="providedId">Value of the user&#39;s ID in a third-party system when the user is imported into Kinde.</param>
        /// <param name="name">User&#39;s first and last name separated by a space.</param>
        /// <param name="givenName">User&#39;s first name.</param>
        /// <param name="familyName">User&#39;s last name.</param>
        /// <param name="updatedAt">Date the user was last updated at (In Unix time).</param>
        /// <param name="email">User&#39;s email address if available.</param>
        /// <param name="emailVerified">Whether the user&#39;s email address has been verified.</param>
        /// <param name="picture">URL that point&#39;s to the user&#39;s picture or avatar</param>
        /// <param name="preferredUsername">User&#39;s preferred username.</param>
        /// <param name="id">Unique ID of the user in Kinde</param>
        [JsonConstructor]
        public UserProfileV2(Option<string?> sub = default, Option<string?> providedId = default, Option<string?> name = default, Option<string?> givenName = default, Option<string?> familyName = default, Option<int?> updatedAt = default, Option<string?> email = default, Option<bool?> emailVerified = default, Option<string?> picture = default, Option<string?> preferredUsername = default, Option<string?> id = default)
        {
            SubOption = sub;
            ProvidedIdOption = providedId;
            NameOption = name;
            GivenNameOption = givenName;
            FamilyNameOption = familyName;
            UpdatedAtOption = updatedAt;
            EmailOption = email;
            EmailVerifiedOption = emailVerified;
            PictureOption = picture;
            PreferredUsernameOption = preferredUsername;
            IdOption = id;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Sub
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubOption { get; private set; }

        /// <summary>
        /// Unique ID of the user in Kinde.
        /// </summary>
        /// <value>Unique ID of the user in Kinde.</value>
        /* <example>kp_c3143a4b50ad43c88e541d9077681782</example> */
        [JsonPropertyName("sub")]
        public string? Sub { get { return this.SubOption; } set { this.SubOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ProvidedId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProvidedIdOption { get; private set; }

        /// <summary>
        /// Value of the user&#39;s ID in a third-party system when the user is imported into Kinde.
        /// </summary>
        /// <value>Value of the user&#39;s ID in a third-party system when the user is imported into Kinde.</value>
        /* <example>some_external_id</example> */
        [JsonPropertyName("provided_id")]
        public string? ProvidedId { get { return this.ProvidedIdOption; } set { this.ProvidedIdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// User&#39;s first and last name separated by a space.
        /// </summary>
        /// <value>User&#39;s first and last name separated by a space.</value>
        /* <example>John Snow</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of GivenName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GivenNameOption { get; private set; }

        /// <summary>
        /// User&#39;s first name.
        /// </summary>
        /// <value>User&#39;s first name.</value>
        /* <example>John</example> */
        [JsonPropertyName("given_name")]
        public string? GivenName { get { return this.GivenNameOption; } set { this.GivenNameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FamilyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FamilyNameOption { get; private set; }

        /// <summary>
        /// User&#39;s last name.
        /// </summary>
        /// <value>User&#39;s last name.</value>
        /* <example>Snow</example> */
        [JsonPropertyName("family_name")]
        public string? FamilyName { get { return this.FamilyNameOption; } set { this.FamilyNameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Date the user was last updated at (In Unix time).
        /// </summary>
        /// <value>Date the user was last updated at (In Unix time).</value>
        /* <example>1612345678</example> */
        [JsonPropertyName("updated_at")]
        public int? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// User&#39;s email address if available.
        /// </summary>
        /// <value>User&#39;s email address if available.</value>
        /* <example>john.snow@example.com</example> */
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of EmailVerified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EmailVerifiedOption { get; private set; }

        /// <summary>
        /// Whether the user&#39;s email address has been verified.
        /// </summary>
        /// <value>Whether the user&#39;s email address has been verified.</value>
        /* <example>true</example> */
        [JsonPropertyName("email_verified")]
        public bool? EmailVerified { get { return this.EmailVerifiedOption; } set { this.EmailVerifiedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Picture
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PictureOption { get; private set; }

        /// <summary>
        /// URL that point&#39;s to the user&#39;s picture or avatar
        /// </summary>
        /// <value>URL that point&#39;s to the user&#39;s picture or avatar</value>
        /* <example>https://example.com/john_snow.jpg</example> */
        [JsonPropertyName("picture")]
        public string? Picture { get { return this.PictureOption; } set { this.PictureOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of PreferredUsername
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreferredUsernameOption { get; private set; }

        /// <summary>
        /// User&#39;s preferred username.
        /// </summary>
        /// <value>User&#39;s preferred username.</value>
        /* <example>john_snow</example> */
        [JsonPropertyName("preferred_username")]
        public string? PreferredUsername { get { return this.PreferredUsernameOption; } set { this.PreferredUsernameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Unique ID of the user in Kinde
        /// </summary>
        /// <value>Unique ID of the user in Kinde</value>
        /* <example>kp_c3143a4b50ad43c88e541d9077681782</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserProfileV2 {\n");
            sb.Append("  Sub: ").Append(Sub).Append("\n");
            sb.Append("  ProvidedId: ").Append(ProvidedId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  FamilyName: ").Append(FamilyName).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("  PreferredUsername: ").Append(PreferredUsername).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserProfileV2" />
    /// </summary>
    public class UserProfileV2JsonConverter : JsonConverter<UserProfileV2>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserProfileV2" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserProfileV2 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> sub = default;
            Option<string?> providedId = default;
            Option<string?> name = default;
            Option<string?> givenName = default;
            Option<string?> familyName = default;
            Option<int?> updatedAt = default;
            Option<string?> email = default;
            Option<bool?> emailVerified = default;
            Option<string?> picture = default;
            Option<string?> preferredUsername = default;
            Option<string?> id = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sub":
                            sub = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "provided_id":
                            providedId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "given_name":
                            givenName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "family_name":
                            familyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email_verified":
                            emailVerified = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "picture":
                            picture = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "preferred_username":
                            preferredUsername = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (sub.IsSet && sub.Value == null)
                throw new ArgumentNullException(nameof(sub), "Property is not nullable for class UserProfileV2.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UserProfileV2.");

            if (givenName.IsSet && givenName.Value == null)
                throw new ArgumentNullException(nameof(givenName), "Property is not nullable for class UserProfileV2.");

            if (familyName.IsSet && familyName.Value == null)
                throw new ArgumentNullException(nameof(familyName), "Property is not nullable for class UserProfileV2.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class UserProfileV2.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class UserProfileV2.");

            if (emailVerified.IsSet && emailVerified.Value == null)
                throw new ArgumentNullException(nameof(emailVerified), "Property is not nullable for class UserProfileV2.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UserProfileV2.");

            return new UserProfileV2(sub, providedId, name, givenName, familyName, updatedAt, email, emailVerified, picture, preferredUsername, id);
        }

        /// <summary>
        /// Serializes a <see cref="UserProfileV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userProfileV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserProfileV2 userProfileV2, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userProfileV2, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserProfileV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userProfileV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserProfileV2 userProfileV2, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userProfileV2.SubOption.IsSet && userProfileV2.Sub == null)
                throw new ArgumentNullException(nameof(userProfileV2.Sub), "Property is required for class UserProfileV2.");

            if (userProfileV2.NameOption.IsSet && userProfileV2.Name == null)
                throw new ArgumentNullException(nameof(userProfileV2.Name), "Property is required for class UserProfileV2.");

            if (userProfileV2.GivenNameOption.IsSet && userProfileV2.GivenName == null)
                throw new ArgumentNullException(nameof(userProfileV2.GivenName), "Property is required for class UserProfileV2.");

            if (userProfileV2.FamilyNameOption.IsSet && userProfileV2.FamilyName == null)
                throw new ArgumentNullException(nameof(userProfileV2.FamilyName), "Property is required for class UserProfileV2.");

            if (userProfileV2.EmailOption.IsSet && userProfileV2.Email == null)
                throw new ArgumentNullException(nameof(userProfileV2.Email), "Property is required for class UserProfileV2.");

            if (userProfileV2.IdOption.IsSet && userProfileV2.Id == null)
                throw new ArgumentNullException(nameof(userProfileV2.Id), "Property is required for class UserProfileV2.");

            if (userProfileV2.SubOption.IsSet)
                writer.WriteString("sub", userProfileV2.Sub);

            if (userProfileV2.ProvidedIdOption.IsSet)
                if (userProfileV2.ProvidedIdOption.Value != null)
                    writer.WriteString("provided_id", userProfileV2.ProvidedId);
                else
                    writer.WriteNull("provided_id");

            if (userProfileV2.NameOption.IsSet)
                writer.WriteString("name", userProfileV2.Name);

            if (userProfileV2.GivenNameOption.IsSet)
                writer.WriteString("given_name", userProfileV2.GivenName);

            if (userProfileV2.FamilyNameOption.IsSet)
                writer.WriteString("family_name", userProfileV2.FamilyName);

            if (userProfileV2.UpdatedAtOption.IsSet)
                writer.WriteNumber("updated_at", userProfileV2.UpdatedAtOption.Value!.Value);

            if (userProfileV2.EmailOption.IsSet)
                writer.WriteString("email", userProfileV2.Email);

            if (userProfileV2.EmailVerifiedOption.IsSet)
                writer.WriteBoolean("email_verified", userProfileV2.EmailVerifiedOption.Value!.Value);

            if (userProfileV2.PictureOption.IsSet)
                if (userProfileV2.PictureOption.Value != null)
                    writer.WriteString("picture", userProfileV2.Picture);
                else
                    writer.WriteNull("picture");

            if (userProfileV2.PreferredUsernameOption.IsSet)
                if (userProfileV2.PreferredUsernameOption.Value != null)
                    writer.WriteString("preferred_username", userProfileV2.PreferredUsername);
                else
                    writer.WriteNull("preferred_username");

            if (userProfileV2.IdOption.IsSet)
                writer.WriteString("id", userProfileV2.Id);
        }
    }
}
