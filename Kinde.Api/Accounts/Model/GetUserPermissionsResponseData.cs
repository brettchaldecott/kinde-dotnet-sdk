// <auto-generated>
/*
 * Kinde Account API
 *
 *  Provides endpoints to operate on an authenticated user.  ## Intro  ## How to use  1. Get a user access token - this can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc).  2. Call one of the endpoints below using the user access token in the Authorization header as a Bearer token. Typically, you can use the `getToken` command in the relevant SDK. 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Accounts.Client;

namespace Kinde.Accounts.Model
{
    /// <summary>
    /// GetUserPermissionsResponseData
    /// </summary>
    public partial class GetUserPermissionsResponseData
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserPermissionsResponseData" /> class.
        /// </summary>
        /// <param name="orgCode">The organization code the roles are associated with.</param>
        /// <param name="permissions">A list of permissions</param>
        [JsonConstructor]
        public GetUserPermissionsResponseData(Option<string?> orgCode = default, Option<List<GetUserPermissionsResponseDataPermissionsInner>?> permissions = default)
        {
            OrgCodeOption = orgCode;
            PermissionsOption = permissions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of OrgCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrgCodeOption { get; private set; }

        /// <summary>
        /// The organization code the roles are associated with.
        /// </summary>
        /// <value>The organization code the roles are associated with.</value>
        /* <example>org_0195ac80a14e</example> */
        [JsonPropertyName("org_code")]
        public string? OrgCode { get { return this.OrgCodeOption; } set { this.OrgCodeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Permissions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetUserPermissionsResponseDataPermissionsInner>?> PermissionsOption { get; private set; }

        /// <summary>
        /// A list of permissions
        /// </summary>
        /// <value>A list of permissions</value>
        [JsonPropertyName("permissions")]
        public List<GetUserPermissionsResponseDataPermissionsInner>? Permissions { get { return this.PermissionsOption; } set { this.PermissionsOption = new Option<List<GetUserPermissionsResponseDataPermissionsInner>?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserPermissionsResponseData {\n");
            sb.Append("  OrgCode: ").Append(OrgCode).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetUserPermissionsResponseData" />
    /// </summary>
    public class GetUserPermissionsResponseDataJsonConverter : JsonConverter<GetUserPermissionsResponseData>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetUserPermissionsResponseData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetUserPermissionsResponseData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> orgCode = default;
            Option<List<GetUserPermissionsResponseDataPermissionsInner>?> permissions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "org_code":
                            orgCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "permissions":
                            permissions = new Option<List<GetUserPermissionsResponseDataPermissionsInner>?>(JsonSerializer.Deserialize<List<GetUserPermissionsResponseDataPermissionsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (orgCode.IsSet && orgCode.Value == null)
                throw new ArgumentNullException(nameof(orgCode), "Property is not nullable for class GetUserPermissionsResponseData.");

            if (permissions.IsSet && permissions.Value == null)
                throw new ArgumentNullException(nameof(permissions), "Property is not nullable for class GetUserPermissionsResponseData.");

            return new GetUserPermissionsResponseData(orgCode, permissions);
        }

        /// <summary>
        /// Serializes a <see cref="GetUserPermissionsResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserPermissionsResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetUserPermissionsResponseData getUserPermissionsResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getUserPermissionsResponseData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetUserPermissionsResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserPermissionsResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetUserPermissionsResponseData getUserPermissionsResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getUserPermissionsResponseData.OrgCodeOption.IsSet && getUserPermissionsResponseData.OrgCode == null)
                throw new ArgumentNullException(nameof(getUserPermissionsResponseData.OrgCode), "Property is required for class GetUserPermissionsResponseData.");

            if (getUserPermissionsResponseData.PermissionsOption.IsSet && getUserPermissionsResponseData.Permissions == null)
                throw new ArgumentNullException(nameof(getUserPermissionsResponseData.Permissions), "Property is required for class GetUserPermissionsResponseData.");

            if (getUserPermissionsResponseData.OrgCodeOption.IsSet)
                writer.WriteString("org_code", getUserPermissionsResponseData.OrgCode);

            if (getUserPermissionsResponseData.PermissionsOption.IsSet)
            {
                writer.WritePropertyName("permissions");
                JsonSerializer.Serialize(writer, getUserPermissionsResponseData.Permissions, jsonSerializerOptions);
            }
        }
    }
}
