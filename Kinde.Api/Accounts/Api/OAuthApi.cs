// <auto-generated>
/*
 * Kinde Account API
 *
 *  Provides endpoints to operate on an authenticated user.  ## Intro  ## How to use  1. Get a user access token - this can be obtained when a user signs in via the methods you've setup in Kinde (e.g. Google, passwordless, etc).  2. Call one of the endpoints below using the user access token in the Authorization header as a Bearer token. Typically, you can use the `getToken` command in the relevant SDK. 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Kinde.Accounts.Client;
using Kinde.Accounts.Model;

namespace Kinde.Accounts.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOAuthApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OAuthApiEvents Events { get; }

        /// <summary>
        /// Get user profile
        /// </summary>
        /// <remarks>
        /// This endpoint returns a user&#39;s ID, names, profile picture URL and email of the currently logged in user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/><<see cref="IGetUserProfileV2ApiResponse"/>></returns>
        Task<IGetUserProfileV2ApiResponse> GetUserProfileV2Async(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get user profile
        /// </summary>
        /// <remarks>
        /// This endpoint returns a user&#39;s ID, names, profile picture URL and email of the currently logged in user. 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/><<see cref="IGetUserProfileV2ApiResponse"/>?></returns>
        Task<IGetUserProfileV2ApiResponse?> GetUserProfileV2OrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Introspect
        /// </summary>
        /// <remarks>
        /// Retrieve information about the provided token.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to be introspected.</param>
        /// <param name="tokenTypeHint">A hint about the token type being queried in the request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/><<see cref="ITokenIntrospectionApiResponse"/>></returns>
        Task<ITokenIntrospectionApiResponse> TokenIntrospectionAsync(string token, Option<string> tokenTypeHint = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Introspect
        /// </summary>
        /// <remarks>
        /// Retrieve information about the provided token.
        /// </remarks>
        /// <param name="token">The token to be introspected.</param>
        /// <param name="tokenTypeHint">A hint about the token type being queried in the request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/><<see cref="ITokenIntrospectionApiResponse"/>?></returns>
        Task<ITokenIntrospectionApiResponse?> TokenIntrospectionOrDefaultAsync(string token, Option<string> tokenTypeHint = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke token
        /// </summary>
        /// <remarks>
        /// Use this endpoint to invalidate an access or refresh token. The token will no longer be valid for use.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; of your application.</param>
        /// <param name="token">The token to be revoked.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; of your application. Required for backend apps only. (optional)</param>
        /// <param name="tokenTypeHint">The type of token to be revoked. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/><<see cref="ITokenRevocationApiResponse"/>></returns>
        Task<ITokenRevocationApiResponse> TokenRevocationAsync(string clientId, string token, Option<string> clientSecret = default, Option<string> tokenTypeHint = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke token
        /// </summary>
        /// <remarks>
        /// Use this endpoint to invalidate an access or refresh token. The token will no longer be valid for use.
        /// </remarks>
        /// <param name="clientId">The &#x60;client_id&#x60; of your application.</param>
        /// <param name="token">The token to be revoked.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; of your application. Required for backend apps only. (optional)</param>
        /// <param name="tokenTypeHint">The type of token to be revoked. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/><<see cref="ITokenRevocationApiResponse"/>?></returns>
        Task<ITokenRevocationApiResponse?> TokenRevocationOrDefaultAsync(string clientId, string token, Option<string> clientSecret = default, Option<string> tokenTypeHint = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetUserProfileV2ApiResponse"/>
    /// </summary>
    public interface IGetUserProfileV2ApiResponse : Kinde.Accounts.Client.IApiResponse, IOk<Kinde.Accounts.Model.UserProfileV2?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="ITokenIntrospectionApiResponse"/>
    /// </summary>
    public interface ITokenIntrospectionApiResponse : Kinde.Accounts.Client.IApiResponse, IOk<Kinde.Accounts.Model.TokenIntrospect?>, IUnauthorized<Kinde.Accounts.Model.TokenErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="ITokenRevocationApiResponse"/>
    /// </summary>
    public interface ITokenRevocationApiResponse : Kinde.Accounts.Client.IApiResponse, IBadRequest<Kinde.Accounts.Model.ErrorResponse?>, IUnauthorized<Kinde.Accounts.Model.TokenErrorResponse?>, IForbidden<Kinde.Accounts.Model.ErrorResponse?>, ITooManyRequests<Kinde.Accounts.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OAuthApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserProfileV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserProfileV2;

        internal void ExecuteOnGetUserProfileV2(OAuthApi.GetUserProfileV2ApiResponse apiResponse)
        {
            OnGetUserProfileV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserProfileV2(Exception exception)
        {
            OnErrorGetUserProfileV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTokenIntrospection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTokenIntrospection;

        internal void ExecuteOnTokenIntrospection(OAuthApi.TokenIntrospectionApiResponse apiResponse)
        {
            OnTokenIntrospection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTokenIntrospection(Exception exception)
        {
            OnErrorTokenIntrospection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTokenRevocation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTokenRevocation;

        internal void ExecuteOnTokenRevocation(OAuthApi.TokenRevocationApiResponse apiResponse)
        {
            OnTokenRevocation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTokenRevocation(Exception exception)
        {
            OnErrorTokenRevocation?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OAuthApi : IOAuthApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OAuthApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OAuthApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuthApi(ILogger<OAuthApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OAuthApiEvents oAuthApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OAuthApi>();
            HttpClient = httpClient;
            Events = oAuthApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetUserProfileV2DefaultImplementation(IGetUserProfileV2ApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetUserProfileV2(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetUserProfileV2(ref bool suppressDefaultLog, IGetUserProfileV2ApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetUserProfileV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserProfileV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetUserProfileV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get user profile This endpoint returns a user&#39;s ID, names, profile picture URL and email of the currently logged in user. 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/><<see cref="IGetUserProfileV2ApiResponse"/>></returns>
        public async Task<IGetUserProfileV2ApiResponse?> GetUserProfileV2OrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserProfileV2Async(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get user profile This endpoint returns a user&#39;s ID, names, profile picture URL and email of the currently logged in user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/><<see cref="IGetUserProfileV2ApiResponse"/>></returns>
        public async Task<IGetUserProfileV2ApiResponse> GetUserProfileV2Async(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/oauth2/v2/user_profile"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/oauth2/v2/user_profile");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetUserProfileV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserProfileV2ApiResponse>();
                        GetUserProfileV2ApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetUserProfileV2ApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/oauth2/v2/user_profile", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetUserProfileV2DefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetUserProfileV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserProfileV2DefaultImplementation(e, "/oauth2/v2/user_profile", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetUserProfileV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserProfileV2ApiResponse"/>
        /// </summary>
        public partial class GetUserProfileV2ApiResponse : Kinde.Accounts.Client.ApiResponse, IGetUserProfileV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserProfileV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserProfileV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserProfileV2ApiResponse(ILogger<GetUserProfileV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetUserProfileV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserProfileV2ApiResponse(ILogger<GetUserProfileV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Accounts.Model.UserProfileV2? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Accounts.Model.UserProfileV2>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Accounts.Model.UserProfileV2? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTokenIntrospection(ref string token, ref Option<string> tokenTypeHint);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="token"></param>
        /// <param name="tokenTypeHint"></param>
        /// <returns></returns>
        private void ValidateTokenIntrospection(string token, Option<string> tokenTypeHint)
        {
            if (token == null)
                throw new ArgumentNullException(nameof(token));

            if (tokenTypeHint.IsSet && tokenTypeHint.Value == null)
                throw new ArgumentNullException(nameof(tokenTypeHint));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="token"></param>
        /// <param name="tokenTypeHint"></param>
        private void AfterTokenIntrospectionDefaultImplementation(ITokenIntrospectionApiResponse apiResponseLocalVar, string token, Option<string> tokenTypeHint)
        {
            bool suppressDefaultLog = false;
            AfterTokenIntrospection(ref suppressDefaultLog, apiResponseLocalVar, token, tokenTypeHint);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="token"></param>
        /// <param name="tokenTypeHint"></param>
        partial void AfterTokenIntrospection(ref bool suppressDefaultLog, ITokenIntrospectionApiResponse apiResponseLocalVar, string token, Option<string> tokenTypeHint);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="token"></param>
        /// <param name="tokenTypeHint"></param>
        private void OnErrorTokenIntrospectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string token, Option<string> tokenTypeHint)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTokenIntrospection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, token, tokenTypeHint);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="token"></param>
        /// <param name="tokenTypeHint"></param>
        partial void OnErrorTokenIntrospection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string token, Option<string> tokenTypeHint);

        /// <summary>
        /// Introspect Retrieve information about the provided token.
        /// </summary>
        /// <param name="token">The token to be introspected.</param>
        /// <param name="tokenTypeHint">A hint about the token type being queried in the request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/><<see cref="ITokenIntrospectionApiResponse"/>></returns>
        public async Task<ITokenIntrospectionApiResponse?> TokenIntrospectionOrDefaultAsync(string token, Option<string> tokenTypeHint = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TokenIntrospectionAsync(token, tokenTypeHint, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Introspect Retrieve information about the provided token.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token to be introspected.</param>
        /// <param name="tokenTypeHint">A hint about the token type being queried in the request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/><<see cref="ITokenIntrospectionApiResponse"/>></returns>
        public async Task<ITokenIntrospectionApiResponse> TokenIntrospectionAsync(string token, Option<string> tokenTypeHint = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTokenIntrospection(token, tokenTypeHint);

                FormatTokenIntrospection(ref token, ref tokenTypeHint);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/oauth2/introspect"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/oauth2/introspect");

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("token", ClientUtils.ParameterToString(token)));

                    if (tokenTypeHint.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("token_type_hint", ClientUtils.ParameterToString(tokenTypeHint.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<TokenIntrospectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TokenIntrospectionApiResponse>();
                        TokenIntrospectionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new TokenIntrospectionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/oauth2/introspect", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterTokenIntrospectionDefaultImplementation(apiResponseLocalVar, token, tokenTypeHint);

                        Events.ExecuteOnTokenIntrospection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTokenIntrospectionDefaultImplementation(e, "/oauth2/introspect", uriBuilderLocalVar.Path, token, tokenTypeHint);
                Events.ExecuteOnErrorTokenIntrospection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TokenIntrospectionApiResponse"/>
        /// </summary>
        public partial class TokenIntrospectionApiResponse : Kinde.Accounts.Client.ApiResponse, ITokenIntrospectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TokenIntrospectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TokenIntrospectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TokenIntrospectionApiResponse(ILogger<TokenIntrospectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="TokenIntrospectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TokenIntrospectionApiResponse(ILogger<TokenIntrospectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Accounts.Model.TokenIntrospect? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Accounts.Model.TokenIntrospect>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Accounts.Model.TokenIntrospect? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public Kinde.Accounts.Model.TokenErrorResponse? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Accounts.Model.TokenErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out Kinde.Accounts.Model.TokenErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTokenRevocation(ref string clientId, ref string token, ref Option<string> clientSecret, ref Option<string> tokenTypeHint);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="clientId"></param>
        /// <param name="token"></param>
        /// <param name="clientSecret"></param>
        /// <param name="tokenTypeHint"></param>
        /// <returns></returns>
        private void ValidateTokenRevocation(string clientId, string token, Option<string> clientSecret, Option<string> tokenTypeHint)
        {
            if (clientId == null)
                throw new ArgumentNullException(nameof(clientId));

            if (token == null)
                throw new ArgumentNullException(nameof(token));

            if (clientSecret.IsSet && clientSecret.Value == null)
                throw new ArgumentNullException(nameof(clientSecret));

            if (tokenTypeHint.IsSet && tokenTypeHint.Value == null)
                throw new ArgumentNullException(nameof(tokenTypeHint));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="token"></param>
        /// <param name="clientSecret"></param>
        /// <param name="tokenTypeHint"></param>
        private void AfterTokenRevocationDefaultImplementation(ITokenRevocationApiResponse apiResponseLocalVar, string clientId, string token, Option<string> clientSecret, Option<string> tokenTypeHint)
        {
            bool suppressDefaultLog = false;
            AfterTokenRevocation(ref suppressDefaultLog, apiResponseLocalVar, clientId, token, clientSecret, tokenTypeHint);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="token"></param>
        /// <param name="clientSecret"></param>
        /// <param name="tokenTypeHint"></param>
        partial void AfterTokenRevocation(ref bool suppressDefaultLog, ITokenRevocationApiResponse apiResponseLocalVar, string clientId, string token, Option<string> clientSecret, Option<string> tokenTypeHint);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="token"></param>
        /// <param name="clientSecret"></param>
        /// <param name="tokenTypeHint"></param>
        private void OnErrorTokenRevocationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string clientId, string token, Option<string> clientSecret, Option<string> tokenTypeHint)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTokenRevocation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, clientId, token, clientSecret, tokenTypeHint);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="token"></param>
        /// <param name="clientSecret"></param>
        /// <param name="tokenTypeHint"></param>
        partial void OnErrorTokenRevocation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string clientId, string token, Option<string> clientSecret, Option<string> tokenTypeHint);

        /// <summary>
        /// Revoke token Use this endpoint to invalidate an access or refresh token. The token will no longer be valid for use.
        /// </summary>
        /// <param name="clientId">The &#x60;client_id&#x60; of your application.</param>
        /// <param name="token">The token to be revoked.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; of your application. Required for backend apps only. (optional)</param>
        /// <param name="tokenTypeHint">The type of token to be revoked. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/><<see cref="ITokenRevocationApiResponse"/>></returns>
        public async Task<ITokenRevocationApiResponse?> TokenRevocationOrDefaultAsync(string clientId, string token, Option<string> clientSecret = default, Option<string> tokenTypeHint = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TokenRevocationAsync(clientId, token, clientSecret, tokenTypeHint, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Revoke token Use this endpoint to invalidate an access or refresh token. The token will no longer be valid for use.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">The &#x60;client_id&#x60; of your application.</param>
        /// <param name="token">The token to be revoked.</param>
        /// <param name="clientSecret">The &#x60;client_secret&#x60; of your application. Required for backend apps only. (optional)</param>
        /// <param name="tokenTypeHint">The type of token to be revoked. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/><<see cref="ITokenRevocationApiResponse"/>></returns>
        public async Task<ITokenRevocationApiResponse> TokenRevocationAsync(string clientId, string token, Option<string> clientSecret = default, Option<string> tokenTypeHint = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTokenRevocation(clientId, token, clientSecret, tokenTypeHint);

                FormatTokenRevocation(ref clientId, ref token, ref clientSecret, ref tokenTypeHint);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/oauth2/revoke"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/oauth2/revoke");

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("client_id", ClientUtils.ParameterToString(clientId)));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("token", ClientUtils.ParameterToString(token)));

                    if (clientSecret.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("client_secret", ClientUtils.ParameterToString(clientSecret.Value)));

                    if (tokenTypeHint.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("token_type_hint", ClientUtils.ParameterToString(tokenTypeHint.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<TokenRevocationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TokenRevocationApiResponse>();
                        TokenRevocationApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new TokenRevocationApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/oauth2/revoke", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterTokenRevocationDefaultImplementation(apiResponseLocalVar, clientId, token, clientSecret, tokenTypeHint);

                        Events.ExecuteOnTokenRevocation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTokenRevocationDefaultImplementation(e, "/oauth2/revoke", uriBuilderLocalVar.Path, clientId, token, clientSecret, tokenTypeHint);
                Events.ExecuteOnErrorTokenRevocation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TokenRevocationApiResponse"/>
        /// </summary>
        public partial class TokenRevocationApiResponse : Kinde.Accounts.Client.ApiResponse, ITokenRevocationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TokenRevocationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TokenRevocationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TokenRevocationApiResponse(ILogger<TokenRevocationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="TokenRevocationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TokenRevocationApiResponse(ILogger<TokenRevocationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Accounts.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Accounts.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Accounts.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public Kinde.Accounts.Model.TokenErrorResponse? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Accounts.Model.TokenErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out Kinde.Accounts.Model.TokenErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Accounts.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Accounts.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Accounts.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Accounts.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Accounts.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Accounts.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
