// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// UpdateOrganizationRequest
    /// </summary>
    public partial class UpdateOrganizationRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateOrganizationRequest" /> class.
        /// </summary>
        /// <param name="name">The organization&#39;s name.</param>
        /// <param name="externalId">The organization&#39;s ID.</param>
        /// <param name="backgroundColor">The organization&#39;s brand settings - background color.</param>
        /// <param name="buttonColor">The organization&#39;s brand settings - button color.</param>
        /// <param name="buttonTextColor">The organization&#39;s brand settings - button text color.</param>
        /// <param name="linkColor">The organization&#39;s brand settings - link color.</param>
        /// <param name="backgroundColorDark">The organization&#39;s brand settings - dark mode background color.</param>
        /// <param name="buttonColorDark">The organization&#39;s brand settings - dark mode button color.</param>
        /// <param name="buttonTextColorDark">The organization&#39;s brand settings - dark mode button text color.</param>
        /// <param name="linkColorDark">The organization&#39;s brand settings - dark mode link color.</param>
        /// <param name="themeCode">The organization&#39;s brand settings - theme/mode.</param>
        /// <param name="handle">The organization&#39;s handle.</param>
        /// <param name="isAllowRegistrations">Deprecated - Use &#39;is_auto_membership_enabled&#39; instead.</param>
        /// <param name="isAutoJoinDomainList">Users can sign up to this organization.</param>
        /// <param name="allowedDomains">Domains allowed for self-sign up to this environment.</param>
        /// <param name="isEnableAdvancedOrgs">Activate advanced organization features.</param>
        /// <param name="isEnforceMfa">Enforce MFA for all users in this organization.</param>
        /// <param name="senderName">The name of the organization that will be used in emails</param>
        /// <param name="senderEmail">The email address that will be used in emails. Requires custom SMTP to be set up.</param>
        [JsonConstructor]
        public UpdateOrganizationRequest(Option<string?> name = default, Option<string?> externalId = default, Option<string?> backgroundColor = default, Option<string?> buttonColor = default, Option<string?> buttonTextColor = default, Option<string?> linkColor = default, Option<string?> backgroundColorDark = default, Option<string?> buttonColorDark = default, Option<string?> buttonTextColorDark = default, Option<string?> linkColorDark = default, Option<ThemeCodeEnum?> themeCode = default, Option<string?> handle = default, Option<bool?> isAllowRegistrations = default, Option<bool?> isAutoJoinDomainList = default, Option<List<string>?> allowedDomains = default, Option<bool?> isEnableAdvancedOrgs = default, Option<bool?> isEnforceMfa = default, Option<string?> senderName = default, Option<string?> senderEmail = default)
        {
            NameOption = name;
            ExternalIdOption = externalId;
            BackgroundColorOption = backgroundColor;
            ButtonColorOption = buttonColor;
            ButtonTextColorOption = buttonTextColor;
            LinkColorOption = linkColor;
            BackgroundColorDarkOption = backgroundColorDark;
            ButtonColorDarkOption = buttonColorDark;
            ButtonTextColorDarkOption = buttonTextColorDark;
            LinkColorDarkOption = linkColorDark;
            ThemeCodeOption = themeCode;
            HandleOption = handle;
            IsAllowRegistrationsOption = isAllowRegistrations;
            IsAutoJoinDomainListOption = isAutoJoinDomainList;
            AllowedDomainsOption = allowedDomains;
            IsEnableAdvancedOrgsOption = isEnableAdvancedOrgs;
            IsEnforceMfaOption = isEnforceMfa;
            SenderNameOption = senderName;
            SenderEmailOption = senderEmail;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The organization&#39;s brand settings - theme/mode.
        /// </summary>
        /// <value>The organization&#39;s brand settings - theme/mode.</value>
        public enum ThemeCodeEnum
        {
            /// <summary>
            /// Enum Light for value: light
            /// </summary>
            Light = 1,

            /// <summary>
            /// Enum Dark for value: dark
            /// </summary>
            Dark = 2,

            /// <summary>
            /// Enum UserPreference for value: user_preference
            /// </summary>
            UserPreference = 3
        }

        /// <summary>
        /// Returns a <see cref="ThemeCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ThemeCodeEnum ThemeCodeEnumFromString(string value)
        {
            if (value.Equals("light"))
                return ThemeCodeEnum.Light;

            if (value.Equals("dark"))
                return ThemeCodeEnum.Dark;

            if (value.Equals("user_preference"))
                return ThemeCodeEnum.UserPreference;

            throw new NotImplementedException($"Could not convert value to type ThemeCodeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ThemeCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ThemeCodeEnum? ThemeCodeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("light"))
                return ThemeCodeEnum.Light;

            if (value.Equals("dark"))
                return ThemeCodeEnum.Dark;

            if (value.Equals("user_preference"))
                return ThemeCodeEnum.UserPreference;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ThemeCodeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ThemeCodeEnumToJsonValue(ThemeCodeEnum? value)
        {
            if (value == ThemeCodeEnum.Light)
                return "light";

            if (value == ThemeCodeEnum.Dark)
                return "dark";

            if (value == ThemeCodeEnum.UserPreference)
                return "user_preference";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ThemeCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThemeCodeEnum?> ThemeCodeOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - theme/mode.
        /// </summary>
        /// <value>The organization&#39;s brand settings - theme/mode.</value>
        /* <example>light</example> */
        [JsonPropertyName("theme_code")]
        public ThemeCodeEnum? ThemeCode { get { return this.ThemeCodeOption; } set { this.ThemeCodeOption = new Option<ThemeCodeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The organization&#39;s name.
        /// </summary>
        /// <value>The organization&#39;s name.</value>
        /* <example>Acme Corp</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ExternalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalIdOption { get; private set; }

        /// <summary>
        /// The organization&#39;s ID.
        /// </summary>
        /// <value>The organization&#39;s ID.</value>
        /* <example>some1234</example> */
        [JsonPropertyName("external_id")]
        public string? ExternalId { get { return this.ExternalIdOption; } set { this.ExternalIdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of BackgroundColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BackgroundColorOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - background color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - background color.</value>
        /* <example>#fff</example> */
        [JsonPropertyName("background_color")]
        public string? BackgroundColor { get { return this.BackgroundColorOption; } set { this.BackgroundColorOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ButtonColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ButtonColorOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - button color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - button color.</value>
        /* <example>#fff</example> */
        [JsonPropertyName("button_color")]
        public string? ButtonColor { get { return this.ButtonColorOption; } set { this.ButtonColorOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ButtonTextColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ButtonTextColorOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - button text color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - button text color.</value>
        /* <example>#fff</example> */
        [JsonPropertyName("button_text_color")]
        public string? ButtonTextColor { get { return this.ButtonTextColorOption; } set { this.ButtonTextColorOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of LinkColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LinkColorOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - link color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - link color.</value>
        /* <example>#fff</example> */
        [JsonPropertyName("link_color")]
        public string? LinkColor { get { return this.LinkColorOption; } set { this.LinkColorOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of BackgroundColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BackgroundColorDarkOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode background color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode background color.</value>
        /* <example>#000</example> */
        [JsonPropertyName("background_color_dark")]
        public string? BackgroundColorDark { get { return this.BackgroundColorDarkOption; } set { this.BackgroundColorDarkOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ButtonColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ButtonColorDarkOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode button color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode button color.</value>
        /* <example>#000</example> */
        [JsonPropertyName("button_color_dark")]
        public string? ButtonColorDark { get { return this.ButtonColorDarkOption; } set { this.ButtonColorDarkOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ButtonTextColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ButtonTextColorDarkOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode button text color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode button text color.</value>
        /* <example>#000</example> */
        [JsonPropertyName("button_text_color_dark")]
        public string? ButtonTextColorDark { get { return this.ButtonTextColorDarkOption; } set { this.ButtonTextColorDarkOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of LinkColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LinkColorDarkOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode link color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode link color.</value>
        /* <example>#000</example> */
        [JsonPropertyName("link_color_dark")]
        public string? LinkColorDark { get { return this.LinkColorDarkOption; } set { this.LinkColorDarkOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Handle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HandleOption { get; private set; }

        /// <summary>
        /// The organization&#39;s handle.
        /// </summary>
        /// <value>The organization&#39;s handle.</value>
        /* <example>acme_corp</example> */
        [JsonPropertyName("handle")]
        public string? Handle { get { return this.HandleOption; } set { this.HandleOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsAllowRegistrations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAllowRegistrationsOption { get; private set; }

        /// <summary>
        /// Deprecated - Use &#39;is_auto_membership_enabled&#39; instead.
        /// </summary>
        /// <value>Deprecated - Use &#39;is_auto_membership_enabled&#39; instead.</value>
        [JsonPropertyName("is_allow_registrations")]
        [Obsolete]
        public bool? IsAllowRegistrations { get { return this.IsAllowRegistrationsOption; } set { this.IsAllowRegistrationsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsAutoJoinDomainList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAutoJoinDomainListOption { get; private set; }

        /// <summary>
        /// Users can sign up to this organization.
        /// </summary>
        /// <value>Users can sign up to this organization.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_auto_join_domain_list")]
        public bool? IsAutoJoinDomainList { get { return this.IsAutoJoinDomainListOption; } set { this.IsAutoJoinDomainListOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of AllowedDomains
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AllowedDomainsOption { get; private set; }

        /// <summary>
        /// Domains allowed for self-sign up to this environment.
        /// </summary>
        /// <value>Domains allowed for self-sign up to this environment.</value>
        /* <example>[&quot;https://acme.kinde.com&quot;,&quot;https://acme.com&quot;]</example> */
        [JsonPropertyName("allowed_domains")]
        public List<string>? AllowedDomains { get { return this.AllowedDomainsOption; } set { this.AllowedDomainsOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Used to track the state of IsEnableAdvancedOrgs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsEnableAdvancedOrgsOption { get; private set; }

        /// <summary>
        /// Activate advanced organization features.
        /// </summary>
        /// <value>Activate advanced organization features.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_enable_advanced_orgs")]
        public bool? IsEnableAdvancedOrgs { get { return this.IsEnableAdvancedOrgsOption; } set { this.IsEnableAdvancedOrgsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsEnforceMfa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsEnforceMfaOption { get; private set; }

        /// <summary>
        /// Enforce MFA for all users in this organization.
        /// </summary>
        /// <value>Enforce MFA for all users in this organization.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_enforce_mfa")]
        public bool? IsEnforceMfa { get { return this.IsEnforceMfaOption; } set { this.IsEnforceMfaOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of SenderName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SenderNameOption { get; private set; }

        /// <summary>
        /// The name of the organization that will be used in emails
        /// </summary>
        /// <value>The name of the organization that will be used in emails</value>
        /* <example>Acme Corp</example> */
        [JsonPropertyName("sender_name")]
        public string? SenderName { get { return this.SenderNameOption; } set { this.SenderNameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of SenderEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SenderEmailOption { get; private set; }

        /// <summary>
        /// The email address that will be used in emails. Requires custom SMTP to be set up.
        /// </summary>
        /// <value>The email address that will be used in emails. Requires custom SMTP to be set up.</value>
        /* <example>hello@acmecorp.com</example> */
        [JsonPropertyName("sender_email")]
        public string? SenderEmail { get { return this.SenderEmailOption; } set { this.SenderEmailOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateOrganizationRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  ButtonColor: ").Append(ButtonColor).Append("\n");
            sb.Append("  ButtonTextColor: ").Append(ButtonTextColor).Append("\n");
            sb.Append("  LinkColor: ").Append(LinkColor).Append("\n");
            sb.Append("  BackgroundColorDark: ").Append(BackgroundColorDark).Append("\n");
            sb.Append("  ButtonColorDark: ").Append(ButtonColorDark).Append("\n");
            sb.Append("  ButtonTextColorDark: ").Append(ButtonTextColorDark).Append("\n");
            sb.Append("  LinkColorDark: ").Append(LinkColorDark).Append("\n");
            sb.Append("  ThemeCode: ").Append(ThemeCode).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  IsAllowRegistrations: ").Append(IsAllowRegistrations).Append("\n");
            sb.Append("  IsAutoJoinDomainList: ").Append(IsAutoJoinDomainList).Append("\n");
            sb.Append("  AllowedDomains: ").Append(AllowedDomains).Append("\n");
            sb.Append("  IsEnableAdvancedOrgs: ").Append(IsEnableAdvancedOrgs).Append("\n");
            sb.Append("  IsEnforceMfa: ").Append(IsEnforceMfa).Append("\n");
            sb.Append("  SenderName: ").Append(SenderName).Append("\n");
            sb.Append("  SenderEmail: ").Append(SenderEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateOrganizationRequest" />
    /// </summary>
    public class UpdateOrganizationRequestJsonConverter : JsonConverter<UpdateOrganizationRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateOrganizationRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateOrganizationRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> externalId = default;
            Option<string?> backgroundColor = default;
            Option<string?> buttonColor = default;
            Option<string?> buttonTextColor = default;
            Option<string?> linkColor = default;
            Option<string?> backgroundColorDark = default;
            Option<string?> buttonColorDark = default;
            Option<string?> buttonTextColorDark = default;
            Option<string?> linkColorDark = default;
            Option<UpdateOrganizationRequest.ThemeCodeEnum?> themeCode = default;
            Option<string?> handle = default;
            Option<bool?> isAllowRegistrations = default;
            Option<bool?> isAutoJoinDomainList = default;
            Option<List<string>?> allowedDomains = default;
            Option<bool?> isEnableAdvancedOrgs = default;
            Option<bool?> isEnforceMfa = default;
            Option<string?> senderName = default;
            Option<string?> senderEmail = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "external_id":
                            externalId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "background_color":
                            backgroundColor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "button_color":
                            buttonColor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "button_text_color":
                            buttonTextColor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "link_color":
                            linkColor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "background_color_dark":
                            backgroundColorDark = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "button_color_dark":
                            buttonColorDark = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "button_text_color_dark":
                            buttonTextColorDark = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "link_color_dark":
                            linkColorDark = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "theme_code":
                            string? themeCodeRawValue = utf8JsonReader.GetString();
                            if (themeCodeRawValue != null)
                                themeCode = new Option<UpdateOrganizationRequest.ThemeCodeEnum?>(UpdateOrganizationRequest.ThemeCodeEnumFromStringOrDefault(themeCodeRawValue));
                            break;
                        case "handle":
                            handle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_allow_registrations":
                            isAllowRegistrations = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_auto_join_domain_list":
                            isAutoJoinDomainList = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allowed_domains":
                            allowedDomains = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "is_enable_advanced_orgs":
                            isEnableAdvancedOrgs = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_enforce_mfa":
                            isEnforceMfa = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sender_name":
                            senderName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sender_email":
                            senderEmail = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UpdateOrganizationRequest.");

            if (externalId.IsSet && externalId.Value == null)
                throw new ArgumentNullException(nameof(externalId), "Property is not nullable for class UpdateOrganizationRequest.");

            if (backgroundColor.IsSet && backgroundColor.Value == null)
                throw new ArgumentNullException(nameof(backgroundColor), "Property is not nullable for class UpdateOrganizationRequest.");

            if (buttonColor.IsSet && buttonColor.Value == null)
                throw new ArgumentNullException(nameof(buttonColor), "Property is not nullable for class UpdateOrganizationRequest.");

            if (buttonTextColor.IsSet && buttonTextColor.Value == null)
                throw new ArgumentNullException(nameof(buttonTextColor), "Property is not nullable for class UpdateOrganizationRequest.");

            if (linkColor.IsSet && linkColor.Value == null)
                throw new ArgumentNullException(nameof(linkColor), "Property is not nullable for class UpdateOrganizationRequest.");

            if (backgroundColorDark.IsSet && backgroundColorDark.Value == null)
                throw new ArgumentNullException(nameof(backgroundColorDark), "Property is not nullable for class UpdateOrganizationRequest.");

            if (buttonColorDark.IsSet && buttonColorDark.Value == null)
                throw new ArgumentNullException(nameof(buttonColorDark), "Property is not nullable for class UpdateOrganizationRequest.");

            if (buttonTextColorDark.IsSet && buttonTextColorDark.Value == null)
                throw new ArgumentNullException(nameof(buttonTextColorDark), "Property is not nullable for class UpdateOrganizationRequest.");

            if (linkColorDark.IsSet && linkColorDark.Value == null)
                throw new ArgumentNullException(nameof(linkColorDark), "Property is not nullable for class UpdateOrganizationRequest.");

            if (themeCode.IsSet && themeCode.Value == null)
                throw new ArgumentNullException(nameof(themeCode), "Property is not nullable for class UpdateOrganizationRequest.");

            if (handle.IsSet && handle.Value == null)
                throw new ArgumentNullException(nameof(handle), "Property is not nullable for class UpdateOrganizationRequest.");

            if (isAllowRegistrations.IsSet && isAllowRegistrations.Value == null)
                throw new ArgumentNullException(nameof(isAllowRegistrations), "Property is not nullable for class UpdateOrganizationRequest.");

            if (isAutoJoinDomainList.IsSet && isAutoJoinDomainList.Value == null)
                throw new ArgumentNullException(nameof(isAutoJoinDomainList), "Property is not nullable for class UpdateOrganizationRequest.");

            if (allowedDomains.IsSet && allowedDomains.Value == null)
                throw new ArgumentNullException(nameof(allowedDomains), "Property is not nullable for class UpdateOrganizationRequest.");

            if (isEnableAdvancedOrgs.IsSet && isEnableAdvancedOrgs.Value == null)
                throw new ArgumentNullException(nameof(isEnableAdvancedOrgs), "Property is not nullable for class UpdateOrganizationRequest.");

            if (isEnforceMfa.IsSet && isEnforceMfa.Value == null)
                throw new ArgumentNullException(nameof(isEnforceMfa), "Property is not nullable for class UpdateOrganizationRequest.");

            return new UpdateOrganizationRequest(name, externalId, backgroundColor, buttonColor, buttonTextColor, linkColor, backgroundColorDark, buttonColorDark, buttonTextColorDark, linkColorDark, themeCode, handle, isAllowRegistrations, isAutoJoinDomainList, allowedDomains, isEnableAdvancedOrgs, isEnforceMfa, senderName, senderEmail);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateOrganizationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateOrganizationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateOrganizationRequest updateOrganizationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateOrganizationRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateOrganizationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateOrganizationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateOrganizationRequest updateOrganizationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateOrganizationRequest.NameOption.IsSet && updateOrganizationRequest.Name == null)
                throw new ArgumentNullException(nameof(updateOrganizationRequest.Name), "Property is required for class UpdateOrganizationRequest.");

            if (updateOrganizationRequest.ExternalIdOption.IsSet && updateOrganizationRequest.ExternalId == null)
                throw new ArgumentNullException(nameof(updateOrganizationRequest.ExternalId), "Property is required for class UpdateOrganizationRequest.");

            if (updateOrganizationRequest.BackgroundColorOption.IsSet && updateOrganizationRequest.BackgroundColor == null)
                throw new ArgumentNullException(nameof(updateOrganizationRequest.BackgroundColor), "Property is required for class UpdateOrganizationRequest.");

            if (updateOrganizationRequest.ButtonColorOption.IsSet && updateOrganizationRequest.ButtonColor == null)
                throw new ArgumentNullException(nameof(updateOrganizationRequest.ButtonColor), "Property is required for class UpdateOrganizationRequest.");

            if (updateOrganizationRequest.ButtonTextColorOption.IsSet && updateOrganizationRequest.ButtonTextColor == null)
                throw new ArgumentNullException(nameof(updateOrganizationRequest.ButtonTextColor), "Property is required for class UpdateOrganizationRequest.");

            if (updateOrganizationRequest.LinkColorOption.IsSet && updateOrganizationRequest.LinkColor == null)
                throw new ArgumentNullException(nameof(updateOrganizationRequest.LinkColor), "Property is required for class UpdateOrganizationRequest.");

            if (updateOrganizationRequest.BackgroundColorDarkOption.IsSet && updateOrganizationRequest.BackgroundColorDark == null)
                throw new ArgumentNullException(nameof(updateOrganizationRequest.BackgroundColorDark), "Property is required for class UpdateOrganizationRequest.");

            if (updateOrganizationRequest.ButtonColorDarkOption.IsSet && updateOrganizationRequest.ButtonColorDark == null)
                throw new ArgumentNullException(nameof(updateOrganizationRequest.ButtonColorDark), "Property is required for class UpdateOrganizationRequest.");

            if (updateOrganizationRequest.ButtonTextColorDarkOption.IsSet && updateOrganizationRequest.ButtonTextColorDark == null)
                throw new ArgumentNullException(nameof(updateOrganizationRequest.ButtonTextColorDark), "Property is required for class UpdateOrganizationRequest.");

            if (updateOrganizationRequest.LinkColorDarkOption.IsSet && updateOrganizationRequest.LinkColorDark == null)
                throw new ArgumentNullException(nameof(updateOrganizationRequest.LinkColorDark), "Property is required for class UpdateOrganizationRequest.");

            if (updateOrganizationRequest.HandleOption.IsSet && updateOrganizationRequest.Handle == null)
                throw new ArgumentNullException(nameof(updateOrganizationRequest.Handle), "Property is required for class UpdateOrganizationRequest.");

            if (updateOrganizationRequest.AllowedDomainsOption.IsSet && updateOrganizationRequest.AllowedDomains == null)
                throw new ArgumentNullException(nameof(updateOrganizationRequest.AllowedDomains), "Property is required for class UpdateOrganizationRequest.");

            if (updateOrganizationRequest.NameOption.IsSet)
                writer.WriteString("name", updateOrganizationRequest.Name);

            if (updateOrganizationRequest.ExternalIdOption.IsSet)
                writer.WriteString("external_id", updateOrganizationRequest.ExternalId);

            if (updateOrganizationRequest.BackgroundColorOption.IsSet)
                writer.WriteString("background_color", updateOrganizationRequest.BackgroundColor);

            if (updateOrganizationRequest.ButtonColorOption.IsSet)
                writer.WriteString("button_color", updateOrganizationRequest.ButtonColor);

            if (updateOrganizationRequest.ButtonTextColorOption.IsSet)
                writer.WriteString("button_text_color", updateOrganizationRequest.ButtonTextColor);

            if (updateOrganizationRequest.LinkColorOption.IsSet)
                writer.WriteString("link_color", updateOrganizationRequest.LinkColor);

            if (updateOrganizationRequest.BackgroundColorDarkOption.IsSet)
                writer.WriteString("background_color_dark", updateOrganizationRequest.BackgroundColorDark);

            if (updateOrganizationRequest.ButtonColorDarkOption.IsSet)
                writer.WriteString("button_color_dark", updateOrganizationRequest.ButtonColorDark);

            if (updateOrganizationRequest.ButtonTextColorDarkOption.IsSet)
                writer.WriteString("button_text_color_dark", updateOrganizationRequest.ButtonTextColorDark);

            if (updateOrganizationRequest.LinkColorDarkOption.IsSet)
                writer.WriteString("link_color_dark", updateOrganizationRequest.LinkColorDark);

            var themeCodeRawValue = UpdateOrganizationRequest.ThemeCodeEnumToJsonValue(updateOrganizationRequest.ThemeCodeOption.Value!.Value);
            writer.WriteString("theme_code", themeCodeRawValue);
            if (updateOrganizationRequest.HandleOption.IsSet)
                writer.WriteString("handle", updateOrganizationRequest.Handle);

            if (updateOrganizationRequest.IsAllowRegistrationsOption.IsSet)
                writer.WriteBoolean("is_allow_registrations", updateOrganizationRequest.IsAllowRegistrationsOption.Value!.Value);

            if (updateOrganizationRequest.IsAutoJoinDomainListOption.IsSet)
                writer.WriteBoolean("is_auto_join_domain_list", updateOrganizationRequest.IsAutoJoinDomainListOption.Value!.Value);

            if (updateOrganizationRequest.AllowedDomainsOption.IsSet)
            {
                writer.WritePropertyName("allowed_domains");
                JsonSerializer.Serialize(writer, updateOrganizationRequest.AllowedDomains, jsonSerializerOptions);
            }
            if (updateOrganizationRequest.IsEnableAdvancedOrgsOption.IsSet)
                writer.WriteBoolean("is_enable_advanced_orgs", updateOrganizationRequest.IsEnableAdvancedOrgsOption.Value!.Value);

            if (updateOrganizationRequest.IsEnforceMfaOption.IsSet)
                writer.WriteBoolean("is_enforce_mfa", updateOrganizationRequest.IsEnforceMfaOption.Value!.Value);

            if (updateOrganizationRequest.SenderNameOption.IsSet)
                if (updateOrganizationRequest.SenderNameOption.Value != null)
                    writer.WriteString("sender_name", updateOrganizationRequest.SenderName);
                else
                    writer.WriteNull("sender_name");

            if (updateOrganizationRequest.SenderEmailOption.IsSet)
                if (updateOrganizationRequest.SenderEmailOption.Value != null)
                    writer.WriteString("sender_email", updateOrganizationRequest.SenderEmail);
                else
                    writer.WriteNull("sender_email");
        }
    }
}
