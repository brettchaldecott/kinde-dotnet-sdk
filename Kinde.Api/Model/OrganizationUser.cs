// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// OrganizationUser
    /// </summary>
    public partial class OrganizationUser
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationUser" /> class.
        /// </summary>
        /// <param name="id">The unique ID for the user.</param>
        /// <param name="email">The user&#39;s email address.</param>
        /// <param name="fullName">The user&#39;s full name.</param>
        /// <param name="lastName">The user&#39;s last name.</param>
        /// <param name="firstName">The user&#39;s first name.</param>
        /// <param name="picture">The user&#39;s profile picture URL.</param>
        /// <param name="joinedOn">The date the user joined the organization.</param>
        /// <param name="lastAccessedOn">The date the user last accessed the organization.</param>
        /// <param name="roles">The roles the user has in the organization.</param>
        [JsonConstructor]
        public OrganizationUser(Option<string?> id = default, Option<string?> email = default, Option<string?> fullName = default, Option<string?> lastName = default, Option<string?> firstName = default, Option<string?> picture = default, Option<string?> joinedOn = default, Option<string?> lastAccessedOn = default, Option<List<string>?> roles = default)
        {
            IdOption = id;
            EmailOption = email;
            FullNameOption = fullName;
            LastNameOption = lastName;
            FirstNameOption = firstName;
            PictureOption = picture;
            JoinedOnOption = joinedOn;
            LastAccessedOnOption = lastAccessedOn;
            RolesOption = roles;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The unique ID for the user.
        /// </summary>
        /// <value>The unique ID for the user.</value>
        /* <example>kp:97c2ba24217d48e3b96a799b76cf2c74</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// The user&#39;s email address.
        /// </summary>
        /// <value>The user&#39;s email address.</value>
        /* <example>john.snow@example.com</example> */
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FullNameOption { get; private set; }

        /// <summary>
        /// The user&#39;s full name.
        /// </summary>
        /// <value>The user&#39;s full name.</value>
        /* <example>John Snow</example> */
        [JsonPropertyName("full_name")]
        public string? FullName { get { return this.FullNameOption; } set { this.FullNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastNameOption { get; private set; }

        /// <summary>
        /// The user&#39;s last name.
        /// </summary>
        /// <value>The user&#39;s last name.</value>
        /* <example>Snow</example> */
        [JsonPropertyName("last_name")]
        public string? LastName { get { return this.LastNameOption; } set { this.LastNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstNameOption { get; private set; }

        /// <summary>
        /// The user&#39;s first name.
        /// </summary>
        /// <value>The user&#39;s first name.</value>
        /* <example>John</example> */
        [JsonPropertyName("first_name")]
        public string? FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Picture
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PictureOption { get; private set; }

        /// <summary>
        /// The user&#39;s profile picture URL.
        /// </summary>
        /// <value>The user&#39;s profile picture URL.</value>
        /* <example>https://example.com/john_snow.jpg</example> */
        [JsonPropertyName("picture")]
        public string? Picture { get { return this.PictureOption; } set { this.PictureOption = new(value); } }

        /// <summary>
        /// Used to track the state of JoinedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> JoinedOnOption { get; private set; }

        /// <summary>
        /// The date the user joined the organization.
        /// </summary>
        /// <value>The date the user joined the organization.</value>
        /* <example>2021-01-01T00:00:00Z</example> */
        [JsonPropertyName("joined_on")]
        public string? JoinedOn { get { return this.JoinedOnOption; } set { this.JoinedOnOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastAccessedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastAccessedOnOption { get; private set; }

        /// <summary>
        /// The date the user last accessed the organization.
        /// </summary>
        /// <value>The date the user last accessed the organization.</value>
        /* <example>2022-01-01T00:00:00Z</example> */
        [JsonPropertyName("last_accessed_on")]
        public string? LastAccessedOn { get { return this.LastAccessedOnOption; } set { this.LastAccessedOnOption = new(value); } }

        /// <summary>
        /// Used to track the state of Roles
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> RolesOption { get; private set; }

        /// <summary>
        /// The roles the user has in the organization.
        /// </summary>
        /// <value>The roles the user has in the organization.</value>
        [JsonPropertyName("roles")]
        public List<string>? Roles { get { return this.RolesOption; } set { this.RolesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationUser {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("  JoinedOn: ").Append(JoinedOn).Append("\n");
            sb.Append("  LastAccessedOn: ").Append(LastAccessedOn).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OrganizationUser" />
    /// </summary>
    public class OrganizationUserJsonConverter : JsonConverter<OrganizationUser>
    {
        /// <summary>
        /// Deserializes json to <see cref="OrganizationUser" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OrganizationUser Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> email = default;
            Option<string?> fullName = default;
            Option<string?> lastName = default;
            Option<string?> firstName = default;
            Option<string?> picture = default;
            Option<string?> joinedOn = default;
            Option<string?> lastAccessedOn = default;
            Option<List<string>?> roles = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "full_name":
                            fullName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_name":
                            lastName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "first_name":
                            firstName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "picture":
                            picture = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "joined_on":
                            joinedOn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_accessed_on":
                            lastAccessedOn = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "roles":
                            roles = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (fullName.IsSet && fullName.Value == null)
                throw new ArgumentNullException(nameof(fullName), "Property is not nullable for class OrganizationUser.");

            if (joinedOn.IsSet && joinedOn.Value == null)
                throw new ArgumentNullException(nameof(joinedOn), "Property is not nullable for class OrganizationUser.");

            if (roles.IsSet && roles.Value == null)
                throw new ArgumentNullException(nameof(roles), "Property is not nullable for class OrganizationUser.");

            return new OrganizationUser(id, email, fullName, lastName, firstName, picture, joinedOn, lastAccessedOn, roles);
        }

        /// <summary>
        /// Serializes a <see cref="OrganizationUser" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationUser"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OrganizationUser organizationUser, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, organizationUser, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OrganizationUser" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationUser"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OrganizationUser organizationUser, JsonSerializerOptions jsonSerializerOptions)
        {
            if (organizationUser.FullNameOption.IsSet && organizationUser.FullName == null)
                throw new ArgumentNullException(nameof(organizationUser.FullName), "Property is required for class OrganizationUser.");

            if (organizationUser.JoinedOnOption.IsSet && organizationUser.JoinedOn == null)
                throw new ArgumentNullException(nameof(organizationUser.JoinedOn), "Property is required for class OrganizationUser.");

            if (organizationUser.RolesOption.IsSet && organizationUser.Roles == null)
                throw new ArgumentNullException(nameof(organizationUser.Roles), "Property is required for class OrganizationUser.");

            if (organizationUser.IdOption.IsSet)
                if (organizationUser.IdOption.Value != null)
                    writer.WriteString("id", organizationUser.Id);
                else
                    writer.WriteNull("id");

            if (organizationUser.EmailOption.IsSet)
                if (organizationUser.EmailOption.Value != null)
                    writer.WriteString("email", organizationUser.Email);
                else
                    writer.WriteNull("email");

            if (organizationUser.FullNameOption.IsSet)
                writer.WriteString("full_name", organizationUser.FullName);

            if (organizationUser.LastNameOption.IsSet)
                if (organizationUser.LastNameOption.Value != null)
                    writer.WriteString("last_name", organizationUser.LastName);
                else
                    writer.WriteNull("last_name");

            if (organizationUser.FirstNameOption.IsSet)
                if (organizationUser.FirstNameOption.Value != null)
                    writer.WriteString("first_name", organizationUser.FirstName);
                else
                    writer.WriteNull("first_name");

            if (organizationUser.PictureOption.IsSet)
                if (organizationUser.PictureOption.Value != null)
                    writer.WriteString("picture", organizationUser.Picture);
                else
                    writer.WriteNull("picture");

            if (organizationUser.JoinedOnOption.IsSet)
                writer.WriteString("joined_on", organizationUser.JoinedOn);

            if (organizationUser.LastAccessedOnOption.IsSet)
                if (organizationUser.LastAccessedOnOption.Value != null)
                    writer.WriteString("last_accessed_on", organizationUser.LastAccessedOn);
                else
                    writer.WriteNull("last_accessed_on");

            if (organizationUser.RolesOption.IsSet)
            {
                writer.WritePropertyName("roles");
                JsonSerializer.Serialize(writer, organizationUser.Roles, jsonSerializerOptions);
            }
        }
    }
}
