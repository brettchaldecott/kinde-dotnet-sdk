// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    public partial class ReplaceConnectionRequestOptions
    {
        /// <summary>
        /// </summary>
        public ReplaceConnectionRequestOptions(CreateConnectionRequestOptionsOneOf createConnectionRequestOptionsOneOf)
        {
            CreateConnectionRequestOptionsOneOf = createConnectionRequestOptionsOneOf;
            OnCreated();
        }

        /// <summary>
        /// </summary>
        public ReplaceConnectionRequestOptions(ReplaceConnectionRequestOptionsOneOf replaceConnectionRequestOptionsOneOf)
        {
            ReplaceConnectionRequestOptionsOneOf = replaceConnectionRequestOptionsOneOf;
            OnCreated();
        }

        /// <summary>
        /// </summary>
        public ReplaceConnectionRequestOptions(ReplaceConnectionRequestOptionsOneOf1 replaceConnectionRequestOptionsOneOf1)
        {
            ReplaceConnectionRequestOptionsOneOf1 = replaceConnectionRequestOptionsOneOf1;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// </summary>
        public CreateConnectionRequestOptionsOneOf? CreateConnectionRequestOptionsOneOf { get; set; }

        /// <summary>
        /// </summary>
        public ReplaceConnectionRequestOptionsOneOf? ReplaceConnectionRequestOptionsOneOf { get; set; }

        /// <summary>
        /// </summary>
        public ReplaceConnectionRequestOptionsOneOf1? ReplaceConnectionRequestOptionsOneOf1 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReplaceConnectionRequestOptions {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class ReplaceConnectionRequestOptionsJsonConverter : JsonConverter<ReplaceConnectionRequestOptions>
    {
        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReplaceConnectionRequestOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            CreateConnectionRequestOptionsOneOf? createConnectionRequestOptionsOneOf = default;
            ReplaceConnectionRequestOptionsOneOf? replaceConnectionRequestOptionsOneOf = default;
            ReplaceConnectionRequestOptionsOneOf1? replaceConnectionRequestOptionsOneOf1 = default;

            Utf8JsonReader utf8JsonReaderOneOf = utf8JsonReader;
            while (utf8JsonReaderOneOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (utf8JsonReaderOneOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderOneOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderCreateConnectionRequestOptionsOneOf = utf8JsonReader;
                    ClientUtils.TryDeserialize<CreateConnectionRequestOptionsOneOf?>(ref utf8JsonReaderCreateConnectionRequestOptionsOneOf, jsonSerializerOptions, out createConnectionRequestOptionsOneOf);

                    Utf8JsonReader utf8JsonReaderReplaceConnectionRequestOptionsOneOf = utf8JsonReader;
                    ClientUtils.TryDeserialize<ReplaceConnectionRequestOptionsOneOf?>(ref utf8JsonReaderReplaceConnectionRequestOptionsOneOf, jsonSerializerOptions, out replaceConnectionRequestOptionsOneOf);

                    Utf8JsonReader utf8JsonReaderReplaceConnectionRequestOptionsOneOf1 = utf8JsonReader;
                    ClientUtils.TryDeserialize<ReplaceConnectionRequestOptionsOneOf1?>(ref utf8JsonReaderReplaceConnectionRequestOptionsOneOf1, jsonSerializerOptions, out replaceConnectionRequestOptionsOneOf1);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            if (createConnectionRequestOptionsOneOf != null)
                return new ReplaceConnectionRequestOptions(createConnectionRequestOptionsOneOf);

            if (replaceConnectionRequestOptionsOneOf != null)
                return new ReplaceConnectionRequestOptions(replaceConnectionRequestOptionsOneOf);

            if (replaceConnectionRequestOptionsOneOf1 != null)
                return new ReplaceConnectionRequestOptions(replaceConnectionRequestOptionsOneOf1);

            throw new JsonException();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, ReplaceConnectionRequestOptions replaceConnectionRequestOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, replaceConnectionRequestOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, ReplaceConnectionRequestOptions replaceConnectionRequestOptions, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
