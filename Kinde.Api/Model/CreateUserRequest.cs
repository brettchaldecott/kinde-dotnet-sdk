// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    public partial class CreateUserRequest
    {
        /// <summary>
        /// </summary>
        /// <param name="profile">profile</param>
        /// <param name="providedId">An external id to reference the user.</param>
        /// <param name="identities">Array of identities to assign to the created user</param>
        [JsonConstructor]
        public CreateUserRequest(Option<CreateUserRequestProfile?> profile = default, Option<string?> organizationCode = default, Option<string?> providedId = default, Option<List<CreateUserRequestIdentitiesInner>?> identities = default)
        {
            ProfileOption = profile;
            OrganizationCodeOption = organizationCode;
            ProvidedIdOption = providedId;
            IdentitiesOption = identities;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Profile
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateUserRequestProfile?> ProfileOption { get; private set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [JsonPropertyName("profile")]
        public CreateUserRequestProfile? Profile { get { return this.ProfileOption; } set { this.ProfileOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganizationCodeOption { get; private set; }

        /// <summary>
        /// The unique code associated with the organization you want the user to join.
        /// </summary>
        /// <value>The unique code associated with the organization you want the user to join.</value>
        [JsonPropertyName("organization_code")]
        public string? OrganizationCode { get { return this.OrganizationCodeOption; } set { this.OrganizationCodeOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProvidedIdOption { get; private set; }

        /// <summary>
        /// An external id to reference the user.
        /// </summary>
        /// <value>An external id to reference the user.</value>
        [JsonPropertyName("provided_id")]
        public string? ProvidedId { get { return this.ProvidedIdOption; } set { this.ProvidedIdOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CreateUserRequestIdentitiesInner>?> IdentitiesOption { get; private set; }

        /// <summary>
        /// Array of identities to assign to the created user
        /// </summary>
        /// <value>Array of identities to assign to the created user</value>
        /* <example>[{&quot;type&quot;:&quot;email&quot;,&quot;is_verified&quot;:true,&quot;details&quot;:{&quot;email&quot;:&quot;email@email.com&quot;}},{&quot;type&quot;:&quot;phone&quot;,&quot;is_verified&quot;:false,&quot;details&quot;:{&quot;phone&quot;:&quot;+61426148233&quot;,&quot;phone_country_id&quot;:&quot;au&quot;}},{&quot;type&quot;:&quot;username&quot;,&quot;details&quot;:{&quot;username&quot;:&quot;myusername&quot;}}]</example> */
        [JsonPropertyName("identities")]
        public List<CreateUserRequestIdentitiesInner>? Identities { get { return this.IdentitiesOption; } set { this.IdentitiesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateUserRequest {\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  OrganizationCode: ").Append(OrganizationCode).Append("\n");
            sb.Append("  ProvidedId: ").Append(ProvidedId).Append("\n");
            sb.Append("  Identities: ").Append(Identities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class CreateUserRequestJsonConverter : JsonConverter<CreateUserRequest>
    {
        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateUserRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreateUserRequestProfile?> profile = default;
            Option<string?> organizationCode = default;
            Option<string?> providedId = default;
            Option<List<CreateUserRequestIdentitiesInner>?> identities = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "profile":
                            profile = new Option<CreateUserRequestProfile?>(JsonSerializer.Deserialize<CreateUserRequestProfile>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "organization_code":
                            organizationCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "provided_id":
                            providedId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "identities":
                            identities = new Option<List<CreateUserRequestIdentitiesInner>?>(JsonSerializer.Deserialize<List<CreateUserRequestIdentitiesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (profile.IsSet && profile.Value == null)
                throw new ArgumentNullException(nameof(profile), "Property is not nullable for class CreateUserRequest.");

            if (organizationCode.IsSet && organizationCode.Value == null)
                throw new ArgumentNullException(nameof(organizationCode), "Property is not nullable for class CreateUserRequest.");

            if (providedId.IsSet && providedId.Value == null)
                throw new ArgumentNullException(nameof(providedId), "Property is not nullable for class CreateUserRequest.");

            if (identities.IsSet && identities.Value == null)
                throw new ArgumentNullException(nameof(identities), "Property is not nullable for class CreateUserRequest.");

            return new CreateUserRequest(profile, organizationCode, providedId, identities);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, CreateUserRequest createUserRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createUserRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, CreateUserRequest createUserRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createUserRequest.ProfileOption.IsSet && createUserRequest.Profile == null)
                throw new ArgumentNullException(nameof(createUserRequest.Profile), "Property is required for class CreateUserRequest.");

            if (createUserRequest.OrganizationCodeOption.IsSet && createUserRequest.OrganizationCode == null)
                throw new ArgumentNullException(nameof(createUserRequest.OrganizationCode), "Property is required for class CreateUserRequest.");

            if (createUserRequest.ProvidedIdOption.IsSet && createUserRequest.ProvidedId == null)
                throw new ArgumentNullException(nameof(createUserRequest.ProvidedId), "Property is required for class CreateUserRequest.");

            if (createUserRequest.IdentitiesOption.IsSet && createUserRequest.Identities == null)
                throw new ArgumentNullException(nameof(createUserRequest.Identities), "Property is required for class CreateUserRequest.");

            if (createUserRequest.ProfileOption.IsSet)
            {
                writer.WritePropertyName("profile");
                JsonSerializer.Serialize(writer, createUserRequest.Profile, jsonSerializerOptions);
            }
            if (createUserRequest.OrganizationCodeOption.IsSet)
                writer.WriteString("organization_code", createUserRequest.OrganizationCode);

            if (createUserRequest.ProvidedIdOption.IsSet)
                writer.WriteString("provided_id", createUserRequest.ProvidedId);

            if (createUserRequest.IdentitiesOption.IsSet)
            {
                writer.WritePropertyName("identities");
                JsonSerializer.Serialize(writer, createUserRequest.Identities, jsonSerializerOptions);
            }
        }
    }
}
