// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// UpdateBusinessRequest
    /// </summary>
    public partial class UpdateBusinessRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateBusinessRequest" /> class.
        /// </summary>
        /// <param name="businessName">The name of the business.</param>
        /// <param name="email">The email address of the business.</param>
        /// <param name="industryKey">The key of the industry of your business. Can be retrieved from the /industries endpoint.</param>
        /// <param name="isClickWrap">Whether the business is using clickwrap agreements.</param>
        /// <param name="isShowKindeBranding">Whether the business is showing Kinde branding. Requires a paid plan.</param>
        /// <param name="kindePerkCode">The Kinde perk code for the business.</param>
        /// <param name="phone">The phone number of the business.</param>
        /// <param name="privacyUrl">The URL to the business&#39;s privacy policy.</param>
        /// <param name="termsUrl">The URL to the business&#39;s terms of service.</param>
        /// <param name="timezoneKey">The key of the timezone of your business. Can be retrieved from the /timezones endpoint.</param>
        [JsonConstructor]
        public UpdateBusinessRequest(Option<string?> businessName = default, Option<string?> email = default, Option<string?> industryKey = default, Option<bool?> isClickWrap = default, Option<bool?> isShowKindeBranding = default, Option<string?> kindePerkCode = default, Option<string?> phone = default, Option<string?> privacyUrl = default, Option<string?> termsUrl = default, Option<string?> timezoneKey = default)
        {
            BusinessNameOption = businessName;
            EmailOption = email;
            IndustryKeyOption = industryKey;
            IsClickWrapOption = isClickWrap;
            IsShowKindeBrandingOption = isShowKindeBranding;
            KindePerkCodeOption = kindePerkCode;
            PhoneOption = phone;
            PrivacyUrlOption = privacyUrl;
            TermsUrlOption = termsUrl;
            TimezoneKeyOption = timezoneKey;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BusinessName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BusinessNameOption { get; private set; }

        /// <summary>
        /// The name of the business.
        /// </summary>
        /// <value>The name of the business.</value>
        /* <example>Tailsforce Ltd</example> */
        [JsonPropertyName("business_name")]
        public string? BusinessName { get { return this.BusinessNameOption; } set { this.BusinessNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// The email address of the business.
        /// </summary>
        /// <value>The email address of the business.</value>
        /* <example>sally@example.com</example> */
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of IndustryKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IndustryKeyOption { get; private set; }

        /// <summary>
        /// The key of the industry of your business. Can be retrieved from the /industries endpoint.
        /// </summary>
        /// <value>The key of the industry of your business. Can be retrieved from the /industries endpoint.</value>
        /* <example>construction</example> */
        [JsonPropertyName("industry_key")]
        public string? IndustryKey { get { return this.IndustryKeyOption; } set { this.IndustryKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsClickWrap
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsClickWrapOption { get; private set; }

        /// <summary>
        /// Whether the business is using clickwrap agreements.
        /// </summary>
        /// <value>Whether the business is using clickwrap agreements.</value>
        /* <example>false</example> */
        [JsonPropertyName("is_click_wrap")]
        public bool? IsClickWrap { get { return this.IsClickWrapOption; } set { this.IsClickWrapOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsShowKindeBranding
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsShowKindeBrandingOption { get; private set; }

        /// <summary>
        /// Whether the business is showing Kinde branding. Requires a paid plan.
        /// </summary>
        /// <value>Whether the business is showing Kinde branding. Requires a paid plan.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_show_kinde_branding")]
        public bool? IsShowKindeBranding { get { return this.IsShowKindeBrandingOption; } set { this.IsShowKindeBrandingOption = new(value); } }

        /// <summary>
        /// Used to track the state of KindePerkCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KindePerkCodeOption { get; private set; }

        /// <summary>
        /// The Kinde perk code for the business.
        /// </summary>
        /// <value>The Kinde perk code for the business.</value>
        [JsonPropertyName("kinde_perk_code")]
        public string? KindePerkCode { get { return this.KindePerkCodeOption; } set { this.KindePerkCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneOption { get; private set; }

        /// <summary>
        /// The phone number of the business.
        /// </summary>
        /// <value>The phone number of the business.</value>
        /* <example>123-456-7890</example> */
        [JsonPropertyName("phone")]
        public string? Phone { get { return this.PhoneOption; } set { this.PhoneOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrivacyUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrivacyUrlOption { get; private set; }

        /// <summary>
        /// The URL to the business&#39;s privacy policy.
        /// </summary>
        /// <value>The URL to the business&#39;s privacy policy.</value>
        /* <example>https://example.com/privacy</example> */
        [JsonPropertyName("privacy_url")]
        public string? PrivacyUrl { get { return this.PrivacyUrlOption; } set { this.PrivacyUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of TermsUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TermsUrlOption { get; private set; }

        /// <summary>
        /// The URL to the business&#39;s terms of service.
        /// </summary>
        /// <value>The URL to the business&#39;s terms of service.</value>
        /* <example>https://example.com/terms</example> */
        [JsonPropertyName("terms_url")]
        public string? TermsUrl { get { return this.TermsUrlOption; } set { this.TermsUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimezoneKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TimezoneKeyOption { get; private set; }

        /// <summary>
        /// The key of the timezone of your business. Can be retrieved from the /timezones endpoint.
        /// </summary>
        /// <value>The key of the timezone of your business. Can be retrieved from the /timezones endpoint.</value>
        /* <example>los_angeles_pacific_standard_time</example> */
        [JsonPropertyName("timezone_key")]
        public string? TimezoneKey { get { return this.TimezoneKeyOption; } set { this.TimezoneKeyOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateBusinessRequest {\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IndustryKey: ").Append(IndustryKey).Append("\n");
            sb.Append("  IsClickWrap: ").Append(IsClickWrap).Append("\n");
            sb.Append("  IsShowKindeBranding: ").Append(IsShowKindeBranding).Append("\n");
            sb.Append("  KindePerkCode: ").Append(KindePerkCode).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PrivacyUrl: ").Append(PrivacyUrl).Append("\n");
            sb.Append("  TermsUrl: ").Append(TermsUrl).Append("\n");
            sb.Append("  TimezoneKey: ").Append(TimezoneKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateBusinessRequest" />
    /// </summary>
    public class UpdateBusinessRequestJsonConverter : JsonConverter<UpdateBusinessRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateBusinessRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateBusinessRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> businessName = default;
            Option<string?> email = default;
            Option<string?> industryKey = default;
            Option<bool?> isClickWrap = default;
            Option<bool?> isShowKindeBranding = default;
            Option<string?> kindePerkCode = default;
            Option<string?> phone = default;
            Option<string?> privacyUrl = default;
            Option<string?> termsUrl = default;
            Option<string?> timezoneKey = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "business_name":
                            businessName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "industry_key":
                            industryKey = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_click_wrap":
                            isClickWrap = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_show_kinde_branding":
                            isShowKindeBranding = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "kinde_perk_code":
                            kindePerkCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "phone":
                            phone = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "privacy_url":
                            privacyUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "terms_url":
                            termsUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "timezone_key":
                            timezoneKey = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new UpdateBusinessRequest(businessName, email, industryKey, isClickWrap, isShowKindeBranding, kindePerkCode, phone, privacyUrl, termsUrl, timezoneKey);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateBusinessRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateBusinessRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateBusinessRequest updateBusinessRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateBusinessRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateBusinessRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateBusinessRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateBusinessRequest updateBusinessRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateBusinessRequest.BusinessNameOption.IsSet)
                if (updateBusinessRequest.BusinessNameOption.Value != null)
                    writer.WriteString("business_name", updateBusinessRequest.BusinessName);
                else
                    writer.WriteNull("business_name");

            if (updateBusinessRequest.EmailOption.IsSet)
                if (updateBusinessRequest.EmailOption.Value != null)
                    writer.WriteString("email", updateBusinessRequest.Email);
                else
                    writer.WriteNull("email");

            if (updateBusinessRequest.IndustryKeyOption.IsSet)
                if (updateBusinessRequest.IndustryKeyOption.Value != null)
                    writer.WriteString("industry_key", updateBusinessRequest.IndustryKey);
                else
                    writer.WriteNull("industry_key");

            if (updateBusinessRequest.IsClickWrapOption.IsSet)
                if (updateBusinessRequest.IsClickWrapOption.Value != null)
                    writer.WriteBoolean("is_click_wrap", updateBusinessRequest.IsClickWrapOption.Value!.Value);
                else
                    writer.WriteNull("is_click_wrap");

            if (updateBusinessRequest.IsShowKindeBrandingOption.IsSet)
                if (updateBusinessRequest.IsShowKindeBrandingOption.Value != null)
                    writer.WriteBoolean("is_show_kinde_branding", updateBusinessRequest.IsShowKindeBrandingOption.Value!.Value);
                else
                    writer.WriteNull("is_show_kinde_branding");

            if (updateBusinessRequest.KindePerkCodeOption.IsSet)
                if (updateBusinessRequest.KindePerkCodeOption.Value != null)
                    writer.WriteString("kinde_perk_code", updateBusinessRequest.KindePerkCode);
                else
                    writer.WriteNull("kinde_perk_code");

            if (updateBusinessRequest.PhoneOption.IsSet)
                if (updateBusinessRequest.PhoneOption.Value != null)
                    writer.WriteString("phone", updateBusinessRequest.Phone);
                else
                    writer.WriteNull("phone");

            if (updateBusinessRequest.PrivacyUrlOption.IsSet)
                if (updateBusinessRequest.PrivacyUrlOption.Value != null)
                    writer.WriteString("privacy_url", updateBusinessRequest.PrivacyUrl);
                else
                    writer.WriteNull("privacy_url");

            if (updateBusinessRequest.TermsUrlOption.IsSet)
                if (updateBusinessRequest.TermsUrlOption.Value != null)
                    writer.WriteString("terms_url", updateBusinessRequest.TermsUrl);
                else
                    writer.WriteNull("terms_url");

            if (updateBusinessRequest.TimezoneKeyOption.IsSet)
                if (updateBusinessRequest.TimezoneKeyOption.Value != null)
                    writer.WriteString("timezone_key", updateBusinessRequest.TimezoneKey);
                else
                    writer.WriteNull("timezone_key");
        }
    }
}
