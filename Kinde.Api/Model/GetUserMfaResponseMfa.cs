// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    public partial class GetUserMfaResponseMfa
    {
        /// <summary>
        /// </summary>
        /// <param name="id">The MFA&#39;s identifier.</param>
        /// <param name="type">The type of MFA (e.g. email, SMS, authenticator app).</param>
        /// <param name="createdOn">The timestamp when the MFA was created.</param>
        /// <param name="name">The identifier used for MFA (e.g. email address, phone number).</param>
        /// <param name="isVerified">Whether the MFA is verified or not.</param>
        /// <param name="usageCount">The number of times MFA has been used.</param>
        /// <param name="lastUsedOn">The timestamp when the MFA was last used.</param>
        [JsonConstructor]
        public GetUserMfaResponseMfa(Option<string?> id = default, Option<string?> type = default, Option<DateTimeOffset?> createdOn = default, Option<string?> name = default, Option<bool?> isVerified = default, Option<int?> usageCount = default, Option<DateTimeOffset?> lastUsedOn = default)
        {
            IdOption = id;
            TypeOption = type;
            CreatedOnOption = createdOn;
            NameOption = name;
            IsVerifiedOption = isVerified;
            UsageCountOption = usageCount;
            LastUsedOnOption = lastUsedOn;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The MFA&#39;s identifier.
        /// </summary>
        /// <value>The MFA&#39;s identifier.</value>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// The type of MFA (e.g. email, SMS, authenticator app).
        /// </summary>
        /// <value>The type of MFA (e.g. email, SMS, authenticator app).</value>
        /* <example>email</example> */
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> CreatedOnOption { get; private set; }

        /// <summary>
        /// The timestamp when the MFA was created.
        /// </summary>
        /// <value>The timestamp when the MFA was created.</value>
        /* <example>2024-11-18T13:31:46.795085+11:00</example> */
        [JsonPropertyName("created_on")]
        public DateTimeOffset? CreatedOn { get { return this.CreatedOnOption; } set { this.CreatedOnOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The identifier used for MFA (e.g. email address, phone number).
        /// </summary>
        /// <value>The identifier used for MFA (e.g. email address, phone number).</value>
        /* <example>sally@gmail.com</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsVerifiedOption { get; private set; }

        /// <summary>
        /// Whether the MFA is verified or not.
        /// </summary>
        /// <value>Whether the MFA is verified or not.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_verified")]
        public bool? IsVerified { get { return this.IsVerifiedOption; } set { this.IsVerifiedOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> UsageCountOption { get; private set; }

        /// <summary>
        /// The number of times MFA has been used.
        /// </summary>
        /// <value>The number of times MFA has been used.</value>
        /* <example>2</example> */
        [JsonPropertyName("usage_count")]
        public int? UsageCount { get { return this.UsageCountOption; } set { this.UsageCountOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> LastUsedOnOption { get; private set; }

        /// <summary>
        /// The timestamp when the MFA was last used.
        /// </summary>
        /// <value>The timestamp when the MFA was last used.</value>
        /* <example>2024-11-18T13:32:07.225380+11:00</example> */
        [JsonPropertyName("last_used_on")]
        public DateTimeOffset? LastUsedOn { get { return this.LastUsedOnOption; } set { this.LastUsedOnOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserMfaResponseMfa {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  UsageCount: ").Append(UsageCount).Append("\n");
            sb.Append("  LastUsedOn: ").Append(LastUsedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class GetUserMfaResponseMfaJsonConverter : JsonConverter<GetUserMfaResponseMfa>
    {
        /// <summary>
        /// The format to use to serialize CreatedOn
        /// </summary>
        public static string CreatedOnFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// </summary>
        public static string LastUsedOnFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetUserMfaResponseMfa Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> type = default;
            Option<DateTimeOffset?> createdOn = default;
            Option<string?> name = default;
            Option<bool?> isVerified = default;
            Option<int?> usageCount = default;
            Option<DateTimeOffset?> lastUsedOn = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_on":
                            createdOn = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_verified":
                            isVerified = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "usage_count":
                            usageCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "last_used_on":
                            lastUsedOn = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetUserMfaResponseMfa.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class GetUserMfaResponseMfa.");

            if (createdOn.IsSet && createdOn.Value == null)
                throw new ArgumentNullException(nameof(createdOn), "Property is not nullable for class GetUserMfaResponseMfa.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetUserMfaResponseMfa.");

            if (isVerified.IsSet && isVerified.Value == null)
                throw new ArgumentNullException(nameof(isVerified), "Property is not nullable for class GetUserMfaResponseMfa.");

            if (usageCount.IsSet && usageCount.Value == null)
                throw new ArgumentNullException(nameof(usageCount), "Property is not nullable for class GetUserMfaResponseMfa.");

            if (lastUsedOn.IsSet && lastUsedOn.Value == null)
                throw new ArgumentNullException(nameof(lastUsedOn), "Property is not nullable for class GetUserMfaResponseMfa.");

            return new GetUserMfaResponseMfa(id, type, createdOn, name, isVerified, usageCount, lastUsedOn);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, GetUserMfaResponseMfa getUserMfaResponseMfa, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getUserMfaResponseMfa, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, GetUserMfaResponseMfa getUserMfaResponseMfa, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getUserMfaResponseMfa.IdOption.IsSet && getUserMfaResponseMfa.Id == null)
                throw new ArgumentNullException(nameof(getUserMfaResponseMfa.Id), "Property is required for class GetUserMfaResponseMfa.");

            if (getUserMfaResponseMfa.TypeOption.IsSet && getUserMfaResponseMfa.Type == null)
                throw new ArgumentNullException(nameof(getUserMfaResponseMfa.Type), "Property is required for class GetUserMfaResponseMfa.");

            if (getUserMfaResponseMfa.NameOption.IsSet && getUserMfaResponseMfa.Name == null)
                throw new ArgumentNullException(nameof(getUserMfaResponseMfa.Name), "Property is required for class GetUserMfaResponseMfa.");

            if (getUserMfaResponseMfa.IdOption.IsSet)
                writer.WriteString("id", getUserMfaResponseMfa.Id);

            if (getUserMfaResponseMfa.TypeOption.IsSet)
                writer.WriteString("type", getUserMfaResponseMfa.Type);

            if (getUserMfaResponseMfa.CreatedOnOption.IsSet)
                writer.WriteString("created_on", getUserMfaResponseMfa.CreatedOnOption.Value!.Value.ToString(CreatedOnFormat));

            if (getUserMfaResponseMfa.NameOption.IsSet)
                writer.WriteString("name", getUserMfaResponseMfa.Name);

            if (getUserMfaResponseMfa.IsVerifiedOption.IsSet)
                writer.WriteBoolean("is_verified", getUserMfaResponseMfa.IsVerifiedOption.Value!.Value);

            if (getUserMfaResponseMfa.UsageCountOption.IsSet)
                writer.WriteNumber("usage_count", getUserMfaResponseMfa.UsageCountOption.Value!.Value);

            if (getUserMfaResponseMfa.LastUsedOnOption.IsSet)
                writer.WriteString("last_used_on", getUserMfaResponseMfa.LastUsedOnOption.Value!.Value.ToString(LastUsedOnFormat));
        }
    }
}
