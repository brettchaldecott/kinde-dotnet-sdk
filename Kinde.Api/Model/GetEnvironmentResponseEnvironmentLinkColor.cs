// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetEnvironmentResponseEnvironmentLinkColor
    /// </summary>
    public partial class GetEnvironmentResponseEnvironmentLinkColor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEnvironmentResponseEnvironmentLinkColor" /> class.
        /// </summary>
        /// <param name="raw">raw</param>
        /// <param name="hex">hex</param>
        /// <param name="hsl">hsl</param>
        [JsonConstructor]
        public GetEnvironmentResponseEnvironmentLinkColor(Option<string?> raw = default, Option<string?> hex = default, Option<string?> hsl = default)
        {
            RawOption = raw;
            HexOption = hex;
            HslOption = hsl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Raw
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RawOption { get; private set; }

        /// <summary>
        /// Gets or Sets Raw
        /// </summary>
        /* <example>#0056F1</example> */
        [JsonPropertyName("raw")]
        public string? Raw { get { return this.RawOption; } set { this.RawOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Hex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HexOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hex
        /// </summary>
        /* <example>#0056F1</example> */
        [JsonPropertyName("hex")]
        public string? Hex { get { return this.HexOption; } set { this.HexOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Hsl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HslOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hsl
        /// </summary>
        /* <example>hsl(220, 100%, 50%)</example> */
        [JsonPropertyName("hsl")]
        public string? Hsl { get { return this.HslOption; } set { this.HslOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEnvironmentResponseEnvironmentLinkColor {\n");
            sb.Append("  Raw: ").Append(Raw).Append("\n");
            sb.Append("  Hex: ").Append(Hex).Append("\n");
            sb.Append("  Hsl: ").Append(Hsl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetEnvironmentResponseEnvironmentLinkColor" />
    /// </summary>
    public class GetEnvironmentResponseEnvironmentLinkColorJsonConverter : JsonConverter<GetEnvironmentResponseEnvironmentLinkColor>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetEnvironmentResponseEnvironmentLinkColor" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetEnvironmentResponseEnvironmentLinkColor Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> raw = default;
            Option<string?> hex = default;
            Option<string?> hsl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "raw":
                            raw = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hex":
                            hex = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hsl":
                            hsl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (raw.IsSet && raw.Value == null)
                throw new ArgumentNullException(nameof(raw), "Property is not nullable for class GetEnvironmentResponseEnvironmentLinkColor.");

            if (hex.IsSet && hex.Value == null)
                throw new ArgumentNullException(nameof(hex), "Property is not nullable for class GetEnvironmentResponseEnvironmentLinkColor.");

            if (hsl.IsSet && hsl.Value == null)
                throw new ArgumentNullException(nameof(hsl), "Property is not nullable for class GetEnvironmentResponseEnvironmentLinkColor.");

            return new GetEnvironmentResponseEnvironmentLinkColor(raw, hex, hsl);
        }

        /// <summary>
        /// Serializes a <see cref="GetEnvironmentResponseEnvironmentLinkColor" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEnvironmentResponseEnvironmentLinkColor"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetEnvironmentResponseEnvironmentLinkColor getEnvironmentResponseEnvironmentLinkColor, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getEnvironmentResponseEnvironmentLinkColor, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetEnvironmentResponseEnvironmentLinkColor" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEnvironmentResponseEnvironmentLinkColor"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetEnvironmentResponseEnvironmentLinkColor getEnvironmentResponseEnvironmentLinkColor, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getEnvironmentResponseEnvironmentLinkColor.RawOption.IsSet && getEnvironmentResponseEnvironmentLinkColor.Raw == null)
                throw new ArgumentNullException(nameof(getEnvironmentResponseEnvironmentLinkColor.Raw), "Property is required for class GetEnvironmentResponseEnvironmentLinkColor.");

            if (getEnvironmentResponseEnvironmentLinkColor.HexOption.IsSet && getEnvironmentResponseEnvironmentLinkColor.Hex == null)
                throw new ArgumentNullException(nameof(getEnvironmentResponseEnvironmentLinkColor.Hex), "Property is required for class GetEnvironmentResponseEnvironmentLinkColor.");

            if (getEnvironmentResponseEnvironmentLinkColor.HslOption.IsSet && getEnvironmentResponseEnvironmentLinkColor.Hsl == null)
                throw new ArgumentNullException(nameof(getEnvironmentResponseEnvironmentLinkColor.Hsl), "Property is required for class GetEnvironmentResponseEnvironmentLinkColor.");

            if (getEnvironmentResponseEnvironmentLinkColor.RawOption.IsSet)
                writer.WriteString("raw", getEnvironmentResponseEnvironmentLinkColor.Raw);

            if (getEnvironmentResponseEnvironmentLinkColor.HexOption.IsSet)
                writer.WriteString("hex", getEnvironmentResponseEnvironmentLinkColor.Hex);

            if (getEnvironmentResponseEnvironmentLinkColor.HslOption.IsSet)
                writer.WriteString("hsl", getEnvironmentResponseEnvironmentLinkColor.Hsl);
        }
    }
}
