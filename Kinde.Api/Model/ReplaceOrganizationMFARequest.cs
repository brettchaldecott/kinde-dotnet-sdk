// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    public partial class ReplaceOrganizationMFARequest
    {
        /// <summary>
        /// </summary>
        /// <param name="enabledFactors">The MFA methods to enable.</param>
        [JsonConstructor]
        public ReplaceOrganizationMFARequest(List<ReplaceOrganizationMFARequest.EnabledFactorsEnum> enabledFactors)
        {
            EnabledFactors = enabledFactors;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// </summary>
        public enum EnabledFactorsEnum
        {
            /// <summary>
            /// Enum Mfaemail for value: mfa:email
            /// </summary>
            Mfaemail = 1,

            /// <summary>
            /// Enum Mfasms for value: mfa:sms
            /// </summary>
            Mfasms = 2,

            /// <summary>
            /// </summary>
            MfaauthenticatorApp = 3
        }

        /// <summary>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EnabledFactorsEnum EnabledFactorsEnumFromString(string value)
        {
            if (value.Equals("mfa:email"))
                return EnabledFactorsEnum.Mfaemail;

            if (value.Equals("mfa:sms"))
                return EnabledFactorsEnum.Mfasms;

            if (value.Equals("mfa:authenticator_app"))
                return EnabledFactorsEnum.MfaauthenticatorApp;

            throw new NotImplementedException($"Could not convert value to type EnabledFactorsEnum: '{value}'");
        }

        /// <summary>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EnabledFactorsEnum? EnabledFactorsEnumFromStringOrDefault(string value)
        {
            if (value.Equals("mfa:email"))
                return EnabledFactorsEnum.Mfaemail;

            if (value.Equals("mfa:sms"))
                return EnabledFactorsEnum.Mfasms;

            if (value.Equals("mfa:authenticator_app"))
                return EnabledFactorsEnum.MfaauthenticatorApp;

            return null;
        }

        /// <summary>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string EnabledFactorsEnumToJsonValue(EnabledFactorsEnum? value)
        {
            if (value == EnabledFactorsEnum.Mfaemail)
                return "mfa:email";

            if (value == EnabledFactorsEnum.Mfasms)
                return "mfa:sms";

            if (value == EnabledFactorsEnum.MfaauthenticatorApp)
                return "mfa:authenticator_app";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The MFA methods to enable.
        /// </summary>
        /// <value>The MFA methods to enable.</value>
        [JsonPropertyName("enabled_factors")]
        public List<ReplaceOrganizationMFARequest.EnabledFactorsEnum> EnabledFactors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReplaceOrganizationMFARequest {\n");
            sb.Append("  EnabledFactors: ").Append(EnabledFactors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class ReplaceOrganizationMFARequestJsonConverter : JsonConverter<ReplaceOrganizationMFARequest>
    {
        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReplaceOrganizationMFARequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<ReplaceOrganizationMFARequest.EnabledFactorsEnum>?> enabledFactors = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "enabled_factors":
                            enabledFactors = new Option<List<ReplaceOrganizationMFARequest.EnabledFactorsEnum>?>(JsonSerializer.Deserialize<List<ReplaceOrganizationMFARequest.EnabledFactorsEnum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!enabledFactors.IsSet)
                throw new ArgumentException("Property is required for class ReplaceOrganizationMFARequest.", nameof(enabledFactors));

            if (enabledFactors.IsSet && enabledFactors.Value == null)
                throw new ArgumentNullException(nameof(enabledFactors), "Property is not nullable for class ReplaceOrganizationMFARequest.");

            return new ReplaceOrganizationMFARequest(enabledFactors.Value!);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, ReplaceOrganizationMFARequest replaceOrganizationMFARequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, replaceOrganizationMFARequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, ReplaceOrganizationMFARequest replaceOrganizationMFARequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (replaceOrganizationMFARequest.EnabledFactors == null)
                throw new ArgumentNullException(nameof(replaceOrganizationMFARequest.EnabledFactors), "Property is required for class ReplaceOrganizationMFARequest.");

            writer.WritePropertyName("enabled_factors");
            JsonSerializer.Serialize(writer, replaceOrganizationMFARequest.EnabledFactors, jsonSerializerOptions);
        }
    }
}
