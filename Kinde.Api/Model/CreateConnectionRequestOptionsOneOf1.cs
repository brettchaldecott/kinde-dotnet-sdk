// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// Azure AD connection options.
    /// </summary>
    public partial class CreateConnectionRequestOptionsOneOf1
    {
        /// <summary>
        /// </summary>
        /// <param name="clientId">Client ID.</param>
        /// <param name="clientSecret">Client secret.</param>
        /// <param name="entraIdDomain">Domain for Entra ID.</param>
        /// <param name="upstreamParams">Additional upstream parameters to pass to the identity provider.</param>
        [JsonConstructor]
        public CreateConnectionRequestOptionsOneOf1(Option<string?> clientId = default, Option<string?> clientSecret = default, Option<List<string>?> homeRealmDomains = default, Option<string?> entraIdDomain = default, Option<bool?> isUseCommonEndpoint = default, Option<bool?> isSyncUserProfileOnLogin = default, Option<bool?> isRetrieveProviderUserGroups = default, Option<bool?> isExtendedAttributesRequired = default, Option<bool?> isAutoJoinOrganizationEnabled = default, Option<bool?> isCreateMissingUser = default, Option<bool?> isForceShowSsoButton = default, Option<Dictionary<string, Object>?> upstreamParams = default)
        {
            ClientIdOption = clientId;
            ClientSecretOption = clientSecret;
            HomeRealmDomainsOption = homeRealmDomains;
            EntraIdDomainOption = entraIdDomain;
            IsUseCommonEndpointOption = isUseCommonEndpoint;
            IsSyncUserProfileOnLoginOption = isSyncUserProfileOnLogin;
            IsRetrieveProviderUserGroupsOption = isRetrieveProviderUserGroups;
            IsExtendedAttributesRequiredOption = isExtendedAttributesRequired;
            IsAutoJoinOrganizationEnabledOption = isAutoJoinOrganizationEnabled;
            IsCreateMissingUserOption = isCreateMissingUser;
            IsForceShowSsoButtonOption = isForceShowSsoButton;
            UpstreamParamsOption = upstreamParams;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ClientId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientIdOption { get; private set; }

        /// <summary>
        /// Client ID.
        /// </summary>
        /// <value>Client ID.</value>
        [JsonPropertyName("client_id")]
        public string? ClientId { get { return this.ClientIdOption; } set { this.ClientIdOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientSecretOption { get; private set; }

        /// <summary>
        /// Client secret.
        /// </summary>
        /// <value>Client secret.</value>
        [JsonPropertyName("client_secret")]
        public string? ClientSecret { get { return this.ClientSecretOption; } set { this.ClientSecretOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> HomeRealmDomainsOption { get; private set; }

        /// <summary>
        /// List of domains to limit authentication.
        /// </summary>
        /// <value>List of domains to limit authentication.</value>
        /* <example>[&quot;@kinde.com&quot;,&quot;@kinde.io&quot;]</example> */
        [JsonPropertyName("home_realm_domains")]
        public List<string>? HomeRealmDomains { get { return this.HomeRealmDomainsOption; } set { this.HomeRealmDomainsOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EntraIdDomainOption { get; private set; }

        /// <summary>
        /// Domain for Entra ID.
        /// </summary>
        /// <value>Domain for Entra ID.</value>
        /* <example>kinde.com</example> */
        [JsonPropertyName("entra_id_domain")]
        public string? EntraIdDomain { get { return this.EntraIdDomainOption; } set { this.EntraIdDomainOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsUseCommonEndpointOption { get; private set; }

        /// <summary>
        /// Use https://login.windows.net/common instead of a default endpoint.
        /// </summary>
        /// <value>Use https://login.windows.net/common instead of a default endpoint.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_use_common_endpoint")]
        public bool? IsUseCommonEndpoint { get { return this.IsUseCommonEndpointOption; } set { this.IsUseCommonEndpointOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSyncUserProfileOnLoginOption { get; private set; }

        /// <summary>
        /// Sync user profile data with IDP.
        /// </summary>
        /// <value>Sync user profile data with IDP.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_sync_user_profile_on_login")]
        public bool? IsSyncUserProfileOnLogin { get { return this.IsSyncUserProfileOnLoginOption; } set { this.IsSyncUserProfileOnLoginOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsRetrieveProviderUserGroupsOption { get; private set; }

        /// <summary>
        /// Include user group info from MS Entra ID.
        /// </summary>
        /// <value>Include user group info from MS Entra ID.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_retrieve_provider_user_groups")]
        public bool? IsRetrieveProviderUserGroups { get { return this.IsRetrieveProviderUserGroupsOption; } set { this.IsRetrieveProviderUserGroupsOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsExtendedAttributesRequiredOption { get; private set; }

        /// <summary>
        /// Include additional user profile information.
        /// </summary>
        /// <value>Include additional user profile information.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_extended_attributes_required")]
        public bool? IsExtendedAttributesRequired { get { return this.IsExtendedAttributesRequiredOption; } set { this.IsExtendedAttributesRequiredOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAutoJoinOrganizationEnabledOption { get; private set; }

        /// <summary>
        /// Users automatically join organization when using this connection.
        /// </summary>
        /// <value>Users automatically join organization when using this connection.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_auto_join_organization_enabled")]
        public bool? IsAutoJoinOrganizationEnabled { get { return this.IsAutoJoinOrganizationEnabledOption; } set { this.IsAutoJoinOrganizationEnabledOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsCreateMissingUserOption { get; private set; }

        /// <summary>
        /// Create a user record in Kinde if the user signing in does not exist.
        /// </summary>
        /// <value>Create a user record in Kinde if the user signing in does not exist.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_create_missing_user")]
        public bool? IsCreateMissingUser { get { return this.IsCreateMissingUserOption; } set { this.IsCreateMissingUserOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsForceShowSsoButtonOption { get; private set; }

        /// <summary>
        /// Force showing the SSO button for this connection.
        /// </summary>
        /// <value>Force showing the SSO button for this connection.</value>
        /* <example>false</example> */
        [JsonPropertyName("is_force_show_sso_button")]
        public bool? IsForceShowSsoButton { get { return this.IsForceShowSsoButtonOption; } set { this.IsForceShowSsoButtonOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> UpstreamParamsOption { get; private set; }

        /// <summary>
        /// Additional upstream parameters to pass to the identity provider.
        /// </summary>
        /// <value>Additional upstream parameters to pass to the identity provider.</value>
        /* <example>{&quot;prompt&quot;:{&quot;value&quot;:&quot;select_account&quot;}}</example> */
        [JsonPropertyName("upstream_params")]
        public Dictionary<string, Object>? UpstreamParams { get { return this.UpstreamParamsOption; } set { this.UpstreamParamsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectionRequestOptionsOneOf1 {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  HomeRealmDomains: ").Append(HomeRealmDomains).Append("\n");
            sb.Append("  EntraIdDomain: ").Append(EntraIdDomain).Append("\n");
            sb.Append("  IsUseCommonEndpoint: ").Append(IsUseCommonEndpoint).Append("\n");
            sb.Append("  IsSyncUserProfileOnLogin: ").Append(IsSyncUserProfileOnLogin).Append("\n");
            sb.Append("  IsRetrieveProviderUserGroups: ").Append(IsRetrieveProviderUserGroups).Append("\n");
            sb.Append("  IsExtendedAttributesRequired: ").Append(IsExtendedAttributesRequired).Append("\n");
            sb.Append("  IsAutoJoinOrganizationEnabled: ").Append(IsAutoJoinOrganizationEnabled).Append("\n");
            sb.Append("  IsCreateMissingUser: ").Append(IsCreateMissingUser).Append("\n");
            sb.Append("  IsForceShowSsoButton: ").Append(IsForceShowSsoButton).Append("\n");
            sb.Append("  UpstreamParams: ").Append(UpstreamParams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class CreateConnectionRequestOptionsOneOf1JsonConverter : JsonConverter<CreateConnectionRequestOptionsOneOf1>
    {
        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateConnectionRequestOptionsOneOf1 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> clientId = default;
            Option<string?> clientSecret = default;
            Option<List<string>?> homeRealmDomains = default;
            Option<string?> entraIdDomain = default;
            Option<bool?> isUseCommonEndpoint = default;
            Option<bool?> isSyncUserProfileOnLogin = default;
            Option<bool?> isRetrieveProviderUserGroups = default;
            Option<bool?> isExtendedAttributesRequired = default;
            Option<bool?> isAutoJoinOrganizationEnabled = default;
            Option<bool?> isCreateMissingUser = default;
            Option<bool?> isForceShowSsoButton = default;
            Option<Dictionary<string, Object>?> upstreamParams = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "client_id":
                            clientId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "client_secret":
                            clientSecret = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "home_realm_domains":
                            homeRealmDomains = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "entra_id_domain":
                            entraIdDomain = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_use_common_endpoint":
                            isUseCommonEndpoint = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_sync_user_profile_on_login":
                            isSyncUserProfileOnLogin = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_retrieve_provider_user_groups":
                            isRetrieveProviderUserGroups = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_extended_attributes_required":
                            isExtendedAttributesRequired = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_auto_join_organization_enabled":
                            isAutoJoinOrganizationEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_create_missing_user":
                            isCreateMissingUser = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_force_show_sso_button":
                            isForceShowSsoButton = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "upstream_params":
                            upstreamParams = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (clientId.IsSet && clientId.Value == null)
                throw new ArgumentNullException(nameof(clientId), "Property is not nullable for class CreateConnectionRequestOptionsOneOf1.");

            if (clientSecret.IsSet && clientSecret.Value == null)
                throw new ArgumentNullException(nameof(clientSecret), "Property is not nullable for class CreateConnectionRequestOptionsOneOf1.");

            if (homeRealmDomains.IsSet && homeRealmDomains.Value == null)
                throw new ArgumentNullException(nameof(homeRealmDomains), "Property is not nullable for class CreateConnectionRequestOptionsOneOf1.");

            if (entraIdDomain.IsSet && entraIdDomain.Value == null)
                throw new ArgumentNullException(nameof(entraIdDomain), "Property is not nullable for class CreateConnectionRequestOptionsOneOf1.");

            if (isUseCommonEndpoint.IsSet && isUseCommonEndpoint.Value == null)
                throw new ArgumentNullException(nameof(isUseCommonEndpoint), "Property is not nullable for class CreateConnectionRequestOptionsOneOf1.");

            if (isSyncUserProfileOnLogin.IsSet && isSyncUserProfileOnLogin.Value == null)
                throw new ArgumentNullException(nameof(isSyncUserProfileOnLogin), "Property is not nullable for class CreateConnectionRequestOptionsOneOf1.");

            if (isRetrieveProviderUserGroups.IsSet && isRetrieveProviderUserGroups.Value == null)
                throw new ArgumentNullException(nameof(isRetrieveProviderUserGroups), "Property is not nullable for class CreateConnectionRequestOptionsOneOf1.");

            if (isExtendedAttributesRequired.IsSet && isExtendedAttributesRequired.Value == null)
                throw new ArgumentNullException(nameof(isExtendedAttributesRequired), "Property is not nullable for class CreateConnectionRequestOptionsOneOf1.");

            if (isAutoJoinOrganizationEnabled.IsSet && isAutoJoinOrganizationEnabled.Value == null)
                throw new ArgumentNullException(nameof(isAutoJoinOrganizationEnabled), "Property is not nullable for class CreateConnectionRequestOptionsOneOf1.");

            if (isCreateMissingUser.IsSet && isCreateMissingUser.Value == null)
                throw new ArgumentNullException(nameof(isCreateMissingUser), "Property is not nullable for class CreateConnectionRequestOptionsOneOf1.");

            if (isForceShowSsoButton.IsSet && isForceShowSsoButton.Value == null)
                throw new ArgumentNullException(nameof(isForceShowSsoButton), "Property is not nullable for class CreateConnectionRequestOptionsOneOf1.");

            if (upstreamParams.IsSet && upstreamParams.Value == null)
                throw new ArgumentNullException(nameof(upstreamParams), "Property is not nullable for class CreateConnectionRequestOptionsOneOf1.");

            return new CreateConnectionRequestOptionsOneOf1(clientId, clientSecret, homeRealmDomains, entraIdDomain, isUseCommonEndpoint, isSyncUserProfileOnLogin, isRetrieveProviderUserGroups, isExtendedAttributesRequired, isAutoJoinOrganizationEnabled, isCreateMissingUser, isForceShowSsoButton, upstreamParams);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, CreateConnectionRequestOptionsOneOf1 createConnectionRequestOptionsOneOf1, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createConnectionRequestOptionsOneOf1, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, CreateConnectionRequestOptionsOneOf1 createConnectionRequestOptionsOneOf1, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createConnectionRequestOptionsOneOf1.ClientIdOption.IsSet && createConnectionRequestOptionsOneOf1.ClientId == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf1.ClientId), "Property is required for class CreateConnectionRequestOptionsOneOf1.");

            if (createConnectionRequestOptionsOneOf1.ClientSecretOption.IsSet && createConnectionRequestOptionsOneOf1.ClientSecret == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf1.ClientSecret), "Property is required for class CreateConnectionRequestOptionsOneOf1.");

            if (createConnectionRequestOptionsOneOf1.HomeRealmDomainsOption.IsSet && createConnectionRequestOptionsOneOf1.HomeRealmDomains == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf1.HomeRealmDomains), "Property is required for class CreateConnectionRequestOptionsOneOf1.");

            if (createConnectionRequestOptionsOneOf1.EntraIdDomainOption.IsSet && createConnectionRequestOptionsOneOf1.EntraIdDomain == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf1.EntraIdDomain), "Property is required for class CreateConnectionRequestOptionsOneOf1.");

            if (createConnectionRequestOptionsOneOf1.UpstreamParamsOption.IsSet && createConnectionRequestOptionsOneOf1.UpstreamParams == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf1.UpstreamParams), "Property is required for class CreateConnectionRequestOptionsOneOf1.");

            if (createConnectionRequestOptionsOneOf1.ClientIdOption.IsSet)
                writer.WriteString("client_id", createConnectionRequestOptionsOneOf1.ClientId);

            if (createConnectionRequestOptionsOneOf1.ClientSecretOption.IsSet)
                writer.WriteString("client_secret", createConnectionRequestOptionsOneOf1.ClientSecret);

            if (createConnectionRequestOptionsOneOf1.HomeRealmDomainsOption.IsSet)
            {
                writer.WritePropertyName("home_realm_domains");
                JsonSerializer.Serialize(writer, createConnectionRequestOptionsOneOf1.HomeRealmDomains, jsonSerializerOptions);
            }
            if (createConnectionRequestOptionsOneOf1.EntraIdDomainOption.IsSet)
                writer.WriteString("entra_id_domain", createConnectionRequestOptionsOneOf1.EntraIdDomain);

            if (createConnectionRequestOptionsOneOf1.IsUseCommonEndpointOption.IsSet)
                writer.WriteBoolean("is_use_common_endpoint", createConnectionRequestOptionsOneOf1.IsUseCommonEndpointOption.Value!.Value);

            if (createConnectionRequestOptionsOneOf1.IsSyncUserProfileOnLoginOption.IsSet)
                writer.WriteBoolean("is_sync_user_profile_on_login", createConnectionRequestOptionsOneOf1.IsSyncUserProfileOnLoginOption.Value!.Value);

            if (createConnectionRequestOptionsOneOf1.IsRetrieveProviderUserGroupsOption.IsSet)
                writer.WriteBoolean("is_retrieve_provider_user_groups", createConnectionRequestOptionsOneOf1.IsRetrieveProviderUserGroupsOption.Value!.Value);

            if (createConnectionRequestOptionsOneOf1.IsExtendedAttributesRequiredOption.IsSet)
                writer.WriteBoolean("is_extended_attributes_required", createConnectionRequestOptionsOneOf1.IsExtendedAttributesRequiredOption.Value!.Value);

            if (createConnectionRequestOptionsOneOf1.IsAutoJoinOrganizationEnabledOption.IsSet)
                writer.WriteBoolean("is_auto_join_organization_enabled", createConnectionRequestOptionsOneOf1.IsAutoJoinOrganizationEnabledOption.Value!.Value);

            if (createConnectionRequestOptionsOneOf1.IsCreateMissingUserOption.IsSet)
                writer.WriteBoolean("is_create_missing_user", createConnectionRequestOptionsOneOf1.IsCreateMissingUserOption.Value!.Value);

            if (createConnectionRequestOptionsOneOf1.IsForceShowSsoButtonOption.IsSet)
                writer.WriteBoolean("is_force_show_sso_button", createConnectionRequestOptionsOneOf1.IsForceShowSsoButtonOption.Value!.Value);

            if (createConnectionRequestOptionsOneOf1.UpstreamParamsOption.IsSet)
            {
                writer.WritePropertyName("upstream_params");
                JsonSerializer.Serialize(writer, createConnectionRequestOptionsOneOf1.UpstreamParams, jsonSerializerOptions);
            }
        }
    }
}
