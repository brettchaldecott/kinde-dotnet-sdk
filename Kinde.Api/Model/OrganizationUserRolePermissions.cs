// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// OrganizationUserRolePermissions
    /// </summary>
    public partial class OrganizationUserRolePermissions
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationUserRolePermissions" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="role">role</param>
        /// <param name="permissions">permissions</param>
        [JsonConstructor]
        public OrganizationUserRolePermissions(Option<string?> id = default, Option<string?> role = default, Option<OrganizationUserRolePermissionsPermissions?> permissions = default)
        {
            IdOption = id;
            RoleOption = role;
            PermissionsOption = permissions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("role")]
        public string? Role { get { return this.RoleOption; } set { this.RoleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Permissions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OrganizationUserRolePermissionsPermissions?> PermissionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [JsonPropertyName("permissions")]
        public OrganizationUserRolePermissionsPermissions? Permissions { get { return this.PermissionsOption; } set { this.PermissionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationUserRolePermissions {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OrganizationUserRolePermissions" />
    /// </summary>
    public class OrganizationUserRolePermissionsJsonConverter : JsonConverter<OrganizationUserRolePermissions>
    {
        /// <summary>
        /// Deserializes json to <see cref="OrganizationUserRolePermissions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OrganizationUserRolePermissions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> role = default;
            Option<OrganizationUserRolePermissionsPermissions?> permissions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "role":
                            role = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "permissions":
                            permissions = new Option<OrganizationUserRolePermissionsPermissions?>(JsonSerializer.Deserialize<OrganizationUserRolePermissionsPermissions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class OrganizationUserRolePermissions.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class OrganizationUserRolePermissions.");

            if (permissions.IsSet && permissions.Value == null)
                throw new ArgumentNullException(nameof(permissions), "Property is not nullable for class OrganizationUserRolePermissions.");

            return new OrganizationUserRolePermissions(id, role, permissions);
        }

        /// <summary>
        /// Serializes a <see cref="OrganizationUserRolePermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationUserRolePermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OrganizationUserRolePermissions organizationUserRolePermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, organizationUserRolePermissions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OrganizationUserRolePermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationUserRolePermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OrganizationUserRolePermissions organizationUserRolePermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (organizationUserRolePermissions.IdOption.IsSet && organizationUserRolePermissions.Id == null)
                throw new ArgumentNullException(nameof(organizationUserRolePermissions.Id), "Property is required for class OrganizationUserRolePermissions.");

            if (organizationUserRolePermissions.RoleOption.IsSet && organizationUserRolePermissions.Role == null)
                throw new ArgumentNullException(nameof(organizationUserRolePermissions.Role), "Property is required for class OrganizationUserRolePermissions.");

            if (organizationUserRolePermissions.PermissionsOption.IsSet && organizationUserRolePermissions.Permissions == null)
                throw new ArgumentNullException(nameof(organizationUserRolePermissions.Permissions), "Property is required for class OrganizationUserRolePermissions.");

            if (organizationUserRolePermissions.IdOption.IsSet)
                writer.WriteString("id", organizationUserRolePermissions.Id);

            if (organizationUserRolePermissions.RoleOption.IsSet)
                writer.WriteString("role", organizationUserRolePermissions.Role);

            if (organizationUserRolePermissions.PermissionsOption.IsSet)
            {
                writer.WritePropertyName("permissions");
                JsonSerializer.Serialize(writer, organizationUserRolePermissions.Permissions, jsonSerializerOptions);
            }
        }
    }
}
