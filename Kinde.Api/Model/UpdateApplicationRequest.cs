// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// UpdateApplicationRequest
    /// </summary>
    public partial class UpdateApplicationRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateApplicationRequest" /> class.
        /// </summary>
        /// <param name="name">The application&#39;s name.</param>
        /// <param name="languageKey">The application&#39;s language key.</param>
        /// <param name="logoutUris">The application&#39;s logout uris.</param>
        /// <param name="redirectUris">The application&#39;s redirect uris.</param>
        /// <param name="loginUri">The default login route for resolving session issues.</param>
        /// <param name="homepageUri">The homepage link to your application.</param>
        [JsonConstructor]
        public UpdateApplicationRequest(Option<string?> name = default, Option<string?> languageKey = default, Option<List<string>?> logoutUris = default, Option<List<string>?> redirectUris = default, Option<string?> loginUri = default, Option<string?> homepageUri = default)
        {
            NameOption = name;
            LanguageKeyOption = languageKey;
            LogoutUrisOption = logoutUris;
            RedirectUrisOption = redirectUris;
            LoginUriOption = loginUri;
            HomepageUriOption = homepageUri;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The application&#39;s name.
        /// </summary>
        /// <value>The application&#39;s name.</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of LanguageKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageKeyOption { get; private set; }

        /// <summary>
        /// The application&#39;s language key.
        /// </summary>
        /// <value>The application&#39;s language key.</value>
        [JsonPropertyName("language_key")]
        public string? LanguageKey { get { return this.LanguageKeyOption; } set { this.LanguageKeyOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of LogoutUris
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> LogoutUrisOption { get; private set; }

        /// <summary>
        /// The application&#39;s logout uris.
        /// </summary>
        /// <value>The application&#39;s logout uris.</value>
        [JsonPropertyName("logout_uris")]
        public List<string>? LogoutUris { get { return this.LogoutUrisOption; } set { this.LogoutUrisOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Used to track the state of RedirectUris
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> RedirectUrisOption { get; private set; }

        /// <summary>
        /// The application&#39;s redirect uris.
        /// </summary>
        /// <value>The application&#39;s redirect uris.</value>
        [JsonPropertyName("redirect_uris")]
        public List<string>? RedirectUris { get { return this.RedirectUrisOption; } set { this.RedirectUrisOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Used to track the state of LoginUri
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LoginUriOption { get; private set; }

        /// <summary>
        /// The default login route for resolving session issues.
        /// </summary>
        /// <value>The default login route for resolving session issues.</value>
        [JsonPropertyName("login_uri")]
        public string? LoginUri { get { return this.LoginUriOption; } set { this.LoginUriOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of HomepageUri
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HomepageUriOption { get; private set; }

        /// <summary>
        /// The homepage link to your application.
        /// </summary>
        /// <value>The homepage link to your application.</value>
        [JsonPropertyName("homepage_uri")]
        public string? HomepageUri { get { return this.HomepageUriOption; } set { this.HomepageUriOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateApplicationRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LanguageKey: ").Append(LanguageKey).Append("\n");
            sb.Append("  LogoutUris: ").Append(LogoutUris).Append("\n");
            sb.Append("  RedirectUris: ").Append(RedirectUris).Append("\n");
            sb.Append("  LoginUri: ").Append(LoginUri).Append("\n");
            sb.Append("  HomepageUri: ").Append(HomepageUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateApplicationRequest" />
    /// </summary>
    public class UpdateApplicationRequestJsonConverter : JsonConverter<UpdateApplicationRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateApplicationRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateApplicationRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> languageKey = default;
            Option<List<string>?> logoutUris = default;
            Option<List<string>?> redirectUris = default;
            Option<string?> loginUri = default;
            Option<string?> homepageUri = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "language_key":
                            languageKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "logout_uris":
                            logoutUris = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "redirect_uris":
                            redirectUris = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "login_uri":
                            loginUri = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "homepage_uri":
                            homepageUri = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UpdateApplicationRequest.");

            if (languageKey.IsSet && languageKey.Value == null)
                throw new ArgumentNullException(nameof(languageKey), "Property is not nullable for class UpdateApplicationRequest.");

            if (logoutUris.IsSet && logoutUris.Value == null)
                throw new ArgumentNullException(nameof(logoutUris), "Property is not nullable for class UpdateApplicationRequest.");

            if (redirectUris.IsSet && redirectUris.Value == null)
                throw new ArgumentNullException(nameof(redirectUris), "Property is not nullable for class UpdateApplicationRequest.");

            if (loginUri.IsSet && loginUri.Value == null)
                throw new ArgumentNullException(nameof(loginUri), "Property is not nullable for class UpdateApplicationRequest.");

            if (homepageUri.IsSet && homepageUri.Value == null)
                throw new ArgumentNullException(nameof(homepageUri), "Property is not nullable for class UpdateApplicationRequest.");

            return new UpdateApplicationRequest(name, languageKey, logoutUris, redirectUris, loginUri, homepageUri);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateApplicationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateApplicationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateApplicationRequest updateApplicationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateApplicationRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateApplicationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateApplicationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateApplicationRequest updateApplicationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateApplicationRequest.NameOption.IsSet && updateApplicationRequest.Name == null)
                throw new ArgumentNullException(nameof(updateApplicationRequest.Name), "Property is required for class UpdateApplicationRequest.");

            if (updateApplicationRequest.LanguageKeyOption.IsSet && updateApplicationRequest.LanguageKey == null)
                throw new ArgumentNullException(nameof(updateApplicationRequest.LanguageKey), "Property is required for class UpdateApplicationRequest.");

            if (updateApplicationRequest.LogoutUrisOption.IsSet && updateApplicationRequest.LogoutUris == null)
                throw new ArgumentNullException(nameof(updateApplicationRequest.LogoutUris), "Property is required for class UpdateApplicationRequest.");

            if (updateApplicationRequest.RedirectUrisOption.IsSet && updateApplicationRequest.RedirectUris == null)
                throw new ArgumentNullException(nameof(updateApplicationRequest.RedirectUris), "Property is required for class UpdateApplicationRequest.");

            if (updateApplicationRequest.LoginUriOption.IsSet && updateApplicationRequest.LoginUri == null)
                throw new ArgumentNullException(nameof(updateApplicationRequest.LoginUri), "Property is required for class UpdateApplicationRequest.");

            if (updateApplicationRequest.HomepageUriOption.IsSet && updateApplicationRequest.HomepageUri == null)
                throw new ArgumentNullException(nameof(updateApplicationRequest.HomepageUri), "Property is required for class UpdateApplicationRequest.");

            if (updateApplicationRequest.NameOption.IsSet)
                writer.WriteString("name", updateApplicationRequest.Name);

            if (updateApplicationRequest.LanguageKeyOption.IsSet)
                writer.WriteString("language_key", updateApplicationRequest.LanguageKey);

            if (updateApplicationRequest.LogoutUrisOption.IsSet)
            {
                writer.WritePropertyName("logout_uris");
                JsonSerializer.Serialize(writer, updateApplicationRequest.LogoutUris, jsonSerializerOptions);
            }
            if (updateApplicationRequest.RedirectUrisOption.IsSet)
            {
                writer.WritePropertyName("redirect_uris");
                JsonSerializer.Serialize(writer, updateApplicationRequest.RedirectUris, jsonSerializerOptions);
            }
            if (updateApplicationRequest.LoginUriOption.IsSet)
                writer.WriteString("login_uri", updateApplicationRequest.LoginUri);

            if (updateApplicationRequest.HomepageUriOption.IsSet)
                writer.WriteString("homepage_uri", updateApplicationRequest.HomepageUri);
        }
    }
}
