// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// UpdateOrganizationSessionsRequest
    /// </summary>
    public partial class UpdateOrganizationSessionsRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateOrganizationSessionsRequest" /> class.
        /// </summary>
        /// <param name="isUseOrgSsoSessionPolicy">Whether to use the organization&#39;s SSO session policy override.</param>
        /// <param name="ssoSessionPersistenceMode">Determines if the session should be persistent or not.</param>
        /// <param name="isUseOrgAuthenticatedSessionLifetime">Whether to apply the organization&#39;s authenticated session lifetime override.</param>
        /// <param name="authenticatedSessionLifetime">Authenticated session lifetime in seconds.</param>
        [JsonConstructor]
        public UpdateOrganizationSessionsRequest(Option<bool?> isUseOrgSsoSessionPolicy = default, Option<SsoSessionPersistenceModeEnum?> ssoSessionPersistenceMode = default, Option<bool?> isUseOrgAuthenticatedSessionLifetime = default, Option<int?> authenticatedSessionLifetime = default)
        {
            IsUseOrgSsoSessionPolicyOption = isUseOrgSsoSessionPolicy;
            SsoSessionPersistenceModeOption = ssoSessionPersistenceMode;
            IsUseOrgAuthenticatedSessionLifetimeOption = isUseOrgAuthenticatedSessionLifetime;
            AuthenticatedSessionLifetimeOption = authenticatedSessionLifetime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Determines if the session should be persistent or not.
        /// </summary>
        /// <value>Determines if the session should be persistent or not.</value>
        public enum SsoSessionPersistenceModeEnum
        {
            /// <summary>
            /// Enum Persistent for value: persistent
            /// </summary>
            Persistent = 1,

            /// <summary>
            /// Enum NonPersistent for value: non_persistent
            /// </summary>
            NonPersistent = 2
        }

        /// <summary>
        /// Returns a <see cref="SsoSessionPersistenceModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SsoSessionPersistenceModeEnum SsoSessionPersistenceModeEnumFromString(string value)
        {
            if (value.Equals("persistent"))
                return SsoSessionPersistenceModeEnum.Persistent;

            if (value.Equals("non_persistent"))
                return SsoSessionPersistenceModeEnum.NonPersistent;

            throw new NotImplementedException($"Could not convert value to type SsoSessionPersistenceModeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SsoSessionPersistenceModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SsoSessionPersistenceModeEnum? SsoSessionPersistenceModeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("persistent"))
                return SsoSessionPersistenceModeEnum.Persistent;

            if (value.Equals("non_persistent"))
                return SsoSessionPersistenceModeEnum.NonPersistent;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SsoSessionPersistenceModeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SsoSessionPersistenceModeEnumToJsonValue(SsoSessionPersistenceModeEnum? value)
        {
            if (value == SsoSessionPersistenceModeEnum.Persistent)
                return "persistent";

            if (value == SsoSessionPersistenceModeEnum.NonPersistent)
                return "non_persistent";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SsoSessionPersistenceMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SsoSessionPersistenceModeEnum?> SsoSessionPersistenceModeOption { get; private set; }

        /// <summary>
        /// Determines if the session should be persistent or not.
        /// </summary>
        /// <value>Determines if the session should be persistent or not.</value>
        [JsonPropertyName("sso_session_persistence_mode")]
        public SsoSessionPersistenceModeEnum? SsoSessionPersistenceMode { get { return this.SsoSessionPersistenceModeOption; } set { this.SsoSessionPersistenceModeOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsUseOrgSsoSessionPolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsUseOrgSsoSessionPolicyOption { get; private set; }

        /// <summary>
        /// Whether to use the organization&#39;s SSO session policy override.
        /// </summary>
        /// <value>Whether to use the organization&#39;s SSO session policy override.</value>
        [JsonPropertyName("is_use_org_sso_session_policy")]
        public bool? IsUseOrgSsoSessionPolicy { get { return this.IsUseOrgSsoSessionPolicyOption; } set { this.IsUseOrgSsoSessionPolicyOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsUseOrgAuthenticatedSessionLifetime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsUseOrgAuthenticatedSessionLifetimeOption { get; private set; }

        /// <summary>
        /// Whether to apply the organization&#39;s authenticated session lifetime override.
        /// </summary>
        /// <value>Whether to apply the organization&#39;s authenticated session lifetime override.</value>
        [JsonPropertyName("is_use_org_authenticated_session_lifetime")]
        public bool? IsUseOrgAuthenticatedSessionLifetime { get { return this.IsUseOrgAuthenticatedSessionLifetimeOption; } set { this.IsUseOrgAuthenticatedSessionLifetimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuthenticatedSessionLifetime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AuthenticatedSessionLifetimeOption { get; private set; }

        /// <summary>
        /// Authenticated session lifetime in seconds.
        /// </summary>
        /// <value>Authenticated session lifetime in seconds.</value>
        /* <example>86400</example> */
        [JsonPropertyName("authenticated_session_lifetime")]
        public int? AuthenticatedSessionLifetime { get { return this.AuthenticatedSessionLifetimeOption; } set { this.AuthenticatedSessionLifetimeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateOrganizationSessionsRequest {\n");
            sb.Append("  IsUseOrgSsoSessionPolicy: ").Append(IsUseOrgSsoSessionPolicy).Append("\n");
            sb.Append("  SsoSessionPersistenceMode: ").Append(SsoSessionPersistenceMode).Append("\n");
            sb.Append("  IsUseOrgAuthenticatedSessionLifetime: ").Append(IsUseOrgAuthenticatedSessionLifetime).Append("\n");
            sb.Append("  AuthenticatedSessionLifetime: ").Append(AuthenticatedSessionLifetime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateOrganizationSessionsRequest" />
    /// </summary>
    public class UpdateOrganizationSessionsRequestJsonConverter : JsonConverter<UpdateOrganizationSessionsRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateOrganizationSessionsRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateOrganizationSessionsRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isUseOrgSsoSessionPolicy = default;
            Option<UpdateOrganizationSessionsRequest.SsoSessionPersistenceModeEnum?> ssoSessionPersistenceMode = default;
            Option<bool?> isUseOrgAuthenticatedSessionLifetime = default;
            Option<int?> authenticatedSessionLifetime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "is_use_org_sso_session_policy":
                            isUseOrgSsoSessionPolicy = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sso_session_persistence_mode":
                            string? ssoSessionPersistenceModeRawValue = utf8JsonReader.GetString();
                            if (ssoSessionPersistenceModeRawValue != null)
                                ssoSessionPersistenceMode = new Option<UpdateOrganizationSessionsRequest.SsoSessionPersistenceModeEnum?>(UpdateOrganizationSessionsRequest.SsoSessionPersistenceModeEnumFromStringOrDefault(ssoSessionPersistenceModeRawValue));
                            break;
                        case "is_use_org_authenticated_session_lifetime":
                            isUseOrgAuthenticatedSessionLifetime = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "authenticated_session_lifetime":
                            authenticatedSessionLifetime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isUseOrgSsoSessionPolicy.IsSet && isUseOrgSsoSessionPolicy.Value == null)
                throw new ArgumentNullException(nameof(isUseOrgSsoSessionPolicy), "Property is not nullable for class UpdateOrganizationSessionsRequest.");

            if (ssoSessionPersistenceMode.IsSet && ssoSessionPersistenceMode.Value == null)
                throw new ArgumentNullException(nameof(ssoSessionPersistenceMode), "Property is not nullable for class UpdateOrganizationSessionsRequest.");

            if (isUseOrgAuthenticatedSessionLifetime.IsSet && isUseOrgAuthenticatedSessionLifetime.Value == null)
                throw new ArgumentNullException(nameof(isUseOrgAuthenticatedSessionLifetime), "Property is not nullable for class UpdateOrganizationSessionsRequest.");

            if (authenticatedSessionLifetime.IsSet && authenticatedSessionLifetime.Value == null)
                throw new ArgumentNullException(nameof(authenticatedSessionLifetime), "Property is not nullable for class UpdateOrganizationSessionsRequest.");

            return new UpdateOrganizationSessionsRequest(isUseOrgSsoSessionPolicy, ssoSessionPersistenceMode, isUseOrgAuthenticatedSessionLifetime, authenticatedSessionLifetime);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateOrganizationSessionsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateOrganizationSessionsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateOrganizationSessionsRequest updateOrganizationSessionsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateOrganizationSessionsRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateOrganizationSessionsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateOrganizationSessionsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateOrganizationSessionsRequest updateOrganizationSessionsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateOrganizationSessionsRequest.IsUseOrgSsoSessionPolicyOption.IsSet)
                writer.WriteBoolean("is_use_org_sso_session_policy", updateOrganizationSessionsRequest.IsUseOrgSsoSessionPolicyOption.Value!.Value);

            var ssoSessionPersistenceModeRawValue = UpdateOrganizationSessionsRequest.SsoSessionPersistenceModeEnumToJsonValue(updateOrganizationSessionsRequest.SsoSessionPersistenceModeOption.Value!.Value);
            writer.WriteString("sso_session_persistence_mode", ssoSessionPersistenceModeRawValue);
            if (updateOrganizationSessionsRequest.IsUseOrgAuthenticatedSessionLifetimeOption.IsSet)
                writer.WriteBoolean("is_use_org_authenticated_session_lifetime", updateOrganizationSessionsRequest.IsUseOrgAuthenticatedSessionLifetimeOption.Value!.Value);

            if (updateOrganizationSessionsRequest.AuthenticatedSessionLifetimeOption.IsSet)
                writer.WriteNumber("authenticated_session_lifetime", updateOrganizationSessionsRequest.AuthenticatedSessionLifetimeOption.Value!.Value);
        }
    }
}
