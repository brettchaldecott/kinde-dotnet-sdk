// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// EnvironmentVariable
    /// </summary>
    public partial class EnvironmentVariable
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentVariable" /> class.
        /// </summary>
        /// <param name="id">The unique ID for the environment variable.</param>
        /// <param name="key">The name of the environment variable.</param>
        /// <param name="value">The value of the environment variable.</param>
        /// <param name="isSecret">Whether the environment variable is sensitive.</param>
        /// <param name="createdOn">The date the environment variable was created.</param>
        [JsonConstructor]
        public EnvironmentVariable(Option<string?> id = default, Option<string?> key = default, Option<string?> value = default, Option<bool?> isSecret = default, Option<string?> createdOn = default)
        {
            IdOption = id;
            KeyOption = key;
            ValueOption = value;
            IsSecretOption = isSecret;
            CreatedOnOption = createdOn;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The unique ID for the environment variable.
        /// </summary>
        /// <value>The unique ID for the environment variable.</value>
        /* <example>env_var_0192b1941f125645fa15bf28a662a0b3</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Key
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyOption { get; private set; }

        /// <summary>
        /// The name of the environment variable.
        /// </summary>
        /// <value>The name of the environment variable.</value>
        /* <example>MY_API_KEY</example> */
        [JsonPropertyName("key")]
        public string? Key { get { return this.KeyOption; } set { this.KeyOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// The value of the environment variable.
        /// </summary>
        /// <value>The value of the environment variable.</value>
        /* <example>some-secret</example> */
        [JsonPropertyName("value")]
        public string? Value { get { return this.ValueOption; } set { this.ValueOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsSecret
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSecretOption { get; private set; }

        /// <summary>
        /// Whether the environment variable is sensitive.
        /// </summary>
        /// <value>Whether the environment variable is sensitive.</value>
        /* <example>false</example> */
        [JsonPropertyName("is_secret")]
        public bool? IsSecret { get { return this.IsSecretOption; } set { this.IsSecretOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedOnOption { get; private set; }

        /// <summary>
        /// The date the environment variable was created.
        /// </summary>
        /// <value>The date the environment variable was created.</value>
        /* <example>2021-01-01T00:00:00Z</example> */
        [JsonPropertyName("created_on")]
        public string? CreatedOn { get { return this.CreatedOnOption; } set { this.CreatedOnOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EnvironmentVariable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  IsSecret: ").Append(IsSecret).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EnvironmentVariable" />
    /// </summary>
    public class EnvironmentVariableJsonConverter : JsonConverter<EnvironmentVariable>
    {
        /// <summary>
        /// Deserializes json to <see cref="EnvironmentVariable" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EnvironmentVariable Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> key = default;
            Option<string?> value = default;
            Option<bool?> isSecret = default;
            Option<string?> createdOn = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_secret":
                            isSecret = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "created_on":
                            createdOn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EnvironmentVariable.");

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class EnvironmentVariable.");

            if (isSecret.IsSet && isSecret.Value == null)
                throw new ArgumentNullException(nameof(isSecret), "Property is not nullable for class EnvironmentVariable.");

            if (createdOn.IsSet && createdOn.Value == null)
                throw new ArgumentNullException(nameof(createdOn), "Property is not nullable for class EnvironmentVariable.");

            return new EnvironmentVariable(id, key, value, isSecret, createdOn);
        }

        /// <summary>
        /// Serializes a <see cref="EnvironmentVariable" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="environmentVariable"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EnvironmentVariable environmentVariable, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, environmentVariable, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EnvironmentVariable" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="environmentVariable"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EnvironmentVariable environmentVariable, JsonSerializerOptions jsonSerializerOptions)
        {
            if (environmentVariable.IdOption.IsSet && environmentVariable.Id == null)
                throw new ArgumentNullException(nameof(environmentVariable.Id), "Property is required for class EnvironmentVariable.");

            if (environmentVariable.KeyOption.IsSet && environmentVariable.Key == null)
                throw new ArgumentNullException(nameof(environmentVariable.Key), "Property is required for class EnvironmentVariable.");

            if (environmentVariable.CreatedOnOption.IsSet && environmentVariable.CreatedOn == null)
                throw new ArgumentNullException(nameof(environmentVariable.CreatedOn), "Property is required for class EnvironmentVariable.");

            if (environmentVariable.IdOption.IsSet)
                writer.WriteString("id", environmentVariable.Id);

            if (environmentVariable.KeyOption.IsSet)
                writer.WriteString("key", environmentVariable.Key);

            if (environmentVariable.ValueOption.IsSet)
                if (environmentVariable.ValueOption.Value != null)
                    writer.WriteString("value", environmentVariable.Value);
                else
                    writer.WriteNull("value");

            if (environmentVariable.IsSecretOption.IsSet)
                writer.WriteBoolean("is_secret", environmentVariable.IsSecretOption.Value!.Value);

            if (environmentVariable.CreatedOnOption.IsSet)
                writer.WriteString("created_on", environmentVariable.CreatedOn);
        }
    }
}
