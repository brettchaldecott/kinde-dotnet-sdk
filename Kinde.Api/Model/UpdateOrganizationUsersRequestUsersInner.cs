// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// UpdateOrganizationUsersRequestUsersInner
    /// </summary>
    public partial class UpdateOrganizationUsersRequestUsersInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateOrganizationUsersRequestUsersInner" /> class.
        /// </summary>
        /// <param name="id">The users id.</param>
        /// <param name="operation">Optional operation, set to &#39;delete&#39; to remove the user from the organization.</param>
        /// <param name="roles">Role keys to assign to the user.</param>
        /// <param name="permissions">Permission keys to assign to the user.</param>
        [JsonConstructor]
        public UpdateOrganizationUsersRequestUsersInner(Option<string?> id = default, Option<string?> operation = default, Option<List<string>?> roles = default, Option<List<string>?> permissions = default)
        {
            IdOption = id;
            OperationOption = operation;
            RolesOption = roles;
            PermissionsOption = permissions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The users id.
        /// </summary>
        /// <value>The users id.</value>
        /* <example>kp_057ee6debc624c70947b6ba512908c35</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Operation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OperationOption { get; private set; }

        /// <summary>
        /// Optional operation, set to &#39;delete&#39; to remove the user from the organization.
        /// </summary>
        /// <value>Optional operation, set to &#39;delete&#39; to remove the user from the organization.</value>
        /* <example>delete</example> */
        [JsonPropertyName("operation")]
        public string? Operation { get { return this.OperationOption; } set { this.OperationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Roles
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> RolesOption { get; private set; }

        /// <summary>
        /// Role keys to assign to the user.
        /// </summary>
        /// <value>Role keys to assign to the user.</value>
        [JsonPropertyName("roles")]
        public List<string>? Roles { get { return this.RolesOption; } set { this.RolesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Permissions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> PermissionsOption { get; private set; }

        /// <summary>
        /// Permission keys to assign to the user.
        /// </summary>
        /// <value>Permission keys to assign to the user.</value>
        [JsonPropertyName("permissions")]
        public List<string>? Permissions { get { return this.PermissionsOption; } set { this.PermissionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateOrganizationUsersRequestUsersInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateOrganizationUsersRequestUsersInner" />
    /// </summary>
    public class UpdateOrganizationUsersRequestUsersInnerJsonConverter : JsonConverter<UpdateOrganizationUsersRequestUsersInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateOrganizationUsersRequestUsersInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateOrganizationUsersRequestUsersInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> operation = default;
            Option<List<string>?> roles = default;
            Option<List<string>?> permissions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "operation":
                            operation = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "roles":
                            roles = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "permissions":
                            permissions = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UpdateOrganizationUsersRequestUsersInner.");

            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation), "Property is not nullable for class UpdateOrganizationUsersRequestUsersInner.");

            if (roles.IsSet && roles.Value == null)
                throw new ArgumentNullException(nameof(roles), "Property is not nullable for class UpdateOrganizationUsersRequestUsersInner.");

            if (permissions.IsSet && permissions.Value == null)
                throw new ArgumentNullException(nameof(permissions), "Property is not nullable for class UpdateOrganizationUsersRequestUsersInner.");

            return new UpdateOrganizationUsersRequestUsersInner(id, operation, roles, permissions);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateOrganizationUsersRequestUsersInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateOrganizationUsersRequestUsersInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateOrganizationUsersRequestUsersInner updateOrganizationUsersRequestUsersInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateOrganizationUsersRequestUsersInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateOrganizationUsersRequestUsersInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateOrganizationUsersRequestUsersInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateOrganizationUsersRequestUsersInner updateOrganizationUsersRequestUsersInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateOrganizationUsersRequestUsersInner.IdOption.IsSet && updateOrganizationUsersRequestUsersInner.Id == null)
                throw new ArgumentNullException(nameof(updateOrganizationUsersRequestUsersInner.Id), "Property is required for class UpdateOrganizationUsersRequestUsersInner.");

            if (updateOrganizationUsersRequestUsersInner.OperationOption.IsSet && updateOrganizationUsersRequestUsersInner.Operation == null)
                throw new ArgumentNullException(nameof(updateOrganizationUsersRequestUsersInner.Operation), "Property is required for class UpdateOrganizationUsersRequestUsersInner.");

            if (updateOrganizationUsersRequestUsersInner.RolesOption.IsSet && updateOrganizationUsersRequestUsersInner.Roles == null)
                throw new ArgumentNullException(nameof(updateOrganizationUsersRequestUsersInner.Roles), "Property is required for class UpdateOrganizationUsersRequestUsersInner.");

            if (updateOrganizationUsersRequestUsersInner.PermissionsOption.IsSet && updateOrganizationUsersRequestUsersInner.Permissions == null)
                throw new ArgumentNullException(nameof(updateOrganizationUsersRequestUsersInner.Permissions), "Property is required for class UpdateOrganizationUsersRequestUsersInner.");

            if (updateOrganizationUsersRequestUsersInner.IdOption.IsSet)
                writer.WriteString("id", updateOrganizationUsersRequestUsersInner.Id);

            if (updateOrganizationUsersRequestUsersInner.OperationOption.IsSet)
                writer.WriteString("operation", updateOrganizationUsersRequestUsersInner.Operation);

            if (updateOrganizationUsersRequestUsersInner.RolesOption.IsSet)
            {
                writer.WritePropertyName("roles");
                JsonSerializer.Serialize(writer, updateOrganizationUsersRequestUsersInner.Roles, jsonSerializerOptions);
            }
            if (updateOrganizationUsersRequestUsersInner.PermissionsOption.IsSet)
            {
                writer.WritePropertyName("permissions");
                JsonSerializer.Serialize(writer, updateOrganizationUsersRequestUsersInner.Permissions, jsonSerializerOptions);
            }
        }
    }
}
