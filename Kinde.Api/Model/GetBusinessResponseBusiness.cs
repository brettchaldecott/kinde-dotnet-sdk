// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    public partial class GetBusinessResponseBusiness
    {
        /// <summary>
        /// </summary>
        /// <param name="code">The unique ID for the business.</param>
        /// <param name="name">Your business&#39;s name.</param>
        /// <param name="phone">Phone number associated with business.</param>
        /// <param name="email">Email address associated with business.</param>
        /// <param name="industry">The industry your business is in.</param>
        /// <param name="timezone">The timezone your business is in.</param>
        /// <param name="privacyUrl">Your Privacy policy URL.</param>
        /// <param name="termsUrl">Your Terms and Conditions URL.</param>
        /// <param name="hasClickwrap">Whether your business uses clickwrap agreements.</param>
        /// <param name="createdOn">Date of business creation in ISO 8601 format.</param>
        [JsonConstructor]
        public GetBusinessResponseBusiness(Option<string?> code = default, Option<string?> name = default, Option<string?> phone = default, Option<string?> email = default, Option<string?> industry = default, Option<string?> timezone = default, Option<string?> privacyUrl = default, Option<string?> termsUrl = default, Option<bool?> hasClickwrap = default, Option<bool?> hasKindeBranding = default, Option<string?> createdOn = default)
        {
            CodeOption = code;
            NameOption = name;
            PhoneOption = phone;
            EmailOption = email;
            IndustryOption = industry;
            TimezoneOption = timezone;
            PrivacyUrlOption = privacyUrl;
            TermsUrlOption = termsUrl;
            HasClickwrapOption = hasClickwrap;
            HasKindeBrandingOption = hasKindeBranding;
            CreatedOnOption = createdOn;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// The unique ID for the business.
        /// </summary>
        /// <value>The unique ID for the business.</value>
        /* <example>bus_c69fb73b091</example> */
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Your business&#39;s name.
        /// </summary>
        /// <value>Your business&#39;s name.</value>
        /* <example>Tailsforce Ltd</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneOption { get; private set; }

        /// <summary>
        /// Phone number associated with business.
        /// </summary>
        /// <value>Phone number associated with business.</value>
        /* <example>555-555-5555</example> */
        [JsonPropertyName("phone")]
        public string? Phone { get { return this.PhoneOption; } set { this.PhoneOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Email address associated with business.
        /// </summary>
        /// <value>Email address associated with business.</value>
        /* <example>sally@example.com</example> */
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Industry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IndustryOption { get; private set; }

        /// <summary>
        /// The industry your business is in.
        /// </summary>
        /// <value>The industry your business is in.</value>
        /* <example>Healthcare &amp; Medical</example> */
        [JsonPropertyName("industry")]
        public string? Industry { get { return this.IndustryOption; } set { this.IndustryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timezone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TimezoneOption { get; private set; }

        /// <summary>
        /// The timezone your business is in.
        /// </summary>
        /// <value>The timezone your business is in.</value>
        /* <example>Los Angeles (Pacific Standard Time)</example> */
        [JsonPropertyName("timezone")]
        public string? Timezone { get { return this.TimezoneOption; } set { this.TimezoneOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrivacyUrlOption { get; private set; }

        /// <summary>
        /// Your Privacy policy URL.
        /// </summary>
        /// <value>Your Privacy policy URL.</value>
        /* <example>https://example.com/privacy</example> */
        [JsonPropertyName("privacy_url")]
        public string? PrivacyUrl { get { return this.PrivacyUrlOption; } set { this.PrivacyUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of TermsUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TermsUrlOption { get; private set; }

        /// <summary>
        /// Your Terms and Conditions URL.
        /// </summary>
        /// <value>Your Terms and Conditions URL.</value>
        /* <example>https://example.com/terms</example> */
        [JsonPropertyName("terms_url")]
        public string? TermsUrl { get { return this.TermsUrlOption; } set { this.TermsUrlOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasClickwrapOption { get; private set; }

        /// <summary>
        /// Whether your business uses clickwrap agreements.
        /// </summary>
        /// <value>Whether your business uses clickwrap agreements.</value>
        /* <example>false</example> */
        [JsonPropertyName("has_clickwrap")]
        public bool? HasClickwrap { get { return this.HasClickwrapOption; } set { this.HasClickwrapOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasKindeBrandingOption { get; private set; }

        /// <summary>
        /// Whether your business shows Kinde branding.
        /// </summary>
        /// <value>Whether your business shows Kinde branding.</value>
        /* <example>true</example> */
        [JsonPropertyName("has_kinde_branding")]
        public bool? HasKindeBranding { get { return this.HasKindeBrandingOption; } set { this.HasKindeBrandingOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedOnOption { get; private set; }

        /// <summary>
        /// Date of business creation in ISO 8601 format.
        /// </summary>
        /// <value>Date of business creation in ISO 8601 format.</value>
        /* <example>2021-01-01T00:00:00Z</example> */
        [JsonPropertyName("created_on")]
        public string? CreatedOn { get { return this.CreatedOnOption; } set { this.CreatedOnOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetBusinessResponseBusiness {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Industry: ").Append(Industry).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  PrivacyUrl: ").Append(PrivacyUrl).Append("\n");
            sb.Append("  TermsUrl: ").Append(TermsUrl).Append("\n");
            sb.Append("  HasClickwrap: ").Append(HasClickwrap).Append("\n");
            sb.Append("  HasKindeBranding: ").Append(HasKindeBranding).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class GetBusinessResponseBusinessJsonConverter : JsonConverter<GetBusinessResponseBusiness>
    {
        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetBusinessResponseBusiness Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> name = default;
            Option<string?> phone = default;
            Option<string?> email = default;
            Option<string?> industry = default;
            Option<string?> timezone = default;
            Option<string?> privacyUrl = default;
            Option<string?> termsUrl = default;
            Option<bool?> hasClickwrap = default;
            Option<bool?> hasKindeBranding = default;
            Option<string?> createdOn = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "phone":
                            phone = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "industry":
                            industry = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "timezone":
                            timezone = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "privacy_url":
                            privacyUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "terms_url":
                            termsUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "has_clickwrap":
                            hasClickwrap = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "has_kinde_branding":
                            hasKindeBranding = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "created_on":
                            createdOn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class GetBusinessResponseBusiness.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetBusinessResponseBusiness.");

            if (hasClickwrap.IsSet && hasClickwrap.Value == null)
                throw new ArgumentNullException(nameof(hasClickwrap), "Property is not nullable for class GetBusinessResponseBusiness.");

            if (hasKindeBranding.IsSet && hasKindeBranding.Value == null)
                throw new ArgumentNullException(nameof(hasKindeBranding), "Property is not nullable for class GetBusinessResponseBusiness.");

            if (createdOn.IsSet && createdOn.Value == null)
                throw new ArgumentNullException(nameof(createdOn), "Property is not nullable for class GetBusinessResponseBusiness.");

            return new GetBusinessResponseBusiness(code, name, phone, email, industry, timezone, privacyUrl, termsUrl, hasClickwrap, hasKindeBranding, createdOn);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, GetBusinessResponseBusiness getBusinessResponseBusiness, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getBusinessResponseBusiness, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, GetBusinessResponseBusiness getBusinessResponseBusiness, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getBusinessResponseBusiness.CodeOption.IsSet && getBusinessResponseBusiness.Code == null)
                throw new ArgumentNullException(nameof(getBusinessResponseBusiness.Code), "Property is required for class GetBusinessResponseBusiness.");

            if (getBusinessResponseBusiness.NameOption.IsSet && getBusinessResponseBusiness.Name == null)
                throw new ArgumentNullException(nameof(getBusinessResponseBusiness.Name), "Property is required for class GetBusinessResponseBusiness.");

            if (getBusinessResponseBusiness.CreatedOnOption.IsSet && getBusinessResponseBusiness.CreatedOn == null)
                throw new ArgumentNullException(nameof(getBusinessResponseBusiness.CreatedOn), "Property is required for class GetBusinessResponseBusiness.");

            if (getBusinessResponseBusiness.CodeOption.IsSet)
                writer.WriteString("code", getBusinessResponseBusiness.Code);

            if (getBusinessResponseBusiness.NameOption.IsSet)
                writer.WriteString("name", getBusinessResponseBusiness.Name);

            if (getBusinessResponseBusiness.PhoneOption.IsSet)
                if (getBusinessResponseBusiness.PhoneOption.Value != null)
                    writer.WriteString("phone", getBusinessResponseBusiness.Phone);
                else
                    writer.WriteNull("phone");

            if (getBusinessResponseBusiness.EmailOption.IsSet)
                if (getBusinessResponseBusiness.EmailOption.Value != null)
                    writer.WriteString("email", getBusinessResponseBusiness.Email);
                else
                    writer.WriteNull("email");

            if (getBusinessResponseBusiness.IndustryOption.IsSet)
                if (getBusinessResponseBusiness.IndustryOption.Value != null)
                    writer.WriteString("industry", getBusinessResponseBusiness.Industry);
                else
                    writer.WriteNull("industry");

            if (getBusinessResponseBusiness.TimezoneOption.IsSet)
                if (getBusinessResponseBusiness.TimezoneOption.Value != null)
                    writer.WriteString("timezone", getBusinessResponseBusiness.Timezone);
                else
                    writer.WriteNull("timezone");

            if (getBusinessResponseBusiness.PrivacyUrlOption.IsSet)
                if (getBusinessResponseBusiness.PrivacyUrlOption.Value != null)
                    writer.WriteString("privacy_url", getBusinessResponseBusiness.PrivacyUrl);
                else
                    writer.WriteNull("privacy_url");

            if (getBusinessResponseBusiness.TermsUrlOption.IsSet)
                if (getBusinessResponseBusiness.TermsUrlOption.Value != null)
                    writer.WriteString("terms_url", getBusinessResponseBusiness.TermsUrl);
                else
                    writer.WriteNull("terms_url");

            if (getBusinessResponseBusiness.HasClickwrapOption.IsSet)
                writer.WriteBoolean("has_clickwrap", getBusinessResponseBusiness.HasClickwrapOption.Value!.Value);

            if (getBusinessResponseBusiness.HasKindeBrandingOption.IsSet)
                writer.WriteBoolean("has_kinde_branding", getBusinessResponseBusiness.HasKindeBrandingOption.Value!.Value);

            if (getBusinessResponseBusiness.CreatedOnOption.IsSet)
                writer.WriteString("created_on", getBusinessResponseBusiness.CreatedOn);
        }
    }
}
