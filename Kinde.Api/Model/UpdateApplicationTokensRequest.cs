// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// UpdateApplicationTokensRequest
    /// </summary>
    public partial class UpdateApplicationTokensRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateApplicationTokensRequest" /> class.
        /// </summary>
        /// <param name="accessTokenLifetime">The lifetime of an access token in seconds.</param>
        /// <param name="refreshTokenLifetime">The lifetime of a refresh token in seconds.</param>
        /// <param name="idTokenLifetime">The lifetime of an ID token in seconds.</param>
        /// <param name="authenticatedSessionLifetime">The lifetime of an authenticated session in seconds.</param>
        /// <param name="isHasuraMappingEnabled">Enable or disable Hasura mapping.</param>
        [JsonConstructor]
        public UpdateApplicationTokensRequest(Option<int?> accessTokenLifetime = default, Option<int?> refreshTokenLifetime = default, Option<int?> idTokenLifetime = default, Option<int?> authenticatedSessionLifetime = default, Option<bool?> isHasuraMappingEnabled = default)
        {
            AccessTokenLifetimeOption = accessTokenLifetime;
            RefreshTokenLifetimeOption = refreshTokenLifetime;
            IdTokenLifetimeOption = idTokenLifetime;
            AuthenticatedSessionLifetimeOption = authenticatedSessionLifetime;
            IsHasuraMappingEnabledOption = isHasuraMappingEnabled;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AccessTokenLifetime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AccessTokenLifetimeOption { get; private set; }

        /// <summary>
        /// The lifetime of an access token in seconds.
        /// </summary>
        /// <value>The lifetime of an access token in seconds.</value>
        /* <example>3600</example> */
        [JsonPropertyName("access_token_lifetime")]
        public int? AccessTokenLifetime { get { return this.AccessTokenLifetimeOption; } set { this.AccessTokenLifetimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of RefreshTokenLifetime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RefreshTokenLifetimeOption { get; private set; }

        /// <summary>
        /// The lifetime of a refresh token in seconds.
        /// </summary>
        /// <value>The lifetime of a refresh token in seconds.</value>
        /* <example>86400</example> */
        [JsonPropertyName("refresh_token_lifetime")]
        public int? RefreshTokenLifetime { get { return this.RefreshTokenLifetimeOption; } set { this.RefreshTokenLifetimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdTokenLifetime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdTokenLifetimeOption { get; private set; }

        /// <summary>
        /// The lifetime of an ID token in seconds.
        /// </summary>
        /// <value>The lifetime of an ID token in seconds.</value>
        /* <example>3600</example> */
        [JsonPropertyName("id_token_lifetime")]
        public int? IdTokenLifetime { get { return this.IdTokenLifetimeOption; } set { this.IdTokenLifetimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuthenticatedSessionLifetime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AuthenticatedSessionLifetimeOption { get; private set; }

        /// <summary>
        /// The lifetime of an authenticated session in seconds.
        /// </summary>
        /// <value>The lifetime of an authenticated session in seconds.</value>
        /* <example>86400</example> */
        [JsonPropertyName("authenticated_session_lifetime")]
        public int? AuthenticatedSessionLifetime { get { return this.AuthenticatedSessionLifetimeOption; } set { this.AuthenticatedSessionLifetimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsHasuraMappingEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsHasuraMappingEnabledOption { get; private set; }

        /// <summary>
        /// Enable or disable Hasura mapping.
        /// </summary>
        /// <value>Enable or disable Hasura mapping.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_hasura_mapping_enabled")]
        public bool? IsHasuraMappingEnabled { get { return this.IsHasuraMappingEnabledOption; } set { this.IsHasuraMappingEnabledOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateApplicationTokensRequest {\n");
            sb.Append("  AccessTokenLifetime: ").Append(AccessTokenLifetime).Append("\n");
            sb.Append("  RefreshTokenLifetime: ").Append(RefreshTokenLifetime).Append("\n");
            sb.Append("  IdTokenLifetime: ").Append(IdTokenLifetime).Append("\n");
            sb.Append("  AuthenticatedSessionLifetime: ").Append(AuthenticatedSessionLifetime).Append("\n");
            sb.Append("  IsHasuraMappingEnabled: ").Append(IsHasuraMappingEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateApplicationTokensRequest" />
    /// </summary>
    public class UpdateApplicationTokensRequestJsonConverter : JsonConverter<UpdateApplicationTokensRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateApplicationTokensRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateApplicationTokensRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> accessTokenLifetime = default;
            Option<int?> refreshTokenLifetime = default;
            Option<int?> idTokenLifetime = default;
            Option<int?> authenticatedSessionLifetime = default;
            Option<bool?> isHasuraMappingEnabled = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "access_token_lifetime":
                            accessTokenLifetime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "refresh_token_lifetime":
                            refreshTokenLifetime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "id_token_lifetime":
                            idTokenLifetime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "authenticated_session_lifetime":
                            authenticatedSessionLifetime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_hasura_mapping_enabled":
                            isHasuraMappingEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accessTokenLifetime.IsSet && accessTokenLifetime.Value == null)
                throw new ArgumentNullException(nameof(accessTokenLifetime), "Property is not nullable for class UpdateApplicationTokensRequest.");

            if (refreshTokenLifetime.IsSet && refreshTokenLifetime.Value == null)
                throw new ArgumentNullException(nameof(refreshTokenLifetime), "Property is not nullable for class UpdateApplicationTokensRequest.");

            if (idTokenLifetime.IsSet && idTokenLifetime.Value == null)
                throw new ArgumentNullException(nameof(idTokenLifetime), "Property is not nullable for class UpdateApplicationTokensRequest.");

            if (authenticatedSessionLifetime.IsSet && authenticatedSessionLifetime.Value == null)
                throw new ArgumentNullException(nameof(authenticatedSessionLifetime), "Property is not nullable for class UpdateApplicationTokensRequest.");

            if (isHasuraMappingEnabled.IsSet && isHasuraMappingEnabled.Value == null)
                throw new ArgumentNullException(nameof(isHasuraMappingEnabled), "Property is not nullable for class UpdateApplicationTokensRequest.");

            return new UpdateApplicationTokensRequest(accessTokenLifetime, refreshTokenLifetime, idTokenLifetime, authenticatedSessionLifetime, isHasuraMappingEnabled);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateApplicationTokensRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateApplicationTokensRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateApplicationTokensRequest updateApplicationTokensRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateApplicationTokensRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateApplicationTokensRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateApplicationTokensRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateApplicationTokensRequest updateApplicationTokensRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateApplicationTokensRequest.AccessTokenLifetimeOption.IsSet)
                writer.WriteNumber("access_token_lifetime", updateApplicationTokensRequest.AccessTokenLifetimeOption.Value!.Value);

            if (updateApplicationTokensRequest.RefreshTokenLifetimeOption.IsSet)
                writer.WriteNumber("refresh_token_lifetime", updateApplicationTokensRequest.RefreshTokenLifetimeOption.Value!.Value);

            if (updateApplicationTokensRequest.IdTokenLifetimeOption.IsSet)
                writer.WriteNumber("id_token_lifetime", updateApplicationTokensRequest.IdTokenLifetimeOption.Value!.Value);

            if (updateApplicationTokensRequest.AuthenticatedSessionLifetimeOption.IsSet)
                writer.WriteNumber("authenticated_session_lifetime", updateApplicationTokensRequest.AuthenticatedSessionLifetimeOption.Value!.Value);

            if (updateApplicationTokensRequest.IsHasuraMappingEnabledOption.IsSet)
                writer.WriteBoolean("is_hasura_mapping_enabled", updateApplicationTokensRequest.IsHasuraMappingEnabledOption.Value!.Value);
        }
    }
}
