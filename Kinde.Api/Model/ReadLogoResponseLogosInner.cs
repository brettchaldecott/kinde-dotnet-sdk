// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// ReadLogoResponseLogosInner
    /// </summary>
    public partial class ReadLogoResponseLogosInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReadLogoResponseLogosInner" /> class.
        /// </summary>
        /// <param name="type">The type of logo (light or dark).</param>
        /// <param name="fileName">The name of the logo file.</param>
        /// <param name="path">The relative path to the logo file.</param>
        [JsonConstructor]
        public ReadLogoResponseLogosInner(Option<string?> type = default, Option<string?> fileName = default, Option<string?> path = default)
        {
            TypeOption = type;
            FileNameOption = fileName;
            PathOption = path;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// The type of logo (light or dark).
        /// </summary>
        /// <value>The type of logo (light or dark).</value>
        /* <example>light</example> */
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FileName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FileNameOption { get; private set; }

        /// <summary>
        /// The name of the logo file.
        /// </summary>
        /// <value>The name of the logo file.</value>
        /* <example>kinde_light.jpeg</example> */
        [JsonPropertyName("file_name")]
        public string? FileName { get { return this.FileNameOption; } set { this.FileNameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// The relative path to the logo file.
        /// </summary>
        /// <value>The relative path to the logo file.</value>
        /* <example>/logo?p_org_code&#x3D;org_1767f11ce62</example> */
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReadLogoResponseLogosInner {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReadLogoResponseLogosInner" />
    /// </summary>
    public class ReadLogoResponseLogosInnerJsonConverter : JsonConverter<ReadLogoResponseLogosInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReadLogoResponseLogosInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReadLogoResponseLogosInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;
            Option<string?> fileName = default;
            Option<string?> path = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "file_name":
                            fileName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ReadLogoResponseLogosInner.");

            if (fileName.IsSet && fileName.Value == null)
                throw new ArgumentNullException(nameof(fileName), "Property is not nullable for class ReadLogoResponseLogosInner.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class ReadLogoResponseLogosInner.");

            return new ReadLogoResponseLogosInner(type, fileName, path);
        }

        /// <summary>
        /// Serializes a <see cref="ReadLogoResponseLogosInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="readLogoResponseLogosInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReadLogoResponseLogosInner readLogoResponseLogosInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, readLogoResponseLogosInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReadLogoResponseLogosInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="readLogoResponseLogosInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReadLogoResponseLogosInner readLogoResponseLogosInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (readLogoResponseLogosInner.TypeOption.IsSet && readLogoResponseLogosInner.Type == null)
                throw new ArgumentNullException(nameof(readLogoResponseLogosInner.Type), "Property is required for class ReadLogoResponseLogosInner.");

            if (readLogoResponseLogosInner.FileNameOption.IsSet && readLogoResponseLogosInner.FileName == null)
                throw new ArgumentNullException(nameof(readLogoResponseLogosInner.FileName), "Property is required for class ReadLogoResponseLogosInner.");

            if (readLogoResponseLogosInner.PathOption.IsSet && readLogoResponseLogosInner.Path == null)
                throw new ArgumentNullException(nameof(readLogoResponseLogosInner.Path), "Property is required for class ReadLogoResponseLogosInner.");

            if (readLogoResponseLogosInner.TypeOption.IsSet)
                writer.WriteString("type", readLogoResponseLogosInner.Type);

            if (readLogoResponseLogosInner.FileNameOption.IsSet)
                writer.WriteString("file_name", readLogoResponseLogosInner.FileName);

            if (readLogoResponseLogosInner.PathOption.IsSet)
                writer.WriteString("path", readLogoResponseLogosInner.Path);
        }
    }
}
