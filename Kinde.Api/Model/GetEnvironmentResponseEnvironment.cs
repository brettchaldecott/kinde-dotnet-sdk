// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetEnvironmentResponseEnvironment
    /// </summary>
    public partial class GetEnvironmentResponseEnvironment
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEnvironmentResponseEnvironment" /> class.
        /// </summary>
        /// <param name="code">The unique identifier for the environment.</param>
        /// <param name="name">The environment&#39;s name.</param>
        /// <param name="hotjarSiteId">Your HotJar site ID.</param>
        /// <param name="googleAnalyticsTag">Your Google Analytics tag.</param>
        /// <param name="isDefault">Whether the environment is the default. Typically this is your production environment.</param>
        /// <param name="isLive">Whether the environment is live.</param>
        /// <param name="kindeDomain">Your domain on Kinde</param>
        /// <param name="customDomain">Your custom domain for the environment</param>
        /// <param name="logo">The organization&#39;s logo URL.</param>
        /// <param name="logoDark">The organization&#39;s logo URL to be used for dark themes.</param>
        /// <param name="faviconSvg">The organization&#39;s SVG favicon URL. Optimal format for most browsers</param>
        /// <param name="faviconFallback">The favicon URL to be used as a fallback in browsers that don&#39;t support SVG, add a PNG</param>
        /// <param name="linkColor">linkColor</param>
        /// <param name="backgroundColor">backgroundColor</param>
        /// <param name="buttonColor">buttonColor</param>
        /// <param name="buttonTextColor">buttonTextColor</param>
        /// <param name="linkColorDark">linkColorDark</param>
        /// <param name="backgroundColorDark">backgroundColorDark</param>
        /// <param name="buttonTextColorDark">buttonTextColorDark</param>
        /// <param name="buttonColorDark">buttonColorDark</param>
        /// <param name="buttonBorderRadius">The border radius for buttons. Value is px, Kinde transforms to rem for rendering</param>
        /// <param name="cardBorderRadius">The border radius for cards. Value is px, Kinde transforms to rem for rendering</param>
        /// <param name="inputBorderRadius">The border radius for inputs. Value is px, Kinde transforms to rem for rendering</param>
        /// <param name="themeCode">Whether the environment is forced into light mode, dark mode or user preference</param>
        /// <param name="colorScheme">The color scheme for the environment used for meta tags based on the theme code</param>
        /// <param name="createdOn">Date of environment creation in ISO 8601 format.</param>
        [JsonConstructor]
        public GetEnvironmentResponseEnvironment(Option<string?> code = default, Option<string?> name = default, Option<string?> hotjarSiteId = default, Option<string?> googleAnalyticsTag = default, Option<bool?> isDefault = default, Option<bool?> isLive = default, Option<string?> kindeDomain = default, Option<string?> customDomain = default, Option<string?> logo = default, Option<string?> logoDark = default, Option<string?> faviconSvg = default, Option<string?> faviconFallback = default, Option<GetEnvironmentResponseEnvironmentLinkColor?> linkColor = default, Option<GetEnvironmentResponseEnvironmentBackgroundColor?> backgroundColor = default, Option<GetEnvironmentResponseEnvironmentLinkColor?> buttonColor = default, Option<GetEnvironmentResponseEnvironmentBackgroundColor?> buttonTextColor = default, Option<GetEnvironmentResponseEnvironmentLinkColor?> linkColorDark = default, Option<GetEnvironmentResponseEnvironmentLinkColor?> backgroundColorDark = default, Option<GetEnvironmentResponseEnvironmentLinkColor?> buttonTextColorDark = default, Option<GetEnvironmentResponseEnvironmentLinkColor?> buttonColorDark = default, Option<int?> buttonBorderRadius = default, Option<int?> cardBorderRadius = default, Option<int?> inputBorderRadius = default, Option<ThemeCodeEnum?> themeCode = default, Option<ColorSchemeEnum?> colorScheme = default, Option<string?> createdOn = default)
        {
            CodeOption = code;
            NameOption = name;
            HotjarSiteIdOption = hotjarSiteId;
            GoogleAnalyticsTagOption = googleAnalyticsTag;
            IsDefaultOption = isDefault;
            IsLiveOption = isLive;
            KindeDomainOption = kindeDomain;
            CustomDomainOption = customDomain;
            LogoOption = logo;
            LogoDarkOption = logoDark;
            FaviconSvgOption = faviconSvg;
            FaviconFallbackOption = faviconFallback;
            LinkColorOption = linkColor;
            BackgroundColorOption = backgroundColor;
            ButtonColorOption = buttonColor;
            ButtonTextColorOption = buttonTextColor;
            LinkColorDarkOption = linkColorDark;
            BackgroundColorDarkOption = backgroundColorDark;
            ButtonTextColorDarkOption = buttonTextColorDark;
            ButtonColorDarkOption = buttonColorDark;
            ButtonBorderRadiusOption = buttonBorderRadius;
            CardBorderRadiusOption = cardBorderRadius;
            InputBorderRadiusOption = inputBorderRadius;
            ThemeCodeOption = themeCode;
            ColorSchemeOption = colorScheme;
            CreatedOnOption = createdOn;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Whether the environment is forced into light mode, dark mode or user preference
        /// </summary>
        /// <value>Whether the environment is forced into light mode, dark mode or user preference</value>
        public enum ThemeCodeEnum
        {
            /// <summary>
            /// Enum Light for value: light
            /// </summary>
            Light = 1,

            /// <summary>
            /// Enum Dark for value: dark
            /// </summary>
            Dark = 2,

            /// <summary>
            /// Enum UserPreference for value: user_preference
            /// </summary>
            UserPreference = 3
        }

        /// <summary>
        /// Returns a <see cref="ThemeCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ThemeCodeEnum ThemeCodeEnumFromString(string value)
        {
            if (value.Equals("light"))
                return ThemeCodeEnum.Light;

            if (value.Equals("dark"))
                return ThemeCodeEnum.Dark;

            if (value.Equals("user_preference"))
                return ThemeCodeEnum.UserPreference;

            throw new NotImplementedException($"Could not convert value to type ThemeCodeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ThemeCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ThemeCodeEnum? ThemeCodeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("light"))
                return ThemeCodeEnum.Light;

            if (value.Equals("dark"))
                return ThemeCodeEnum.Dark;

            if (value.Equals("user_preference"))
                return ThemeCodeEnum.UserPreference;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ThemeCodeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ThemeCodeEnumToJsonValue(ThemeCodeEnum? value)
        {
            if (value == ThemeCodeEnum.Light)
                return "light";

            if (value == ThemeCodeEnum.Dark)
                return "dark";

            if (value == ThemeCodeEnum.UserPreference)
                return "user_preference";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ThemeCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThemeCodeEnum?> ThemeCodeOption { get; private set; }

        /// <summary>
        /// Whether the environment is forced into light mode, dark mode or user preference
        /// </summary>
        /// <value>Whether the environment is forced into light mode, dark mode or user preference</value>
        [JsonPropertyName("theme_code")]
        public ThemeCodeEnum? ThemeCode { get { return this.ThemeCodeOption; } set { this.ThemeCodeOption = new Option<ThemeCodeEnum?>(value); } }

        /// <summary>
        /// The color scheme for the environment used for meta tags based on the theme code
        /// </summary>
        /// <value>The color scheme for the environment used for meta tags based on the theme code</value>
        public enum ColorSchemeEnum
        {
            /// <summary>
            /// Enum Light for value: light
            /// </summary>
            Light = 1,

            /// <summary>
            /// Enum Dark for value: dark
            /// </summary>
            Dark = 2,

            /// <summary>
            /// Enum LightDark for value: light dark
            /// </summary>
            LightDark = 3
        }

        /// <summary>
        /// Returns a <see cref="ColorSchemeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ColorSchemeEnum ColorSchemeEnumFromString(string value)
        {
            if (value.Equals("light"))
                return ColorSchemeEnum.Light;

            if (value.Equals("dark"))
                return ColorSchemeEnum.Dark;

            if (value.Equals("light dark"))
                return ColorSchemeEnum.LightDark;

            throw new NotImplementedException($"Could not convert value to type ColorSchemeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ColorSchemeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ColorSchemeEnum? ColorSchemeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("light"))
                return ColorSchemeEnum.Light;

            if (value.Equals("dark"))
                return ColorSchemeEnum.Dark;

            if (value.Equals("light dark"))
                return ColorSchemeEnum.LightDark;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ColorSchemeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ColorSchemeEnumToJsonValue(ColorSchemeEnum? value)
        {
            if (value == ColorSchemeEnum.Light)
                return "light";

            if (value == ColorSchemeEnum.Dark)
                return "dark";

            if (value == ColorSchemeEnum.LightDark)
                return "light dark";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ColorScheme
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ColorSchemeEnum?> ColorSchemeOption { get; private set; }

        /// <summary>
        /// The color scheme for the environment used for meta tags based on the theme code
        /// </summary>
        /// <value>The color scheme for the environment used for meta tags based on the theme code</value>
        [JsonPropertyName("color_scheme")]
        public ColorSchemeEnum? ColorScheme { get { return this.ColorSchemeOption; } set { this.ColorSchemeOption = new Option<ColorSchemeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// The unique identifier for the environment.
        /// </summary>
        /// <value>The unique identifier for the environment.</value>
        /* <example>production</example> */
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The environment&#39;s name.
        /// </summary>
        /// <value>The environment&#39;s name.</value>
        /* <example>Production</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of HotjarSiteId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HotjarSiteIdOption { get; private set; }

        /// <summary>
        /// Your HotJar site ID.
        /// </summary>
        /// <value>Your HotJar site ID.</value>
        /* <example>404009</example> */
        [JsonPropertyName("hotjar_site_id")]
        public string? HotjarSiteId { get { return this.HotjarSiteIdOption; } set { this.HotjarSiteIdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of GoogleAnalyticsTag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GoogleAnalyticsTagOption { get; private set; }

        /// <summary>
        /// Your Google Analytics tag.
        /// </summary>
        /// <value>Your Google Analytics tag.</value>
        /* <example>G-1234567</example> */
        [JsonPropertyName("google_analytics_tag")]
        public string? GoogleAnalyticsTag { get { return this.GoogleAnalyticsTagOption; } set { this.GoogleAnalyticsTagOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsDefault
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDefaultOption { get; private set; }

        /// <summary>
        /// Whether the environment is the default. Typically this is your production environment.
        /// </summary>
        /// <value>Whether the environment is the default. Typically this is your production environment.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_default")]
        public bool? IsDefault { get { return this.IsDefaultOption; } set { this.IsDefaultOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsLive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsLiveOption { get; private set; }

        /// <summary>
        /// Whether the environment is live.
        /// </summary>
        /// <value>Whether the environment is live.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_live")]
        public bool? IsLive { get { return this.IsLiveOption; } set { this.IsLiveOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of KindeDomain
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KindeDomainOption { get; private set; }

        /// <summary>
        /// Your domain on Kinde
        /// </summary>
        /// <value>Your domain on Kinde</value>
        /* <example>example.kinde.com</example> */
        [JsonPropertyName("kinde_domain")]
        public string? KindeDomain { get { return this.KindeDomainOption; } set { this.KindeDomainOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of CustomDomain
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CustomDomainOption { get; private set; }

        /// <summary>
        /// Your custom domain for the environment
        /// </summary>
        /// <value>Your custom domain for the environment</value>
        /* <example>app.example.com</example> */
        [JsonPropertyName("custom_domain")]
        public string? CustomDomain { get { return this.CustomDomainOption; } set { this.CustomDomainOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Logo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LogoOption { get; private set; }

        /// <summary>
        /// The organization&#39;s logo URL.
        /// </summary>
        /// <value>The organization&#39;s logo URL.</value>
        /* <example>https://yoursubdomain.kinde.com/logo?org_code&#x3D;org_1ccfb819462&amp;cache&#x3D;311308b8ad3544bf8e572979f0e5748d</example> */
        [JsonPropertyName("logo")]
        public string? Logo { get { return this.LogoOption; } set { this.LogoOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of LogoDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LogoDarkOption { get; private set; }

        /// <summary>
        /// The organization&#39;s logo URL to be used for dark themes.
        /// </summary>
        /// <value>The organization&#39;s logo URL to be used for dark themes.</value>
        /* <example>https://yoursubdomain.kinde.com/logo_dark?org_code&#x3D;org_1ccfb819462&amp;cache&#x3D;311308b8ad3544bf8e572979f0e5748d</example> */
        [JsonPropertyName("logo_dark")]
        public string? LogoDark { get { return this.LogoDarkOption; } set { this.LogoDarkOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FaviconSvg
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FaviconSvgOption { get; private set; }

        /// <summary>
        /// The organization&#39;s SVG favicon URL. Optimal format for most browsers
        /// </summary>
        /// <value>The organization&#39;s SVG favicon URL. Optimal format for most browsers</value>
        /* <example>https://yoursubdomain.kinde.com/favicon_svg?org_code&#x3D;org_1ccfb819462&amp;cache&#x3D;311308b8ad3544bf8e572979f0e5748d</example> */
        [JsonPropertyName("favicon_svg")]
        public string? FaviconSvg { get { return this.FaviconSvgOption; } set { this.FaviconSvgOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of FaviconFallback
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FaviconFallbackOption { get; private set; }

        /// <summary>
        /// The favicon URL to be used as a fallback in browsers that don&#39;t support SVG, add a PNG
        /// </summary>
        /// <value>The favicon URL to be used as a fallback in browsers that don&#39;t support SVG, add a PNG</value>
        /* <example>https://yoursubdomain.kinde.com/favicon_fallback?org_code&#x3D;org_1ccfb819462&amp;cache&#x3D;311308b8ad3544bf8e572979f0e5748d</example> */
        [JsonPropertyName("favicon_fallback")]
        public string? FaviconFallback { get { return this.FaviconFallbackOption; } set { this.FaviconFallbackOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of LinkColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentLinkColor?> LinkColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets LinkColor
        /// </summary>
        [JsonPropertyName("link_color")]
        public GetEnvironmentResponseEnvironmentLinkColor? LinkColor { get { return this.LinkColorOption; } set { this.LinkColorOption = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(value); } }

        /// <summary>
        /// Used to track the state of BackgroundColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentBackgroundColor?> BackgroundColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets BackgroundColor
        /// </summary>
        [JsonPropertyName("background_color")]
        public GetEnvironmentResponseEnvironmentBackgroundColor? BackgroundColor { get { return this.BackgroundColorOption; } set { this.BackgroundColorOption = new Option<GetEnvironmentResponseEnvironmentBackgroundColor?>(value); } }

        /// <summary>
        /// Used to track the state of ButtonColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentLinkColor?> ButtonColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets ButtonColor
        /// </summary>
        [JsonPropertyName("button_color")]
        public GetEnvironmentResponseEnvironmentLinkColor? ButtonColor { get { return this.ButtonColorOption; } set { this.ButtonColorOption = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(value); } }

        /// <summary>
        /// Used to track the state of ButtonTextColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentBackgroundColor?> ButtonTextColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets ButtonTextColor
        /// </summary>
        [JsonPropertyName("button_text_color")]
        public GetEnvironmentResponseEnvironmentBackgroundColor? ButtonTextColor { get { return this.ButtonTextColorOption; } set { this.ButtonTextColorOption = new Option<GetEnvironmentResponseEnvironmentBackgroundColor?>(value); } }

        /// <summary>
        /// Used to track the state of LinkColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentLinkColor?> LinkColorDarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets LinkColorDark
        /// </summary>
        [JsonPropertyName("link_color_dark")]
        public GetEnvironmentResponseEnvironmentLinkColor? LinkColorDark { get { return this.LinkColorDarkOption; } set { this.LinkColorDarkOption = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(value); } }

        /// <summary>
        /// Used to track the state of BackgroundColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentLinkColor?> BackgroundColorDarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets BackgroundColorDark
        /// </summary>
        [JsonPropertyName("background_color_dark")]
        public GetEnvironmentResponseEnvironmentLinkColor? BackgroundColorDark { get { return this.BackgroundColorDarkOption; } set { this.BackgroundColorDarkOption = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(value); } }

        /// <summary>
        /// Used to track the state of ButtonTextColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentLinkColor?> ButtonTextColorDarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets ButtonTextColorDark
        /// </summary>
        [JsonPropertyName("button_text_color_dark")]
        public GetEnvironmentResponseEnvironmentLinkColor? ButtonTextColorDark { get { return this.ButtonTextColorDarkOption; } set { this.ButtonTextColorDarkOption = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(value); } }

        /// <summary>
        /// Used to track the state of ButtonColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentLinkColor?> ButtonColorDarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets ButtonColorDark
        /// </summary>
        [JsonPropertyName("button_color_dark")]
        public GetEnvironmentResponseEnvironmentLinkColor? ButtonColorDark { get { return this.ButtonColorDarkOption; } set { this.ButtonColorDarkOption = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(value); } }

        /// <summary>
        /// Used to track the state of ButtonBorderRadius
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ButtonBorderRadiusOption { get; private set; }

        /// <summary>
        /// The border radius for buttons. Value is px, Kinde transforms to rem for rendering
        /// </summary>
        /// <value>The border radius for buttons. Value is px, Kinde transforms to rem for rendering</value>
        /* <example>8</example> */
        [JsonPropertyName("button_border_radius")]
        public int? ButtonBorderRadius { get { return this.ButtonBorderRadiusOption; } set { this.ButtonBorderRadiusOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of CardBorderRadius
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CardBorderRadiusOption { get; private set; }

        /// <summary>
        /// The border radius for cards. Value is px, Kinde transforms to rem for rendering
        /// </summary>
        /// <value>The border radius for cards. Value is px, Kinde transforms to rem for rendering</value>
        /* <example>16</example> */
        [JsonPropertyName("card_border_radius")]
        public int? CardBorderRadius { get { return this.CardBorderRadiusOption; } set { this.CardBorderRadiusOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of InputBorderRadius
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InputBorderRadiusOption { get; private set; }

        /// <summary>
        /// The border radius for inputs. Value is px, Kinde transforms to rem for rendering
        /// </summary>
        /// <value>The border radius for inputs. Value is px, Kinde transforms to rem for rendering</value>
        /* <example>4</example> */
        [JsonPropertyName("input_border_radius")]
        public int? InputBorderRadius { get { return this.InputBorderRadiusOption; } set { this.InputBorderRadiusOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedOnOption { get; private set; }

        /// <summary>
        /// Date of environment creation in ISO 8601 format.
        /// </summary>
        /// <value>Date of environment creation in ISO 8601 format.</value>
        /* <example>2021-01-01T00:00:00Z</example> */
        [JsonPropertyName("created_on")]
        public string? CreatedOn { get { return this.CreatedOnOption; } set { this.CreatedOnOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEnvironmentResponseEnvironment {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HotjarSiteId: ").Append(HotjarSiteId).Append("\n");
            sb.Append("  GoogleAnalyticsTag: ").Append(GoogleAnalyticsTag).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  IsLive: ").Append(IsLive).Append("\n");
            sb.Append("  KindeDomain: ").Append(KindeDomain).Append("\n");
            sb.Append("  CustomDomain: ").Append(CustomDomain).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  LogoDark: ").Append(LogoDark).Append("\n");
            sb.Append("  FaviconSvg: ").Append(FaviconSvg).Append("\n");
            sb.Append("  FaviconFallback: ").Append(FaviconFallback).Append("\n");
            sb.Append("  LinkColor: ").Append(LinkColor).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  ButtonColor: ").Append(ButtonColor).Append("\n");
            sb.Append("  ButtonTextColor: ").Append(ButtonTextColor).Append("\n");
            sb.Append("  LinkColorDark: ").Append(LinkColorDark).Append("\n");
            sb.Append("  BackgroundColorDark: ").Append(BackgroundColorDark).Append("\n");
            sb.Append("  ButtonTextColorDark: ").Append(ButtonTextColorDark).Append("\n");
            sb.Append("  ButtonColorDark: ").Append(ButtonColorDark).Append("\n");
            sb.Append("  ButtonBorderRadius: ").Append(ButtonBorderRadius).Append("\n");
            sb.Append("  CardBorderRadius: ").Append(CardBorderRadius).Append("\n");
            sb.Append("  InputBorderRadius: ").Append(InputBorderRadius).Append("\n");
            sb.Append("  ThemeCode: ").Append(ThemeCode).Append("\n");
            sb.Append("  ColorScheme: ").Append(ColorScheme).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetEnvironmentResponseEnvironment" />
    /// </summary>
    public class GetEnvironmentResponseEnvironmentJsonConverter : JsonConverter<GetEnvironmentResponseEnvironment>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetEnvironmentResponseEnvironment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetEnvironmentResponseEnvironment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> name = default;
            Option<string?> hotjarSiteId = default;
            Option<string?> googleAnalyticsTag = default;
            Option<bool?> isDefault = default;
            Option<bool?> isLive = default;
            Option<string?> kindeDomain = default;
            Option<string?> customDomain = default;
            Option<string?> logo = default;
            Option<string?> logoDark = default;
            Option<string?> faviconSvg = default;
            Option<string?> faviconFallback = default;
            Option<GetEnvironmentResponseEnvironmentLinkColor?> linkColor = default;
            Option<GetEnvironmentResponseEnvironmentBackgroundColor?> backgroundColor = default;
            Option<GetEnvironmentResponseEnvironmentLinkColor?> buttonColor = default;
            Option<GetEnvironmentResponseEnvironmentBackgroundColor?> buttonTextColor = default;
            Option<GetEnvironmentResponseEnvironmentLinkColor?> linkColorDark = default;
            Option<GetEnvironmentResponseEnvironmentLinkColor?> backgroundColorDark = default;
            Option<GetEnvironmentResponseEnvironmentLinkColor?> buttonTextColorDark = default;
            Option<GetEnvironmentResponseEnvironmentLinkColor?> buttonColorDark = default;
            Option<int?> buttonBorderRadius = default;
            Option<int?> cardBorderRadius = default;
            Option<int?> inputBorderRadius = default;
            Option<GetEnvironmentResponseEnvironment.ThemeCodeEnum?> themeCode = default;
            Option<GetEnvironmentResponseEnvironment.ColorSchemeEnum?> colorScheme = default;
            Option<string?> createdOn = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hotjar_site_id":
                            hotjarSiteId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "google_analytics_tag":
                            googleAnalyticsTag = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_default":
                            isDefault = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_live":
                            isLive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "kinde_domain":
                            kindeDomain = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "custom_domain":
                            customDomain = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "logo":
                            logo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "logo_dark":
                            logoDark = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "favicon_svg":
                            faviconSvg = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "favicon_fallback":
                            faviconFallback = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "link_color":
                            linkColor = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentLinkColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "background_color":
                            backgroundColor = new Option<GetEnvironmentResponseEnvironmentBackgroundColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentBackgroundColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "button_color":
                            buttonColor = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentLinkColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "button_text_color":
                            buttonTextColor = new Option<GetEnvironmentResponseEnvironmentBackgroundColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentBackgroundColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "link_color_dark":
                            linkColorDark = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentLinkColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "background_color_dark":
                            backgroundColorDark = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentLinkColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "button_text_color_dark":
                            buttonTextColorDark = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentLinkColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "button_color_dark":
                            buttonColorDark = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentLinkColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "button_border_radius":
                            buttonBorderRadius = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "card_border_radius":
                            cardBorderRadius = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "input_border_radius":
                            inputBorderRadius = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "theme_code":
                            string? themeCodeRawValue = utf8JsonReader.GetString();
                            if (themeCodeRawValue != null)
                                themeCode = new Option<GetEnvironmentResponseEnvironment.ThemeCodeEnum?>(GetEnvironmentResponseEnvironment.ThemeCodeEnumFromStringOrDefault(themeCodeRawValue));
                            break;
                        case "color_scheme":
                            string? colorSchemeRawValue = utf8JsonReader.GetString();
                            if (colorSchemeRawValue != null)
                                colorScheme = new Option<GetEnvironmentResponseEnvironment.ColorSchemeEnum?>(GetEnvironmentResponseEnvironment.ColorSchemeEnumFromStringOrDefault(colorSchemeRawValue));
                            break;
                        case "created_on":
                            createdOn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class GetEnvironmentResponseEnvironment.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetEnvironmentResponseEnvironment.");

            if (isDefault.IsSet && isDefault.Value == null)
                throw new ArgumentNullException(nameof(isDefault), "Property is not nullable for class GetEnvironmentResponseEnvironment.");

            if (isLive.IsSet && isLive.Value == null)
                throw new ArgumentNullException(nameof(isLive), "Property is not nullable for class GetEnvironmentResponseEnvironment.");

            if (kindeDomain.IsSet && kindeDomain.Value == null)
                throw new ArgumentNullException(nameof(kindeDomain), "Property is not nullable for class GetEnvironmentResponseEnvironment.");

            if (themeCode.IsSet && themeCode.Value == null)
                throw new ArgumentNullException(nameof(themeCode), "Property is not nullable for class GetEnvironmentResponseEnvironment.");

            if (colorScheme.IsSet && colorScheme.Value == null)
                throw new ArgumentNullException(nameof(colorScheme), "Property is not nullable for class GetEnvironmentResponseEnvironment.");

            if (createdOn.IsSet && createdOn.Value == null)
                throw new ArgumentNullException(nameof(createdOn), "Property is not nullable for class GetEnvironmentResponseEnvironment.");

            return new GetEnvironmentResponseEnvironment(code, name, hotjarSiteId, googleAnalyticsTag, isDefault, isLive, kindeDomain, customDomain, logo, logoDark, faviconSvg, faviconFallback, linkColor, backgroundColor, buttonColor, buttonTextColor, linkColorDark, backgroundColorDark, buttonTextColorDark, buttonColorDark, buttonBorderRadius, cardBorderRadius, inputBorderRadius, themeCode, colorScheme, createdOn);
        }

        /// <summary>
        /// Serializes a <see cref="GetEnvironmentResponseEnvironment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEnvironmentResponseEnvironment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetEnvironmentResponseEnvironment getEnvironmentResponseEnvironment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getEnvironmentResponseEnvironment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetEnvironmentResponseEnvironment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEnvironmentResponseEnvironment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetEnvironmentResponseEnvironment getEnvironmentResponseEnvironment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getEnvironmentResponseEnvironment.CodeOption.IsSet && getEnvironmentResponseEnvironment.Code == null)
                throw new ArgumentNullException(nameof(getEnvironmentResponseEnvironment.Code), "Property is required for class GetEnvironmentResponseEnvironment.");

            if (getEnvironmentResponseEnvironment.NameOption.IsSet && getEnvironmentResponseEnvironment.Name == null)
                throw new ArgumentNullException(nameof(getEnvironmentResponseEnvironment.Name), "Property is required for class GetEnvironmentResponseEnvironment.");

            if (getEnvironmentResponseEnvironment.KindeDomainOption.IsSet && getEnvironmentResponseEnvironment.KindeDomain == null)
                throw new ArgumentNullException(nameof(getEnvironmentResponseEnvironment.KindeDomain), "Property is required for class GetEnvironmentResponseEnvironment.");

            if (getEnvironmentResponseEnvironment.CreatedOnOption.IsSet && getEnvironmentResponseEnvironment.CreatedOn == null)
                throw new ArgumentNullException(nameof(getEnvironmentResponseEnvironment.CreatedOn), "Property is required for class GetEnvironmentResponseEnvironment.");

            if (getEnvironmentResponseEnvironment.CodeOption.IsSet)
                writer.WriteString("code", getEnvironmentResponseEnvironment.Code);

            if (getEnvironmentResponseEnvironment.NameOption.IsSet)
                writer.WriteString("name", getEnvironmentResponseEnvironment.Name);

            if (getEnvironmentResponseEnvironment.HotjarSiteIdOption.IsSet)
                if (getEnvironmentResponseEnvironment.HotjarSiteIdOption.Value != null)
                    writer.WriteString("hotjar_site_id", getEnvironmentResponseEnvironment.HotjarSiteId);
                else
                    writer.WriteNull("hotjar_site_id");

            if (getEnvironmentResponseEnvironment.GoogleAnalyticsTagOption.IsSet)
                if (getEnvironmentResponseEnvironment.GoogleAnalyticsTagOption.Value != null)
                    writer.WriteString("google_analytics_tag", getEnvironmentResponseEnvironment.GoogleAnalyticsTag);
                else
                    writer.WriteNull("google_analytics_tag");

            if (getEnvironmentResponseEnvironment.IsDefaultOption.IsSet)
                writer.WriteBoolean("is_default", getEnvironmentResponseEnvironment.IsDefaultOption.Value!.Value);

            if (getEnvironmentResponseEnvironment.IsLiveOption.IsSet)
                writer.WriteBoolean("is_live", getEnvironmentResponseEnvironment.IsLiveOption.Value!.Value);

            if (getEnvironmentResponseEnvironment.KindeDomainOption.IsSet)
                writer.WriteString("kinde_domain", getEnvironmentResponseEnvironment.KindeDomain);

            if (getEnvironmentResponseEnvironment.CustomDomainOption.IsSet)
                if (getEnvironmentResponseEnvironment.CustomDomainOption.Value != null)
                    writer.WriteString("custom_domain", getEnvironmentResponseEnvironment.CustomDomain);
                else
                    writer.WriteNull("custom_domain");

            if (getEnvironmentResponseEnvironment.LogoOption.IsSet)
                if (getEnvironmentResponseEnvironment.LogoOption.Value != null)
                    writer.WriteString("logo", getEnvironmentResponseEnvironment.Logo);
                else
                    writer.WriteNull("logo");

            if (getEnvironmentResponseEnvironment.LogoDarkOption.IsSet)
                if (getEnvironmentResponseEnvironment.LogoDarkOption.Value != null)
                    writer.WriteString("logo_dark", getEnvironmentResponseEnvironment.LogoDark);
                else
                    writer.WriteNull("logo_dark");

            if (getEnvironmentResponseEnvironment.FaviconSvgOption.IsSet)
                if (getEnvironmentResponseEnvironment.FaviconSvgOption.Value != null)
                    writer.WriteString("favicon_svg", getEnvironmentResponseEnvironment.FaviconSvg);
                else
                    writer.WriteNull("favicon_svg");

            if (getEnvironmentResponseEnvironment.FaviconFallbackOption.IsSet)
                if (getEnvironmentResponseEnvironment.FaviconFallbackOption.Value != null)
                    writer.WriteString("favicon_fallback", getEnvironmentResponseEnvironment.FaviconFallback);
                else
                    writer.WriteNull("favicon_fallback");

            if (getEnvironmentResponseEnvironment.LinkColorOption.IsSet)
                if (getEnvironmentResponseEnvironment.LinkColorOption.Value != null)
                {
                    writer.WritePropertyName("link_color");
                    JsonSerializer.Serialize(writer, getEnvironmentResponseEnvironment.LinkColor, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("link_color");
            if (getEnvironmentResponseEnvironment.BackgroundColorOption.IsSet)
                if (getEnvironmentResponseEnvironment.BackgroundColorOption.Value != null)
                {
                    writer.WritePropertyName("background_color");
                    JsonSerializer.Serialize(writer, getEnvironmentResponseEnvironment.BackgroundColor, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("background_color");
            if (getEnvironmentResponseEnvironment.ButtonColorOption.IsSet)
                if (getEnvironmentResponseEnvironment.ButtonColorOption.Value != null)
                {
                    writer.WritePropertyName("button_color");
                    JsonSerializer.Serialize(writer, getEnvironmentResponseEnvironment.ButtonColor, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("button_color");
            if (getEnvironmentResponseEnvironment.ButtonTextColorOption.IsSet)
                if (getEnvironmentResponseEnvironment.ButtonTextColorOption.Value != null)
                {
                    writer.WritePropertyName("button_text_color");
                    JsonSerializer.Serialize(writer, getEnvironmentResponseEnvironment.ButtonTextColor, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("button_text_color");
            if (getEnvironmentResponseEnvironment.LinkColorDarkOption.IsSet)
                if (getEnvironmentResponseEnvironment.LinkColorDarkOption.Value != null)
                {
                    writer.WritePropertyName("link_color_dark");
                    JsonSerializer.Serialize(writer, getEnvironmentResponseEnvironment.LinkColorDark, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("link_color_dark");
            if (getEnvironmentResponseEnvironment.BackgroundColorDarkOption.IsSet)
                if (getEnvironmentResponseEnvironment.BackgroundColorDarkOption.Value != null)
                {
                    writer.WritePropertyName("background_color_dark");
                    JsonSerializer.Serialize(writer, getEnvironmentResponseEnvironment.BackgroundColorDark, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("background_color_dark");
            if (getEnvironmentResponseEnvironment.ButtonTextColorDarkOption.IsSet)
                if (getEnvironmentResponseEnvironment.ButtonTextColorDarkOption.Value != null)
                {
                    writer.WritePropertyName("button_text_color_dark");
                    JsonSerializer.Serialize(writer, getEnvironmentResponseEnvironment.ButtonTextColorDark, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("button_text_color_dark");
            if (getEnvironmentResponseEnvironment.ButtonColorDarkOption.IsSet)
                if (getEnvironmentResponseEnvironment.ButtonColorDarkOption.Value != null)
                {
                    writer.WritePropertyName("button_color_dark");
                    JsonSerializer.Serialize(writer, getEnvironmentResponseEnvironment.ButtonColorDark, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("button_color_dark");
            if (getEnvironmentResponseEnvironment.ButtonBorderRadiusOption.IsSet)
                if (getEnvironmentResponseEnvironment.ButtonBorderRadiusOption.Value != null)
                    writer.WriteNumber("button_border_radius", getEnvironmentResponseEnvironment.ButtonBorderRadiusOption.Value!.Value);
                else
                    writer.WriteNull("button_border_radius");

            if (getEnvironmentResponseEnvironment.CardBorderRadiusOption.IsSet)
                if (getEnvironmentResponseEnvironment.CardBorderRadiusOption.Value != null)
                    writer.WriteNumber("card_border_radius", getEnvironmentResponseEnvironment.CardBorderRadiusOption.Value!.Value);
                else
                    writer.WriteNull("card_border_radius");

            if (getEnvironmentResponseEnvironment.InputBorderRadiusOption.IsSet)
                if (getEnvironmentResponseEnvironment.InputBorderRadiusOption.Value != null)
                    writer.WriteNumber("input_border_radius", getEnvironmentResponseEnvironment.InputBorderRadiusOption.Value!.Value);
                else
                    writer.WriteNull("input_border_radius");

            var themeCodeRawValue = GetEnvironmentResponseEnvironment.ThemeCodeEnumToJsonValue(getEnvironmentResponseEnvironment.ThemeCodeOption.Value!.Value);
            writer.WriteString("theme_code", themeCodeRawValue);
            var colorSchemeRawValue = GetEnvironmentResponseEnvironment.ColorSchemeEnumToJsonValue(getEnvironmentResponseEnvironment.ColorSchemeOption.Value!.Value);
            writer.WriteString("color_scheme", colorSchemeRawValue);
            if (getEnvironmentResponseEnvironment.CreatedOnOption.IsSet)
                writer.WriteString("created_on", getEnvironmentResponseEnvironment.CreatedOn);
        }
    }
}
