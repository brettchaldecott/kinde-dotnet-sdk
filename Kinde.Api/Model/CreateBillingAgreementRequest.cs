// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// CreateBillingAgreementRequest
    /// </summary>
    public partial class CreateBillingAgreementRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBillingAgreementRequest" /> class.
        /// </summary>
        /// <param name="customerId">The ID of the billing customer to create a new agreement for</param>
        /// <param name="planCode">The code of the billing plan the new agreement will be based on</param>
        /// <param name="isInvoiceNow">Generate a final invoice for any un-invoiced metered usage.</param>
        /// <param name="isProrate">Generate a proration invoice item that credits remaining unused features.</param>
        [JsonConstructor]
        public CreateBillingAgreementRequest(string customerId, string planCode, Option<bool?> isInvoiceNow = default, Option<bool?> isProrate = default)
        {
            CustomerId = customerId;
            PlanCode = planCode;
            IsInvoiceNowOption = isInvoiceNow;
            IsProrateOption = isProrate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The ID of the billing customer to create a new agreement for
        /// </summary>
        /// <value>The ID of the billing customer to create a new agreement for</value>
        /* <example>customer_0195ac80a14c2ca2cec97d026d864de0</example> */
        [JsonPropertyName("customer_id")]
        public string CustomerId { get; set; }

        /// <summary>
        /// The code of the billing plan the new agreement will be based on
        /// </summary>
        /// <value>The code of the billing plan the new agreement will be based on</value>
        /* <example>pro</example> */
        [JsonPropertyName("plan_code")]
        public string PlanCode { get; set; }

        /// <summary>
        /// Used to track the state of IsInvoiceNow
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsInvoiceNowOption { get; private set; }

        /// <summary>
        /// Generate a final invoice for any un-invoiced metered usage.
        /// </summary>
        /// <value>Generate a final invoice for any un-invoiced metered usage.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_invoice_now")]
        public bool? IsInvoiceNow { get { return this.IsInvoiceNowOption; } set { this.IsInvoiceNowOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsProrate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsProrateOption { get; private set; }

        /// <summary>
        /// Generate a proration invoice item that credits remaining unused features.
        /// </summary>
        /// <value>Generate a proration invoice item that credits remaining unused features.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_prorate")]
        public bool? IsProrate { get { return this.IsProrateOption; } set { this.IsProrateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateBillingAgreementRequest {\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  PlanCode: ").Append(PlanCode).Append("\n");
            sb.Append("  IsInvoiceNow: ").Append(IsInvoiceNow).Append("\n");
            sb.Append("  IsProrate: ").Append(IsProrate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateBillingAgreementRequest" />
    /// </summary>
    public class CreateBillingAgreementRequestJsonConverter : JsonConverter<CreateBillingAgreementRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateBillingAgreementRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateBillingAgreementRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> customerId = default;
            Option<string?> planCode = default;
            Option<bool?> isInvoiceNow = default;
            Option<bool?> isProrate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "customer_id":
                            customerId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "plan_code":
                            planCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_invoice_now":
                            isInvoiceNow = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_prorate":
                            isProrate = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!customerId.IsSet)
                throw new ArgumentException("Property is required for class CreateBillingAgreementRequest.", nameof(customerId));

            if (!planCode.IsSet)
                throw new ArgumentException("Property is required for class CreateBillingAgreementRequest.", nameof(planCode));

            if (customerId.IsSet && customerId.Value == null)
                throw new ArgumentNullException(nameof(customerId), "Property is not nullable for class CreateBillingAgreementRequest.");

            if (planCode.IsSet && planCode.Value == null)
                throw new ArgumentNullException(nameof(planCode), "Property is not nullable for class CreateBillingAgreementRequest.");

            if (isInvoiceNow.IsSet && isInvoiceNow.Value == null)
                throw new ArgumentNullException(nameof(isInvoiceNow), "Property is not nullable for class CreateBillingAgreementRequest.");

            if (isProrate.IsSet && isProrate.Value == null)
                throw new ArgumentNullException(nameof(isProrate), "Property is not nullable for class CreateBillingAgreementRequest.");

            return new CreateBillingAgreementRequest(customerId.Value!, planCode.Value!, isInvoiceNow, isProrate);
        }

        /// <summary>
        /// Serializes a <see cref="CreateBillingAgreementRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createBillingAgreementRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateBillingAgreementRequest createBillingAgreementRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createBillingAgreementRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateBillingAgreementRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createBillingAgreementRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateBillingAgreementRequest createBillingAgreementRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createBillingAgreementRequest.CustomerId == null)
                throw new ArgumentNullException(nameof(createBillingAgreementRequest.CustomerId), "Property is required for class CreateBillingAgreementRequest.");

            if (createBillingAgreementRequest.PlanCode == null)
                throw new ArgumentNullException(nameof(createBillingAgreementRequest.PlanCode), "Property is required for class CreateBillingAgreementRequest.");

            writer.WriteString("customer_id", createBillingAgreementRequest.CustomerId);

            writer.WriteString("plan_code", createBillingAgreementRequest.PlanCode);

            if (createBillingAgreementRequest.IsInvoiceNowOption.IsSet)
                writer.WriteBoolean("is_invoice_now", createBillingAgreementRequest.IsInvoiceNowOption.Value!.Value);

            if (createBillingAgreementRequest.IsProrateOption.IsSet)
                writer.WriteBoolean("is_prorate", createBillingAgreementRequest.IsProrateOption.Value!.Value);
        }
    }
}
