// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    public partial class SearchUsersResponseResultsInner
    {
        /// <summary>
        /// </summary>
        /// <param name="id">Unique ID of the user in Kinde.</param>
        /// <param name="providedId">External ID for user.</param>
        /// <param name="email">Default email address of the user in Kinde.</param>
        /// <param name="username">Primary username of the user in Kinde.</param>
        /// <param name="lastName">User&#39;s last name.</param>
        /// <param name="firstName">User&#39;s first name.</param>
        /// <param name="isSuspended">Whether the user is currently suspended or not.</param>
        /// <param name="picture">User&#39;s profile picture URL.</param>
        /// <param name="totalSignIns">Total number of user sign ins.</param>
        /// <param name="failedSignIns">Number of consecutive failed user sign ins.</param>
        /// <param name="lastSignedIn">Last sign in date in ISO 8601 format.</param>
        /// <param name="createdOn">Date of user creation in ISO 8601 format.</param>
        /// <param name="organizations">Array of organizations a user belongs to.</param>
        /// <param name="identities">Array of identities belonging to the user.</param>
        /// <param name="properties">The user properties.</param>
        [JsonConstructor]
        public SearchUsersResponseResultsInner(Option<string?> id = default, Option<string?> providedId = default, Option<string?> email = default, Option<string?> username = default, Option<string?> lastName = default, Option<string?> firstName = default, Option<bool?> isSuspended = default, Option<string?> picture = default, Option<int?> totalSignIns = default, Option<int?> failedSignIns = default, Option<string?> lastSignedIn = default, Option<string?> createdOn = default, Option<List<string>?> organizations = default, Option<List<UserIdentitiesInner>?> identities = default, Option<Dictionary<string, string>?> properties = default)
        {
            IdOption = id;
            ProvidedIdOption = providedId;
            EmailOption = email;
            UsernameOption = username;
            LastNameOption = lastName;
            FirstNameOption = firstName;
            IsSuspendedOption = isSuspended;
            PictureOption = picture;
            TotalSignInsOption = totalSignIns;
            FailedSignInsOption = failedSignIns;
            LastSignedInOption = lastSignedIn;
            CreatedOnOption = createdOn;
            OrganizationsOption = organizations;
            IdentitiesOption = identities;
            PropertiesOption = properties;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Unique ID of the user in Kinde.
        /// </summary>
        /// <value>Unique ID of the user in Kinde.</value>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProvidedIdOption { get; private set; }

        /// <summary>
        /// External ID for user.
        /// </summary>
        /// <value>External ID for user.</value>
        /* <example>U123456</example> */
        [JsonPropertyName("provided_id")]
        public string? ProvidedId { get { return this.ProvidedIdOption; } set { this.ProvidedIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Default email address of the user in Kinde.
        /// </summary>
        /// <value>Default email address of the user in Kinde.</value>
        /* <example>user@domain.com</example> */
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Username
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UsernameOption { get; private set; }

        /// <summary>
        /// Primary username of the user in Kinde.
        /// </summary>
        /// <value>Primary username of the user in Kinde.</value>
        /* <example>john.snow</example> */
        [JsonPropertyName("username")]
        public string? Username { get { return this.UsernameOption; } set { this.UsernameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastNameOption { get; private set; }

        /// <summary>
        /// User&#39;s last name.
        /// </summary>
        /// <value>User&#39;s last name.</value>
        /* <example>Snow</example> */
        [JsonPropertyName("last_name")]
        public string? LastName { get { return this.LastNameOption; } set { this.LastNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstNameOption { get; private set; }

        /// <summary>
        /// User&#39;s first name.
        /// </summary>
        /// <value>User&#39;s first name.</value>
        /* <example>John</example> */
        [JsonPropertyName("first_name")]
        public string? FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSuspendedOption { get; private set; }

        /// <summary>
        /// Whether the user is currently suspended or not.
        /// </summary>
        /// <value>Whether the user is currently suspended or not.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_suspended")]
        public bool? IsSuspended { get { return this.IsSuspendedOption; } set { this.IsSuspendedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Picture
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PictureOption { get; private set; }

        /// <summary>
        /// User&#39;s profile picture URL.
        /// </summary>
        /// <value>User&#39;s profile picture URL.</value>
        /* <example>https://example.com/john_snow.jpg</example> */
        [JsonPropertyName("picture")]
        public string? Picture { get { return this.PictureOption; } set { this.PictureOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalSignInsOption { get; private set; }

        /// <summary>
        /// Total number of user sign ins.
        /// </summary>
        /// <value>Total number of user sign ins.</value>
        /* <example>1</example> */
        [JsonPropertyName("total_sign_ins")]
        public int? TotalSignIns { get { return this.TotalSignInsOption; } set { this.TotalSignInsOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FailedSignInsOption { get; private set; }

        /// <summary>
        /// Number of consecutive failed user sign ins.
        /// </summary>
        /// <value>Number of consecutive failed user sign ins.</value>
        /* <example>0</example> */
        [JsonPropertyName("failed_sign_ins")]
        public int? FailedSignIns { get { return this.FailedSignInsOption; } set { this.FailedSignInsOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastSignedInOption { get; private set; }

        /// <summary>
        /// Last sign in date in ISO 8601 format.
        /// </summary>
        /// <value>Last sign in date in ISO 8601 format.</value>
        /* <example>2025-02-12T18:02:23.614638+00:00</example> */
        [JsonPropertyName("last_signed_in")]
        public string? LastSignedIn { get { return this.LastSignedInOption; } set { this.LastSignedInOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedOnOption { get; private set; }

        /// <summary>
        /// Date of user creation in ISO 8601 format.
        /// </summary>
        /// <value>Date of user creation in ISO 8601 format.</value>
        /* <example>2025-02-12T18:02:23.614638+00:00</example> */
        [JsonPropertyName("created_on")]
        public string? CreatedOn { get { return this.CreatedOnOption; } set { this.CreatedOnOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> OrganizationsOption { get; private set; }

        /// <summary>
        /// Array of organizations a user belongs to.
        /// </summary>
        /// <value>Array of organizations a user belongs to.</value>
        [JsonPropertyName("organizations")]
        public List<string>? Organizations { get { return this.OrganizationsOption; } set { this.OrganizationsOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<UserIdentitiesInner>?> IdentitiesOption { get; private set; }

        /// <summary>
        /// Array of identities belonging to the user.
        /// </summary>
        /// <value>Array of identities belonging to the user.</value>
        [JsonPropertyName("identities")]
        public List<UserIdentitiesInner>? Identities { get { return this.IdentitiesOption; } set { this.IdentitiesOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> PropertiesOption { get; private set; }

        /// <summary>
        /// The user properties.
        /// </summary>
        /// <value>The user properties.</value>
        [JsonPropertyName("properties")]
        public Dictionary<string, string>? Properties { get { return this.PropertiesOption; } set { this.PropertiesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchUsersResponseResultsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProvidedId: ").Append(ProvidedId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  IsSuspended: ").Append(IsSuspended).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("  TotalSignIns: ").Append(TotalSignIns).Append("\n");
            sb.Append("  FailedSignIns: ").Append(FailedSignIns).Append("\n");
            sb.Append("  LastSignedIn: ").Append(LastSignedIn).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  Organizations: ").Append(Organizations).Append("\n");
            sb.Append("  Identities: ").Append(Identities).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class SearchUsersResponseResultsInnerJsonConverter : JsonConverter<SearchUsersResponseResultsInner>
    {
        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchUsersResponseResultsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> providedId = default;
            Option<string?> email = default;
            Option<string?> username = default;
            Option<string?> lastName = default;
            Option<string?> firstName = default;
            Option<bool?> isSuspended = default;
            Option<string?> picture = default;
            Option<int?> totalSignIns = default;
            Option<int?> failedSignIns = default;
            Option<string?> lastSignedIn = default;
            Option<string?> createdOn = default;
            Option<List<string>?> organizations = default;
            Option<List<UserIdentitiesInner>?> identities = default;
            Option<Dictionary<string, string>?> properties = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "provided_id":
                            providedId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "username":
                            username = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "last_name":
                            lastName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "first_name":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_suspended":
                            isSuspended = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "picture":
                            picture = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "total_sign_ins":
                            totalSignIns = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "failed_sign_ins":
                            failedSignIns = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "last_signed_in":
                            lastSignedIn = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "created_on":
                            createdOn = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "organizations":
                            organizations = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "identities":
                            identities = new Option<List<UserIdentitiesInner>?>(JsonSerializer.Deserialize<List<UserIdentitiesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "properties":
                            properties = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SearchUsersResponseResultsInner.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class SearchUsersResponseResultsInner.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class SearchUsersResponseResultsInner.");

            if (isSuspended.IsSet && isSuspended.Value == null)
                throw new ArgumentNullException(nameof(isSuspended), "Property is not nullable for class SearchUsersResponseResultsInner.");

            if (organizations.IsSet && organizations.Value == null)
                throw new ArgumentNullException(nameof(organizations), "Property is not nullable for class SearchUsersResponseResultsInner.");

            if (identities.IsSet && identities.Value == null)
                throw new ArgumentNullException(nameof(identities), "Property is not nullable for class SearchUsersResponseResultsInner.");

            if (properties.IsSet && properties.Value == null)
                throw new ArgumentNullException(nameof(properties), "Property is not nullable for class SearchUsersResponseResultsInner.");

            return new SearchUsersResponseResultsInner(id, providedId, email, username, lastName, firstName, isSuspended, picture, totalSignIns, failedSignIns, lastSignedIn, createdOn, organizations, identities, properties);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, SearchUsersResponseResultsInner searchUsersResponseResultsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, searchUsersResponseResultsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, SearchUsersResponseResultsInner searchUsersResponseResultsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchUsersResponseResultsInner.IdOption.IsSet && searchUsersResponseResultsInner.Id == null)
                throw new ArgumentNullException(nameof(searchUsersResponseResultsInner.Id), "Property is required for class SearchUsersResponseResultsInner.");

            if (searchUsersResponseResultsInner.LastNameOption.IsSet && searchUsersResponseResultsInner.LastName == null)
                throw new ArgumentNullException(nameof(searchUsersResponseResultsInner.LastName), "Property is required for class SearchUsersResponseResultsInner.");

            if (searchUsersResponseResultsInner.FirstNameOption.IsSet && searchUsersResponseResultsInner.FirstName == null)
                throw new ArgumentNullException(nameof(searchUsersResponseResultsInner.FirstName), "Property is required for class SearchUsersResponseResultsInner.");

            if (searchUsersResponseResultsInner.OrganizationsOption.IsSet && searchUsersResponseResultsInner.Organizations == null)
                throw new ArgumentNullException(nameof(searchUsersResponseResultsInner.Organizations), "Property is required for class SearchUsersResponseResultsInner.");

            if (searchUsersResponseResultsInner.IdentitiesOption.IsSet && searchUsersResponseResultsInner.Identities == null)
                throw new ArgumentNullException(nameof(searchUsersResponseResultsInner.Identities), "Property is required for class SearchUsersResponseResultsInner.");

            if (searchUsersResponseResultsInner.PropertiesOption.IsSet && searchUsersResponseResultsInner.Properties == null)
                throw new ArgumentNullException(nameof(searchUsersResponseResultsInner.Properties), "Property is required for class SearchUsersResponseResultsInner.");

            if (searchUsersResponseResultsInner.IdOption.IsSet)
                writer.WriteString("id", searchUsersResponseResultsInner.Id);

            if (searchUsersResponseResultsInner.ProvidedIdOption.IsSet)
                if (searchUsersResponseResultsInner.ProvidedIdOption.Value != null)
                    writer.WriteString("provided_id", searchUsersResponseResultsInner.ProvidedId);
                else
                    writer.WriteNull("provided_id");

            if (searchUsersResponseResultsInner.EmailOption.IsSet)
                if (searchUsersResponseResultsInner.EmailOption.Value != null)
                    writer.WriteString("email", searchUsersResponseResultsInner.Email);
                else
                    writer.WriteNull("email");

            if (searchUsersResponseResultsInner.UsernameOption.IsSet)
                if (searchUsersResponseResultsInner.UsernameOption.Value != null)
                    writer.WriteString("username", searchUsersResponseResultsInner.Username);
                else
                    writer.WriteNull("username");

            if (searchUsersResponseResultsInner.LastNameOption.IsSet)
                writer.WriteString("last_name", searchUsersResponseResultsInner.LastName);

            if (searchUsersResponseResultsInner.FirstNameOption.IsSet)
                writer.WriteString("first_name", searchUsersResponseResultsInner.FirstName);

            if (searchUsersResponseResultsInner.IsSuspendedOption.IsSet)
                writer.WriteBoolean("is_suspended", searchUsersResponseResultsInner.IsSuspendedOption.Value!.Value);

            if (searchUsersResponseResultsInner.PictureOption.IsSet)
                if (searchUsersResponseResultsInner.PictureOption.Value != null)
                    writer.WriteString("picture", searchUsersResponseResultsInner.Picture);
                else
                    writer.WriteNull("picture");

            if (searchUsersResponseResultsInner.TotalSignInsOption.IsSet)
                if (searchUsersResponseResultsInner.TotalSignInsOption.Value != null)
                    writer.WriteNumber("total_sign_ins", searchUsersResponseResultsInner.TotalSignInsOption.Value!.Value);
                else
                    writer.WriteNull("total_sign_ins");

            if (searchUsersResponseResultsInner.FailedSignInsOption.IsSet)
                if (searchUsersResponseResultsInner.FailedSignInsOption.Value != null)
                    writer.WriteNumber("failed_sign_ins", searchUsersResponseResultsInner.FailedSignInsOption.Value!.Value);
                else
                    writer.WriteNull("failed_sign_ins");

            if (searchUsersResponseResultsInner.LastSignedInOption.IsSet)
                if (searchUsersResponseResultsInner.LastSignedInOption.Value != null)
                    writer.WriteString("last_signed_in", searchUsersResponseResultsInner.LastSignedIn);
                else
                    writer.WriteNull("last_signed_in");

            if (searchUsersResponseResultsInner.CreatedOnOption.IsSet)
                if (searchUsersResponseResultsInner.CreatedOnOption.Value != null)
                    writer.WriteString("created_on", searchUsersResponseResultsInner.CreatedOn);
                else
                    writer.WriteNull("created_on");

            if (searchUsersResponseResultsInner.OrganizationsOption.IsSet)
            {
                writer.WritePropertyName("organizations");
                JsonSerializer.Serialize(writer, searchUsersResponseResultsInner.Organizations, jsonSerializerOptions);
            }
            if (searchUsersResponseResultsInner.IdentitiesOption.IsSet)
            {
                writer.WritePropertyName("identities");
                JsonSerializer.Serialize(writer, searchUsersResponseResultsInner.Identities, jsonSerializerOptions);
            }
            if (searchUsersResponseResultsInner.PropertiesOption.IsSet)
            {
                writer.WritePropertyName("properties");
                JsonSerializer.Serialize(writer, searchUsersResponseResultsInner.Properties, jsonSerializerOptions);
            }
        }
    }
}
