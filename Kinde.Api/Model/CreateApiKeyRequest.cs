// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    public partial class CreateApiKeyRequest
    {
        /// <summary>
        /// </summary>
        /// <param name="name">The name of the API key.</param>
        /// <param name="apiId">The ID of the API this key is associated with.</param>
        /// <param name="scopeIds">Array of scope IDs to associate with this API key.</param>
        /// <param name="userId">The ID of the user to associate with this API key (for user-level keys).</param>
        /// <param name="orgCode">The organization code to associate with this API key (for organization-level keys).</param>
        [JsonConstructor]
        public CreateApiKeyRequest(string name, string apiId, Option<List<string>?> scopeIds = default, Option<string?> userId = default, Option<string?> orgCode = default)
        {
            Name = name;
            ApiId = apiId;
            ScopeIdsOption = scopeIds;
            UserIdOption = userId;
            OrgCodeOption = orgCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name of the API key.
        /// </summary>
        /// <value>The name of the API key.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the API this key is associated with.
        /// </summary>
        /// <value>The ID of the API this key is associated with.</value>
        [JsonPropertyName("api_id")]
        public string ApiId { get; set; }

        /// <summary>
        /// Used to track the state of ScopeIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ScopeIdsOption { get; private set; }

        /// <summary>
        /// Array of scope IDs to associate with this API key.
        /// </summary>
        /// <value>Array of scope IDs to associate with this API key.</value>
        [JsonPropertyName("scope_ids")]
        public List<string>? ScopeIds { get { return this.ScopeIdsOption; } set { this.ScopeIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserIdOption { get; private set; }

        /// <summary>
        /// The ID of the user to associate with this API key (for user-level keys).
        /// </summary>
        /// <value>The ID of the user to associate with this API key (for user-level keys).</value>
        [JsonPropertyName("user_id")]
        public string? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of OrgCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrgCodeOption { get; private set; }

        /// <summary>
        /// The organization code to associate with this API key (for organization-level keys).
        /// </summary>
        /// <value>The organization code to associate with this API key (for organization-level keys).</value>
        [JsonPropertyName("org_code")]
        public string? OrgCode { get { return this.OrgCodeOption; } set { this.OrgCodeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateApiKeyRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ApiId: ").Append(ApiId).Append("\n");
            sb.Append("  ScopeIds: ").Append(ScopeIds).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  OrgCode: ").Append(OrgCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class CreateApiKeyRequestJsonConverter : JsonConverter<CreateApiKeyRequest>
    {
        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateApiKeyRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> apiId = default;
            Option<List<string>?> scopeIds = default;
            Option<string?> userId = default;
            Option<string?> orgCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "api_id":
                            apiId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scope_ids":
                            scopeIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "org_code":
                            orgCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateApiKeyRequest.", nameof(name));

            if (!apiId.IsSet)
                throw new ArgumentException("Property is required for class CreateApiKeyRequest.", nameof(apiId));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateApiKeyRequest.");

            if (apiId.IsSet && apiId.Value == null)
                throw new ArgumentNullException(nameof(apiId), "Property is not nullable for class CreateApiKeyRequest.");

            return new CreateApiKeyRequest(name.Value!, apiId.Value!, scopeIds, userId, orgCode);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, CreateApiKeyRequest createApiKeyRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createApiKeyRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, CreateApiKeyRequest createApiKeyRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createApiKeyRequest.Name == null)
                throw new ArgumentNullException(nameof(createApiKeyRequest.Name), "Property is required for class CreateApiKeyRequest.");

            if (createApiKeyRequest.ApiId == null)
                throw new ArgumentNullException(nameof(createApiKeyRequest.ApiId), "Property is required for class CreateApiKeyRequest.");

            writer.WriteString("name", createApiKeyRequest.Name);

            writer.WriteString("api_id", createApiKeyRequest.ApiId);

            if (createApiKeyRequest.ScopeIdsOption.IsSet)
                if (createApiKeyRequest.ScopeIdsOption.Value != null)
                {
                    writer.WritePropertyName("scope_ids");
                    JsonSerializer.Serialize(writer, createApiKeyRequest.ScopeIds, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("scope_ids");
            if (createApiKeyRequest.UserIdOption.IsSet)
                if (createApiKeyRequest.UserIdOption.Value != null)
                    writer.WriteString("user_id", createApiKeyRequest.UserId);
                else
                    writer.WriteNull("user_id");

            if (createApiKeyRequest.OrgCodeOption.IsSet)
                if (createApiKeyRequest.OrgCodeOption.Value != null)
                    writer.WriteString("org_code", createApiKeyRequest.OrgCode);
                else
                    writer.WriteNull("org_code");
        }
    }
}
