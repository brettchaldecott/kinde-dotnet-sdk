// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// Basic information required to create a user.
    /// </summary>
    public partial class CreateUserRequestProfile
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserRequestProfile" /> class.
        /// </summary>
        /// <param name="givenName">User&#39;s first name.</param>
        /// <param name="familyName">User&#39;s last name.</param>
        /// <param name="picture">The user&#39;s profile picture.</param>
        [JsonConstructor]
        public CreateUserRequestProfile(Option<string?> givenName = default, Option<string?> familyName = default, Option<string?> picture = default)
        {
            GivenNameOption = givenName;
            FamilyNameOption = familyName;
            PictureOption = picture;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of GivenName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GivenNameOption { get; private set; }

        /// <summary>
        /// User&#39;s first name.
        /// </summary>
        /// <value>User&#39;s first name.</value>
        [JsonPropertyName("given_name")]
        public string? GivenName { get { return this.GivenNameOption; } set { this.GivenNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of FamilyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FamilyNameOption { get; private set; }

        /// <summary>
        /// User&#39;s last name.
        /// </summary>
        /// <value>User&#39;s last name.</value>
        [JsonPropertyName("family_name")]
        public string? FamilyName { get { return this.FamilyNameOption; } set { this.FamilyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Picture
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PictureOption { get; private set; }

        /// <summary>
        /// The user&#39;s profile picture.
        /// </summary>
        /// <value>The user&#39;s profile picture.</value>
        [JsonPropertyName("picture")]
        public string? Picture { get { return this.PictureOption; } set { this.PictureOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateUserRequestProfile {\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  FamilyName: ").Append(FamilyName).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateUserRequestProfile" />
    /// </summary>
    public class CreateUserRequestProfileJsonConverter : JsonConverter<CreateUserRequestProfile>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateUserRequestProfile" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateUserRequestProfile Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> givenName = default;
            Option<string?> familyName = default;
            Option<string?> picture = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "given_name":
                            givenName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "family_name":
                            familyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "picture":
                            picture = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (givenName.IsSet && givenName.Value == null)
                throw new ArgumentNullException(nameof(givenName), "Property is not nullable for class CreateUserRequestProfile.");

            if (familyName.IsSet && familyName.Value == null)
                throw new ArgumentNullException(nameof(familyName), "Property is not nullable for class CreateUserRequestProfile.");

            if (picture.IsSet && picture.Value == null)
                throw new ArgumentNullException(nameof(picture), "Property is not nullable for class CreateUserRequestProfile.");

            return new CreateUserRequestProfile(givenName, familyName, picture);
        }

        /// <summary>
        /// Serializes a <see cref="CreateUserRequestProfile" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createUserRequestProfile"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateUserRequestProfile createUserRequestProfile, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createUserRequestProfile, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateUserRequestProfile" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createUserRequestProfile"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateUserRequestProfile createUserRequestProfile, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createUserRequestProfile.GivenNameOption.IsSet && createUserRequestProfile.GivenName == null)
                throw new ArgumentNullException(nameof(createUserRequestProfile.GivenName), "Property is required for class CreateUserRequestProfile.");

            if (createUserRequestProfile.FamilyNameOption.IsSet && createUserRequestProfile.FamilyName == null)
                throw new ArgumentNullException(nameof(createUserRequestProfile.FamilyName), "Property is required for class CreateUserRequestProfile.");

            if (createUserRequestProfile.PictureOption.IsSet && createUserRequestProfile.Picture == null)
                throw new ArgumentNullException(nameof(createUserRequestProfile.Picture), "Property is required for class CreateUserRequestProfile.");

            if (createUserRequestProfile.GivenNameOption.IsSet)
                writer.WriteString("given_name", createUserRequestProfile.GivenName);

            if (createUserRequestProfile.FamilyNameOption.IsSet)
                writer.WriteString("family_name", createUserRequestProfile.FamilyName);

            if (createUserRequestProfile.PictureOption.IsSet)
                writer.WriteString("picture", createUserRequestProfile.Picture);
        }
    }
}
