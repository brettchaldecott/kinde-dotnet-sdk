// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// CreateConnectionRequest
    /// </summary>
    public partial class CreateConnectionRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectionRequest" /> class.
        /// </summary>
        /// <param name="name">The internal name of the connection.</param>
        /// <param name="displayName">The public facing name of the connection.</param>
        /// <param name="strategy">The identity provider identifier for the connection.</param>
        /// <param name="enabledApplications">Client IDs of applications in which this connection is to be enabled.</param>
        /// <param name="organizationCode">Enterprise connections only - the code for organization that manages this connection.</param>
        /// <param name="options">options</param>
        [JsonConstructor]
        public CreateConnectionRequest(Option<string?> name = default, Option<string?> displayName = default, Option<StrategyEnum?> strategy = default, Option<List<string>?> enabledApplications = default, Option<string?> organizationCode = default, Option<CreateConnectionRequestOptions?> options = default)
        {
            NameOption = name;
            DisplayNameOption = displayName;
            StrategyOption = strategy;
            EnabledApplicationsOption = enabledApplications;
            OrganizationCodeOption = organizationCode;
            OptionsOption = options;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The identity provider identifier for the connection.
        /// </summary>
        /// <value>The identity provider identifier for the connection.</value>
        public enum StrategyEnum
        {
            /// <summary>
            /// Enum Oauth2apple for value: oauth2:apple
            /// </summary>
            Oauth2apple = 1,

            /// <summary>
            /// Enum Oauth2azureAd for value: oauth2:azure_ad
            /// </summary>
            Oauth2azureAd = 2,

            /// <summary>
            /// Enum Oauth2bitbucket for value: oauth2:bitbucket
            /// </summary>
            Oauth2bitbucket = 3,

            /// <summary>
            /// Enum Oauth2discord for value: oauth2:discord
            /// </summary>
            Oauth2discord = 4,

            /// <summary>
            /// Enum Oauth2facebook for value: oauth2:facebook
            /// </summary>
            Oauth2facebook = 5,

            /// <summary>
            /// Enum Oauth2github for value: oauth2:github
            /// </summary>
            Oauth2github = 6,

            /// <summary>
            /// Enum Oauth2gitlab for value: oauth2:gitlab
            /// </summary>
            Oauth2gitlab = 7,

            /// <summary>
            /// Enum Oauth2google for value: oauth2:google
            /// </summary>
            Oauth2google = 8,

            /// <summary>
            /// Enum Oauth2linkedin for value: oauth2:linkedin
            /// </summary>
            Oauth2linkedin = 9,

            /// <summary>
            /// Enum Oauth2microsoft for value: oauth2:microsoft
            /// </summary>
            Oauth2microsoft = 10,

            /// <summary>
            /// Enum Oauth2patreon for value: oauth2:patreon
            /// </summary>
            Oauth2patreon = 11,

            /// <summary>
            /// Enum Oauth2slack for value: oauth2:slack
            /// </summary>
            Oauth2slack = 12,

            /// <summary>
            /// Enum Oauth2stripe for value: oauth2:stripe
            /// </summary>
            Oauth2stripe = 13,

            /// <summary>
            /// Enum Oauth2twitch for value: oauth2:twitch
            /// </summary>
            Oauth2twitch = 14,

            /// <summary>
            /// Enum Oauth2twitter for value: oauth2:twitter
            /// </summary>
            Oauth2twitter = 15,

            /// <summary>
            /// Enum Oauth2xero for value: oauth2:xero
            /// </summary>
            Oauth2xero = 16,

            /// <summary>
            /// Enum Samlcustom for value: saml:custom
            /// </summary>
            Samlcustom = 17,

            /// <summary>
            /// Enum WsfedazureAd for value: wsfed:azure_ad
            /// </summary>
            WsfedazureAd = 18
        }

        /// <summary>
        /// Returns a <see cref="StrategyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StrategyEnum StrategyEnumFromString(string value)
        {
            if (value.Equals("oauth2:apple"))
                return StrategyEnum.Oauth2apple;

            if (value.Equals("oauth2:azure_ad"))
                return StrategyEnum.Oauth2azureAd;

            if (value.Equals("oauth2:bitbucket"))
                return StrategyEnum.Oauth2bitbucket;

            if (value.Equals("oauth2:discord"))
                return StrategyEnum.Oauth2discord;

            if (value.Equals("oauth2:facebook"))
                return StrategyEnum.Oauth2facebook;

            if (value.Equals("oauth2:github"))
                return StrategyEnum.Oauth2github;

            if (value.Equals("oauth2:gitlab"))
                return StrategyEnum.Oauth2gitlab;

            if (value.Equals("oauth2:google"))
                return StrategyEnum.Oauth2google;

            if (value.Equals("oauth2:linkedin"))
                return StrategyEnum.Oauth2linkedin;

            if (value.Equals("oauth2:microsoft"))
                return StrategyEnum.Oauth2microsoft;

            if (value.Equals("oauth2:patreon"))
                return StrategyEnum.Oauth2patreon;

            if (value.Equals("oauth2:slack"))
                return StrategyEnum.Oauth2slack;

            if (value.Equals("oauth2:stripe"))
                return StrategyEnum.Oauth2stripe;

            if (value.Equals("oauth2:twitch"))
                return StrategyEnum.Oauth2twitch;

            if (value.Equals("oauth2:twitter"))
                return StrategyEnum.Oauth2twitter;

            if (value.Equals("oauth2:xero"))
                return StrategyEnum.Oauth2xero;

            if (value.Equals("saml:custom"))
                return StrategyEnum.Samlcustom;

            if (value.Equals("wsfed:azure_ad"))
                return StrategyEnum.WsfedazureAd;

            throw new NotImplementedException($"Could not convert value to type StrategyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StrategyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StrategyEnum? StrategyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("oauth2:apple"))
                return StrategyEnum.Oauth2apple;

            if (value.Equals("oauth2:azure_ad"))
                return StrategyEnum.Oauth2azureAd;

            if (value.Equals("oauth2:bitbucket"))
                return StrategyEnum.Oauth2bitbucket;

            if (value.Equals("oauth2:discord"))
                return StrategyEnum.Oauth2discord;

            if (value.Equals("oauth2:facebook"))
                return StrategyEnum.Oauth2facebook;

            if (value.Equals("oauth2:github"))
                return StrategyEnum.Oauth2github;

            if (value.Equals("oauth2:gitlab"))
                return StrategyEnum.Oauth2gitlab;

            if (value.Equals("oauth2:google"))
                return StrategyEnum.Oauth2google;

            if (value.Equals("oauth2:linkedin"))
                return StrategyEnum.Oauth2linkedin;

            if (value.Equals("oauth2:microsoft"))
                return StrategyEnum.Oauth2microsoft;

            if (value.Equals("oauth2:patreon"))
                return StrategyEnum.Oauth2patreon;

            if (value.Equals("oauth2:slack"))
                return StrategyEnum.Oauth2slack;

            if (value.Equals("oauth2:stripe"))
                return StrategyEnum.Oauth2stripe;

            if (value.Equals("oauth2:twitch"))
                return StrategyEnum.Oauth2twitch;

            if (value.Equals("oauth2:twitter"))
                return StrategyEnum.Oauth2twitter;

            if (value.Equals("oauth2:xero"))
                return StrategyEnum.Oauth2xero;

            if (value.Equals("saml:custom"))
                return StrategyEnum.Samlcustom;

            if (value.Equals("wsfed:azure_ad"))
                return StrategyEnum.WsfedazureAd;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StrategyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StrategyEnumToJsonValue(StrategyEnum? value)
        {
            if (value == StrategyEnum.Oauth2apple)
                return "oauth2:apple";

            if (value == StrategyEnum.Oauth2azureAd)
                return "oauth2:azure_ad";

            if (value == StrategyEnum.Oauth2bitbucket)
                return "oauth2:bitbucket";

            if (value == StrategyEnum.Oauth2discord)
                return "oauth2:discord";

            if (value == StrategyEnum.Oauth2facebook)
                return "oauth2:facebook";

            if (value == StrategyEnum.Oauth2github)
                return "oauth2:github";

            if (value == StrategyEnum.Oauth2gitlab)
                return "oauth2:gitlab";

            if (value == StrategyEnum.Oauth2google)
                return "oauth2:google";

            if (value == StrategyEnum.Oauth2linkedin)
                return "oauth2:linkedin";

            if (value == StrategyEnum.Oauth2microsoft)
                return "oauth2:microsoft";

            if (value == StrategyEnum.Oauth2patreon)
                return "oauth2:patreon";

            if (value == StrategyEnum.Oauth2slack)
                return "oauth2:slack";

            if (value == StrategyEnum.Oauth2stripe)
                return "oauth2:stripe";

            if (value == StrategyEnum.Oauth2twitch)
                return "oauth2:twitch";

            if (value == StrategyEnum.Oauth2twitter)
                return "oauth2:twitter";

            if (value == StrategyEnum.Oauth2xero)
                return "oauth2:xero";

            if (value == StrategyEnum.Samlcustom)
                return "saml:custom";

            if (value == StrategyEnum.WsfedazureAd)
                return "wsfed:azure_ad";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Strategy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StrategyEnum?> StrategyOption { get; private set; }

        /// <summary>
        /// The identity provider identifier for the connection.
        /// </summary>
        /// <value>The identity provider identifier for the connection.</value>
        [JsonPropertyName("strategy")]
        public StrategyEnum? Strategy { get { return this.StrategyOption; } set { this.StrategyOption = new Option<StrategyEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The internal name of the connection.
        /// </summary>
        /// <value>The internal name of the connection.</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayNameOption { get; private set; }

        /// <summary>
        /// The public facing name of the connection.
        /// </summary>
        /// <value>The public facing name of the connection.</value>
        [JsonPropertyName("display_name")]
        public string? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of EnabledApplications
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> EnabledApplicationsOption { get; private set; }

        /// <summary>
        /// Client IDs of applications in which this connection is to be enabled.
        /// </summary>
        /// <value>Client IDs of applications in which this connection is to be enabled.</value>
        [JsonPropertyName("enabled_applications")]
        public List<string>? EnabledApplications { get { return this.EnabledApplicationsOption; } set { this.EnabledApplicationsOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Used to track the state of OrganizationCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganizationCodeOption { get; private set; }

        /// <summary>
        /// Enterprise connections only - the code for organization that manages this connection.
        /// </summary>
        /// <value>Enterprise connections only - the code for organization that manages this connection.</value>
        /* <example>org_80581732fbe</example> */
        [JsonPropertyName("organization_code")]
        public string? OrganizationCode { get { return this.OrganizationCodeOption; } set { this.OrganizationCodeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Options
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateConnectionRequestOptions?> OptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [JsonPropertyName("options")]
        public CreateConnectionRequestOptions? Options { get { return this.OptionsOption; } set { this.OptionsOption = new Option<CreateConnectionRequestOptions?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectionRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  EnabledApplications: ").Append(EnabledApplications).Append("\n");
            sb.Append("  OrganizationCode: ").Append(OrganizationCode).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateConnectionRequest" />
    /// </summary>
    public class CreateConnectionRequestJsonConverter : JsonConverter<CreateConnectionRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateConnectionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateConnectionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> displayName = default;
            Option<CreateConnectionRequest.StrategyEnum?> strategy = default;
            Option<List<string>?> enabledApplications = default;
            Option<string?> organizationCode = default;
            Option<CreateConnectionRequestOptions?> options = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "display_name":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "strategy":
                            string? strategyRawValue = utf8JsonReader.GetString();
                            if (strategyRawValue != null)
                                strategy = new Option<CreateConnectionRequest.StrategyEnum?>(CreateConnectionRequest.StrategyEnumFromStringOrDefault(strategyRawValue));
                            break;
                        case "enabled_applications":
                            enabledApplications = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "organization_code":
                            organizationCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "options":
                            options = new Option<CreateConnectionRequestOptions?>(JsonSerializer.Deserialize<CreateConnectionRequestOptions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateConnectionRequest.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class CreateConnectionRequest.");

            if (strategy.IsSet && strategy.Value == null)
                throw new ArgumentNullException(nameof(strategy), "Property is not nullable for class CreateConnectionRequest.");

            if (enabledApplications.IsSet && enabledApplications.Value == null)
                throw new ArgumentNullException(nameof(enabledApplications), "Property is not nullable for class CreateConnectionRequest.");

            if (options.IsSet && options.Value == null)
                throw new ArgumentNullException(nameof(options), "Property is not nullable for class CreateConnectionRequest.");

            return new CreateConnectionRequest(name, displayName, strategy, enabledApplications, organizationCode, options);
        }

        /// <summary>
        /// Serializes a <see cref="CreateConnectionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConnectionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateConnectionRequest createConnectionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createConnectionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateConnectionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConnectionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateConnectionRequest createConnectionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createConnectionRequest.NameOption.IsSet && createConnectionRequest.Name == null)
                throw new ArgumentNullException(nameof(createConnectionRequest.Name), "Property is required for class CreateConnectionRequest.");

            if (createConnectionRequest.DisplayNameOption.IsSet && createConnectionRequest.DisplayName == null)
                throw new ArgumentNullException(nameof(createConnectionRequest.DisplayName), "Property is required for class CreateConnectionRequest.");

            if (createConnectionRequest.EnabledApplicationsOption.IsSet && createConnectionRequest.EnabledApplications == null)
                throw new ArgumentNullException(nameof(createConnectionRequest.EnabledApplications), "Property is required for class CreateConnectionRequest.");

            if (createConnectionRequest.OptionsOption.IsSet && createConnectionRequest.Options == null)
                throw new ArgumentNullException(nameof(createConnectionRequest.Options), "Property is required for class CreateConnectionRequest.");

            if (createConnectionRequest.NameOption.IsSet)
                writer.WriteString("name", createConnectionRequest.Name);

            if (createConnectionRequest.DisplayNameOption.IsSet)
                writer.WriteString("display_name", createConnectionRequest.DisplayName);

            var strategyRawValue = CreateConnectionRequest.StrategyEnumToJsonValue(createConnectionRequest.StrategyOption.Value!.Value);
            writer.WriteString("strategy", strategyRawValue);
            if (createConnectionRequest.EnabledApplicationsOption.IsSet)
            {
                writer.WritePropertyName("enabled_applications");
                JsonSerializer.Serialize(writer, createConnectionRequest.EnabledApplications, jsonSerializerOptions);
            }
            if (createConnectionRequest.OrganizationCodeOption.IsSet)
                if (createConnectionRequest.OrganizationCodeOption.Value != null)
                    writer.WriteString("organization_code", createConnectionRequest.OrganizationCode);
                else
                    writer.WriteNull("organization_code");

            if (createConnectionRequest.OptionsOption.IsSet)
            {
                writer.WritePropertyName("options");
                JsonSerializer.Serialize(writer, createConnectionRequest.Options, jsonSerializerOptions);
            }
        }
    }
}
