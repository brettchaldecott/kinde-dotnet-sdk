// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// UpdateConnectionRequest
    /// </summary>
    public partial class UpdateConnectionRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateConnectionRequest" /> class.
        /// </summary>
        /// <param name="name">The internal name of the connection.</param>
        /// <param name="displayName">The public facing name of the connection.</param>
        /// <param name="enabledApplications">Client IDs of applications in which this connection is to be enabled.</param>
        /// <param name="options">options</param>
        [JsonConstructor]
        public UpdateConnectionRequest(Option<string?> name = default, Option<string?> displayName = default, Option<List<string>?> enabledApplications = default, Option<UpdateConnectionRequestOptions?> options = default)
        {
            NameOption = name;
            DisplayNameOption = displayName;
            EnabledApplicationsOption = enabledApplications;
            OptionsOption = options;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The internal name of the connection.
        /// </summary>
        /// <value>The internal name of the connection.</value>
        /* <example>ConnectionA</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayNameOption { get; private set; }

        /// <summary>
        /// The public facing name of the connection.
        /// </summary>
        /// <value>The public facing name of the connection.</value>
        /* <example>Connection</example> */
        [JsonPropertyName("display_name")]
        public string? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of EnabledApplications
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> EnabledApplicationsOption { get; private set; }

        /// <summary>
        /// Client IDs of applications in which this connection is to be enabled.
        /// </summary>
        /// <value>Client IDs of applications in which this connection is to be enabled.</value>
        /* <example>[&quot;c647dbe20f5944e28af97c9184fded22&quot;,&quot;20bbffaa4c5e492a962273039d4ae18b&quot;]</example> */
        [JsonPropertyName("enabled_applications")]
        public List<string>? EnabledApplications { get { return this.EnabledApplicationsOption; } set { this.EnabledApplicationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Options
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UpdateConnectionRequestOptions?> OptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [JsonPropertyName("options")]
        public UpdateConnectionRequestOptions? Options { get { return this.OptionsOption; } set { this.OptionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateConnectionRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EnabledApplications: ").Append(EnabledApplications).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateConnectionRequest" />
    /// </summary>
    public class UpdateConnectionRequestJsonConverter : JsonConverter<UpdateConnectionRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateConnectionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateConnectionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> displayName = default;
            Option<List<string>?> enabledApplications = default;
            Option<UpdateConnectionRequestOptions?> options = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "display_name":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "enabled_applications":
                            enabledApplications = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "options":
                            options = new Option<UpdateConnectionRequestOptions?>(JsonSerializer.Deserialize<UpdateConnectionRequestOptions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UpdateConnectionRequest.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class UpdateConnectionRequest.");

            if (enabledApplications.IsSet && enabledApplications.Value == null)
                throw new ArgumentNullException(nameof(enabledApplications), "Property is not nullable for class UpdateConnectionRequest.");

            if (options.IsSet && options.Value == null)
                throw new ArgumentNullException(nameof(options), "Property is not nullable for class UpdateConnectionRequest.");

            return new UpdateConnectionRequest(name, displayName, enabledApplications, options);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateConnectionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateConnectionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateConnectionRequest updateConnectionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateConnectionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateConnectionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateConnectionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateConnectionRequest updateConnectionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateConnectionRequest.NameOption.IsSet && updateConnectionRequest.Name == null)
                throw new ArgumentNullException(nameof(updateConnectionRequest.Name), "Property is required for class UpdateConnectionRequest.");

            if (updateConnectionRequest.DisplayNameOption.IsSet && updateConnectionRequest.DisplayName == null)
                throw new ArgumentNullException(nameof(updateConnectionRequest.DisplayName), "Property is required for class UpdateConnectionRequest.");

            if (updateConnectionRequest.EnabledApplicationsOption.IsSet && updateConnectionRequest.EnabledApplications == null)
                throw new ArgumentNullException(nameof(updateConnectionRequest.EnabledApplications), "Property is required for class UpdateConnectionRequest.");

            if (updateConnectionRequest.OptionsOption.IsSet && updateConnectionRequest.Options == null)
                throw new ArgumentNullException(nameof(updateConnectionRequest.Options), "Property is required for class UpdateConnectionRequest.");

            if (updateConnectionRequest.NameOption.IsSet)
                writer.WriteString("name", updateConnectionRequest.Name);

            if (updateConnectionRequest.DisplayNameOption.IsSet)
                writer.WriteString("display_name", updateConnectionRequest.DisplayName);

            if (updateConnectionRequest.EnabledApplicationsOption.IsSet)
            {
                writer.WritePropertyName("enabled_applications");
                JsonSerializer.Serialize(writer, updateConnectionRequest.EnabledApplications, jsonSerializerOptions);
            }
            if (updateConnectionRequest.OptionsOption.IsSet)
            {
                writer.WritePropertyName("options");
                JsonSerializer.Serialize(writer, updateConnectionRequest.Options, jsonSerializerOptions);
            }
        }
    }
}
