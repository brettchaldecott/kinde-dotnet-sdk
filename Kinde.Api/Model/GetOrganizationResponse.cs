// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetOrganizationResponse
    /// </summary>
    public partial class GetOrganizationResponse
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOrganizationResponse" /> class.
        /// </summary>
        /// <param name="code">The unique identifier for the organization.</param>
        /// <param name="name">The organization&#39;s name.</param>
        /// <param name="handle">A unique handle for the organization - can be used for dynamic callback urls.</param>
        /// <param name="isDefault">Whether the organization is the default organization.</param>
        /// <param name="externalId">The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.</param>
        /// <param name="isAutoMembershipEnabled">If users become members of this organization when the org code is supplied during authentication.</param>
        /// <param name="logo">The organization&#39;s logo URL.</param>
        /// <param name="logoDark">The organization&#39;s logo URL to be used for dark themes.</param>
        /// <param name="faviconSvg">The organization&#39;s SVG favicon URL. Optimal format for most browsers</param>
        /// <param name="faviconFallback">The favicon URL to be used as a fallback in browsers that don&#39;t support SVG, add a PNG</param>
        /// <param name="linkColor">linkColor</param>
        /// <param name="backgroundColor">backgroundColor</param>
        /// <param name="buttonColor">buttonColor</param>
        /// <param name="buttonTextColor">buttonTextColor</param>
        /// <param name="linkColorDark">linkColorDark</param>
        /// <param name="backgroundColorDark">backgroundColorDark</param>
        /// <param name="buttonTextColorDark">buttonTextColorDark</param>
        /// <param name="buttonColorDark">buttonColorDark</param>
        /// <param name="buttonBorderRadius">The border radius for buttons. Value is px, Kinde transforms to rem for rendering</param>
        /// <param name="cardBorderRadius">The border radius for cards. Value is px, Kinde transforms to rem for rendering</param>
        /// <param name="inputBorderRadius">The border radius for inputs. Value is px, Kinde transforms to rem for rendering</param>
        /// <param name="themeCode">Whether the environment is forced into light mode, dark mode or user preference</param>
        /// <param name="colorScheme">The color scheme for the environment used for meta tags based on the theme code</param>
        /// <param name="createdOn">Date of organization creation in ISO 8601 format.</param>
        /// <param name="isAllowRegistrations">Deprecated - Use &#39;is_auto_membership_enabled&#39; instead</param>
        /// <param name="senderName">The name of the organization that will be used in emails</param>
        /// <param name="senderEmail">The email address that will be used in emails. Requires custom SMTP to be set up.</param>
        /// <param name="billing">billing</param>
        [JsonConstructor]
        public GetOrganizationResponse(Option<string?> code = default, Option<string?> name = default, Option<string?> handle = default, Option<bool?> isDefault = default, Option<string?> externalId = default, Option<bool?> isAutoMembershipEnabled = default, Option<string?> logo = default, Option<string?> logoDark = default, Option<string?> faviconSvg = default, Option<string?> faviconFallback = default, Option<GetEnvironmentResponseEnvironmentLinkColor?> linkColor = default, Option<GetEnvironmentResponseEnvironmentBackgroundColor?> backgroundColor = default, Option<GetEnvironmentResponseEnvironmentLinkColor?> buttonColor = default, Option<GetEnvironmentResponseEnvironmentBackgroundColor?> buttonTextColor = default, Option<GetEnvironmentResponseEnvironmentLinkColor?> linkColorDark = default, Option<GetEnvironmentResponseEnvironmentLinkColor?> backgroundColorDark = default, Option<GetEnvironmentResponseEnvironmentLinkColor?> buttonTextColorDark = default, Option<GetEnvironmentResponseEnvironmentLinkColor?> buttonColorDark = default, Option<int?> buttonBorderRadius = default, Option<int?> cardBorderRadius = default, Option<int?> inputBorderRadius = default, Option<ThemeCodeEnum?> themeCode = default, Option<ColorSchemeEnum?> colorScheme = default, Option<string?> createdOn = default, Option<bool?> isAllowRegistrations = default, Option<string?> senderName = default, Option<string?> senderEmail = default, Option<GetOrganizationResponseBilling?> billing = default)
        {
            CodeOption = code;
            NameOption = name;
            HandleOption = handle;
            IsDefaultOption = isDefault;
            ExternalIdOption = externalId;
            IsAutoMembershipEnabledOption = isAutoMembershipEnabled;
            LogoOption = logo;
            LogoDarkOption = logoDark;
            FaviconSvgOption = faviconSvg;
            FaviconFallbackOption = faviconFallback;
            LinkColorOption = linkColor;
            BackgroundColorOption = backgroundColor;
            ButtonColorOption = buttonColor;
            ButtonTextColorOption = buttonTextColor;
            LinkColorDarkOption = linkColorDark;
            BackgroundColorDarkOption = backgroundColorDark;
            ButtonTextColorDarkOption = buttonTextColorDark;
            ButtonColorDarkOption = buttonColorDark;
            ButtonBorderRadiusOption = buttonBorderRadius;
            CardBorderRadiusOption = cardBorderRadius;
            InputBorderRadiusOption = inputBorderRadius;
            ThemeCodeOption = themeCode;
            ColorSchemeOption = colorScheme;
            CreatedOnOption = createdOn;
            IsAllowRegistrationsOption = isAllowRegistrations;
            SenderNameOption = senderName;
            SenderEmailOption = senderEmail;
            BillingOption = billing;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Whether the environment is forced into light mode, dark mode or user preference
        /// </summary>
        /// <value>Whether the environment is forced into light mode, dark mode or user preference</value>
        public enum ThemeCodeEnum
        {
            /// <summary>
            /// Enum Light for value: light
            /// </summary>
            Light = 1,

            /// <summary>
            /// Enum Dark for value: dark
            /// </summary>
            Dark = 2,

            /// <summary>
            /// Enum UserPreference for value: user_preference
            /// </summary>
            UserPreference = 3
        }

        /// <summary>
        /// Returns a <see cref="ThemeCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ThemeCodeEnum ThemeCodeEnumFromString(string value)
        {
            if (value.Equals("light"))
                return ThemeCodeEnum.Light;

            if (value.Equals("dark"))
                return ThemeCodeEnum.Dark;

            if (value.Equals("user_preference"))
                return ThemeCodeEnum.UserPreference;

            throw new NotImplementedException($"Could not convert value to type ThemeCodeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ThemeCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ThemeCodeEnum? ThemeCodeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("light"))
                return ThemeCodeEnum.Light;

            if (value.Equals("dark"))
                return ThemeCodeEnum.Dark;

            if (value.Equals("user_preference"))
                return ThemeCodeEnum.UserPreference;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ThemeCodeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ThemeCodeEnumToJsonValue(ThemeCodeEnum? value)
        {
            if (value == ThemeCodeEnum.Light)
                return "light";

            if (value == ThemeCodeEnum.Dark)
                return "dark";

            if (value == ThemeCodeEnum.UserPreference)
                return "user_preference";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ThemeCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThemeCodeEnum?> ThemeCodeOption { get; private set; }

        /// <summary>
        /// Whether the environment is forced into light mode, dark mode or user preference
        /// </summary>
        /// <value>Whether the environment is forced into light mode, dark mode or user preference</value>
        [JsonPropertyName("theme_code")]
        public ThemeCodeEnum? ThemeCode { get { return this.ThemeCodeOption; } set { this.ThemeCodeOption = new(value); } }

        /// <summary>
        /// The color scheme for the environment used for meta tags based on the theme code
        /// </summary>
        /// <value>The color scheme for the environment used for meta tags based on the theme code</value>
        public enum ColorSchemeEnum
        {
            /// <summary>
            /// Enum Light for value: light
            /// </summary>
            Light = 1,

            /// <summary>
            /// Enum Dark for value: dark
            /// </summary>
            Dark = 2,

            /// <summary>
            /// Enum LightDark for value: light dark
            /// </summary>
            LightDark = 3
        }

        /// <summary>
        /// Returns a <see cref="ColorSchemeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ColorSchemeEnum ColorSchemeEnumFromString(string value)
        {
            if (value.Equals("light"))
                return ColorSchemeEnum.Light;

            if (value.Equals("dark"))
                return ColorSchemeEnum.Dark;

            if (value.Equals("light dark"))
                return ColorSchemeEnum.LightDark;

            throw new NotImplementedException($"Could not convert value to type ColorSchemeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ColorSchemeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ColorSchemeEnum? ColorSchemeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("light"))
                return ColorSchemeEnum.Light;

            if (value.Equals("dark"))
                return ColorSchemeEnum.Dark;

            if (value.Equals("light dark"))
                return ColorSchemeEnum.LightDark;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ColorSchemeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ColorSchemeEnumToJsonValue(ColorSchemeEnum? value)
        {
            if (value == ColorSchemeEnum.Light)
                return "light";

            if (value == ColorSchemeEnum.Dark)
                return "dark";

            if (value == ColorSchemeEnum.LightDark)
                return "light dark";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ColorScheme
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ColorSchemeEnum?> ColorSchemeOption { get; private set; }

        /// <summary>
        /// The color scheme for the environment used for meta tags based on the theme code
        /// </summary>
        /// <value>The color scheme for the environment used for meta tags based on the theme code</value>
        [JsonPropertyName("color_scheme")]
        public ColorSchemeEnum? ColorScheme { get { return this.ColorSchemeOption; } set { this.ColorSchemeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// The unique identifier for the organization.
        /// </summary>
        /// <value>The unique identifier for the organization.</value>
        /* <example>org_1ccfb819462</example> */
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The organization&#39;s name.
        /// </summary>
        /// <value>The organization&#39;s name.</value>
        /* <example>Acme Corp</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Handle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HandleOption { get; private set; }

        /// <summary>
        /// A unique handle for the organization - can be used for dynamic callback urls.
        /// </summary>
        /// <value>A unique handle for the organization - can be used for dynamic callback urls.</value>
        /* <example>acme_corp</example> */
        [JsonPropertyName("handle")]
        public string? Handle { get { return this.HandleOption; } set { this.HandleOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDefault
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDefaultOption { get; private set; }

        /// <summary>
        /// Whether the organization is the default organization.
        /// </summary>
        /// <value>Whether the organization is the default organization.</value>
        /* <example>false</example> */
        [JsonPropertyName("is_default")]
        public bool? IsDefault { get { return this.IsDefaultOption; } set { this.IsDefaultOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalIdOption { get; private set; }

        /// <summary>
        /// The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.
        /// </summary>
        /// <value>The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.</value>
        /* <example>some1234</example> */
        [JsonPropertyName("external_id")]
        public string? ExternalId { get { return this.ExternalIdOption; } set { this.ExternalIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsAutoMembershipEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAutoMembershipEnabledOption { get; private set; }

        /// <summary>
        /// If users become members of this organization when the org code is supplied during authentication.
        /// </summary>
        /// <value>If users become members of this organization when the org code is supplied during authentication.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_auto_membership_enabled")]
        public bool? IsAutoMembershipEnabled { get { return this.IsAutoMembershipEnabledOption; } set { this.IsAutoMembershipEnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of Logo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LogoOption { get; private set; }

        /// <summary>
        /// The organization&#39;s logo URL.
        /// </summary>
        /// <value>The organization&#39;s logo URL.</value>
        /* <example>https://yoursubdomain.kinde.com/logo?org_code&#x3D;org_1ccfb819462&amp;cache&#x3D;311308b8ad3544bf8e572979f0e5748d</example> */
        [JsonPropertyName("logo")]
        public string? Logo { get { return this.LogoOption; } set { this.LogoOption = new(value); } }

        /// <summary>
        /// Used to track the state of LogoDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LogoDarkOption { get; private set; }

        /// <summary>
        /// The organization&#39;s logo URL to be used for dark themes.
        /// </summary>
        /// <value>The organization&#39;s logo URL to be used for dark themes.</value>
        /* <example>https://yoursubdomain.kinde.com/logo_dark?org_code&#x3D;org_1ccfb819462&amp;cache&#x3D;311308b8ad3544bf8e572979f0e5748d</example> */
        [JsonPropertyName("logo_dark")]
        public string? LogoDark { get { return this.LogoDarkOption; } set { this.LogoDarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of FaviconSvg
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FaviconSvgOption { get; private set; }

        /// <summary>
        /// The organization&#39;s SVG favicon URL. Optimal format for most browsers
        /// </summary>
        /// <value>The organization&#39;s SVG favicon URL. Optimal format for most browsers</value>
        /* <example>https://yoursubdomain.kinde.com/favicon_svg?org_code&#x3D;org_1ccfb819462&amp;cache&#x3D;311308b8ad3544bf8e572979f0e5748d</example> */
        [JsonPropertyName("favicon_svg")]
        public string? FaviconSvg { get { return this.FaviconSvgOption; } set { this.FaviconSvgOption = new(value); } }

        /// <summary>
        /// Used to track the state of FaviconFallback
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FaviconFallbackOption { get; private set; }

        /// <summary>
        /// The favicon URL to be used as a fallback in browsers that don&#39;t support SVG, add a PNG
        /// </summary>
        /// <value>The favicon URL to be used as a fallback in browsers that don&#39;t support SVG, add a PNG</value>
        /* <example>https://yoursubdomain.kinde.com/favicon_fallback?org_code&#x3D;org_1ccfb819462&amp;cache&#x3D;311308b8ad3544bf8e572979f0e5748d</example> */
        [JsonPropertyName("favicon_fallback")]
        public string? FaviconFallback { get { return this.FaviconFallbackOption; } set { this.FaviconFallbackOption = new(value); } }

        /// <summary>
        /// Used to track the state of LinkColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentLinkColor?> LinkColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets LinkColor
        /// </summary>
        [JsonPropertyName("link_color")]
        public GetEnvironmentResponseEnvironmentLinkColor? LinkColor { get { return this.LinkColorOption; } set { this.LinkColorOption = new(value); } }

        /// <summary>
        /// Used to track the state of BackgroundColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentBackgroundColor?> BackgroundColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets BackgroundColor
        /// </summary>
        [JsonPropertyName("background_color")]
        public GetEnvironmentResponseEnvironmentBackgroundColor? BackgroundColor { get { return this.BackgroundColorOption; } set { this.BackgroundColorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ButtonColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentLinkColor?> ButtonColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets ButtonColor
        /// </summary>
        [JsonPropertyName("button_color")]
        public GetEnvironmentResponseEnvironmentLinkColor? ButtonColor { get { return this.ButtonColorOption; } set { this.ButtonColorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ButtonTextColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentBackgroundColor?> ButtonTextColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets ButtonTextColor
        /// </summary>
        [JsonPropertyName("button_text_color")]
        public GetEnvironmentResponseEnvironmentBackgroundColor? ButtonTextColor { get { return this.ButtonTextColorOption; } set { this.ButtonTextColorOption = new(value); } }

        /// <summary>
        /// Used to track the state of LinkColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentLinkColor?> LinkColorDarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets LinkColorDark
        /// </summary>
        [JsonPropertyName("link_color_dark")]
        public GetEnvironmentResponseEnvironmentLinkColor? LinkColorDark { get { return this.LinkColorDarkOption; } set { this.LinkColorDarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of BackgroundColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentLinkColor?> BackgroundColorDarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets BackgroundColorDark
        /// </summary>
        [JsonPropertyName("background_color_dark")]
        public GetEnvironmentResponseEnvironmentLinkColor? BackgroundColorDark { get { return this.BackgroundColorDarkOption; } set { this.BackgroundColorDarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of ButtonTextColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentLinkColor?> ButtonTextColorDarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets ButtonTextColorDark
        /// </summary>
        [JsonPropertyName("button_text_color_dark")]
        public GetEnvironmentResponseEnvironmentLinkColor? ButtonTextColorDark { get { return this.ButtonTextColorDarkOption; } set { this.ButtonTextColorDarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of ButtonColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEnvironmentResponseEnvironmentLinkColor?> ButtonColorDarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets ButtonColorDark
        /// </summary>
        [JsonPropertyName("button_color_dark")]
        public GetEnvironmentResponseEnvironmentLinkColor? ButtonColorDark { get { return this.ButtonColorDarkOption; } set { this.ButtonColorDarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of ButtonBorderRadius
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ButtonBorderRadiusOption { get; private set; }

        /// <summary>
        /// The border radius for buttons. Value is px, Kinde transforms to rem for rendering
        /// </summary>
        /// <value>The border radius for buttons. Value is px, Kinde transforms to rem for rendering</value>
        /* <example>8</example> */
        [JsonPropertyName("button_border_radius")]
        public int? ButtonBorderRadius { get { return this.ButtonBorderRadiusOption; } set { this.ButtonBorderRadiusOption = new(value); } }

        /// <summary>
        /// Used to track the state of CardBorderRadius
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CardBorderRadiusOption { get; private set; }

        /// <summary>
        /// The border radius for cards. Value is px, Kinde transforms to rem for rendering
        /// </summary>
        /// <value>The border radius for cards. Value is px, Kinde transforms to rem for rendering</value>
        /* <example>16</example> */
        [JsonPropertyName("card_border_radius")]
        public int? CardBorderRadius { get { return this.CardBorderRadiusOption; } set { this.CardBorderRadiusOption = new(value); } }

        /// <summary>
        /// Used to track the state of InputBorderRadius
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InputBorderRadiusOption { get; private set; }

        /// <summary>
        /// The border radius for inputs. Value is px, Kinde transforms to rem for rendering
        /// </summary>
        /// <value>The border radius for inputs. Value is px, Kinde transforms to rem for rendering</value>
        /* <example>4</example> */
        [JsonPropertyName("input_border_radius")]
        public int? InputBorderRadius { get { return this.InputBorderRadiusOption; } set { this.InputBorderRadiusOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedOnOption { get; private set; }

        /// <summary>
        /// Date of organization creation in ISO 8601 format.
        /// </summary>
        /// <value>Date of organization creation in ISO 8601 format.</value>
        /* <example>2021-01-01T00:00:00Z</example> */
        [JsonPropertyName("created_on")]
        public string? CreatedOn { get { return this.CreatedOnOption; } set { this.CreatedOnOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsAllowRegistrations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAllowRegistrationsOption { get; private set; }

        /// <summary>
        /// Deprecated - Use &#39;is_auto_membership_enabled&#39; instead
        /// </summary>
        /// <value>Deprecated - Use &#39;is_auto_membership_enabled&#39; instead</value>
        /* <example>true</example> */
        [JsonPropertyName("is_allow_registrations")]
        [Obsolete]
        public bool? IsAllowRegistrations { get { return this.IsAllowRegistrationsOption; } set { this.IsAllowRegistrationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SenderName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SenderNameOption { get; private set; }

        /// <summary>
        /// The name of the organization that will be used in emails
        /// </summary>
        /// <value>The name of the organization that will be used in emails</value>
        /* <example>Acme Corp</example> */
        [JsonPropertyName("sender_name")]
        public string? SenderName { get { return this.SenderNameOption; } set { this.SenderNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SenderEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SenderEmailOption { get; private set; }

        /// <summary>
        /// The email address that will be used in emails. Requires custom SMTP to be set up.
        /// </summary>
        /// <value>The email address that will be used in emails. Requires custom SMTP to be set up.</value>
        /* <example>hello@acmecorp.com</example> */
        [JsonPropertyName("sender_email")]
        public string? SenderEmail { get { return this.SenderEmailOption; } set { this.SenderEmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Billing
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetOrganizationResponseBilling?> BillingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Billing
        /// </summary>
        [JsonPropertyName("billing")]
        public GetOrganizationResponseBilling? Billing { get { return this.BillingOption; } set { this.BillingOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetOrganizationResponse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  IsAutoMembershipEnabled: ").Append(IsAutoMembershipEnabled).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  LogoDark: ").Append(LogoDark).Append("\n");
            sb.Append("  FaviconSvg: ").Append(FaviconSvg).Append("\n");
            sb.Append("  FaviconFallback: ").Append(FaviconFallback).Append("\n");
            sb.Append("  LinkColor: ").Append(LinkColor).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  ButtonColor: ").Append(ButtonColor).Append("\n");
            sb.Append("  ButtonTextColor: ").Append(ButtonTextColor).Append("\n");
            sb.Append("  LinkColorDark: ").Append(LinkColorDark).Append("\n");
            sb.Append("  BackgroundColorDark: ").Append(BackgroundColorDark).Append("\n");
            sb.Append("  ButtonTextColorDark: ").Append(ButtonTextColorDark).Append("\n");
            sb.Append("  ButtonColorDark: ").Append(ButtonColorDark).Append("\n");
            sb.Append("  ButtonBorderRadius: ").Append(ButtonBorderRadius).Append("\n");
            sb.Append("  CardBorderRadius: ").Append(CardBorderRadius).Append("\n");
            sb.Append("  InputBorderRadius: ").Append(InputBorderRadius).Append("\n");
            sb.Append("  ThemeCode: ").Append(ThemeCode).Append("\n");
            sb.Append("  ColorScheme: ").Append(ColorScheme).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  IsAllowRegistrations: ").Append(IsAllowRegistrations).Append("\n");
            sb.Append("  SenderName: ").Append(SenderName).Append("\n");
            sb.Append("  SenderEmail: ").Append(SenderEmail).Append("\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetOrganizationResponse" />
    /// </summary>
    public class GetOrganizationResponseJsonConverter : JsonConverter<GetOrganizationResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetOrganizationResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetOrganizationResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> name = default;
            Option<string?> handle = default;
            Option<bool?> isDefault = default;
            Option<string?> externalId = default;
            Option<bool?> isAutoMembershipEnabled = default;
            Option<string?> logo = default;
            Option<string?> logoDark = default;
            Option<string?> faviconSvg = default;
            Option<string?> faviconFallback = default;
            Option<GetEnvironmentResponseEnvironmentLinkColor?> linkColor = default;
            Option<GetEnvironmentResponseEnvironmentBackgroundColor?> backgroundColor = default;
            Option<GetEnvironmentResponseEnvironmentLinkColor?> buttonColor = default;
            Option<GetEnvironmentResponseEnvironmentBackgroundColor?> buttonTextColor = default;
            Option<GetEnvironmentResponseEnvironmentLinkColor?> linkColorDark = default;
            Option<GetEnvironmentResponseEnvironmentLinkColor?> backgroundColorDark = default;
            Option<GetEnvironmentResponseEnvironmentLinkColor?> buttonTextColorDark = default;
            Option<GetEnvironmentResponseEnvironmentLinkColor?> buttonColorDark = default;
            Option<int?> buttonBorderRadius = default;
            Option<int?> cardBorderRadius = default;
            Option<int?> inputBorderRadius = default;
            Option<GetOrganizationResponse.ThemeCodeEnum?> themeCode = default;
            Option<GetOrganizationResponse.ColorSchemeEnum?> colorScheme = default;
            Option<string?> createdOn = default;
            Option<bool?> isAllowRegistrations = default;
            Option<string?> senderName = default;
            Option<string?> senderEmail = default;
            Option<GetOrganizationResponseBilling?> billing = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "handle":
                            handle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_default":
                            isDefault = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "external_id":
                            externalId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_auto_membership_enabled":
                            isAutoMembershipEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "logo":
                            logo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "logo_dark":
                            logoDark = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "favicon_svg":
                            faviconSvg = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "favicon_fallback":
                            faviconFallback = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "link_color":
                            linkColor = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentLinkColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "background_color":
                            backgroundColor = new Option<GetEnvironmentResponseEnvironmentBackgroundColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentBackgroundColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "button_color":
                            buttonColor = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentLinkColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "button_text_color":
                            buttonTextColor = new Option<GetEnvironmentResponseEnvironmentBackgroundColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentBackgroundColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "link_color_dark":
                            linkColorDark = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentLinkColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "background_color_dark":
                            backgroundColorDark = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentLinkColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "button_text_color_dark":
                            buttonTextColorDark = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentLinkColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "button_color_dark":
                            buttonColorDark = new Option<GetEnvironmentResponseEnvironmentLinkColor?>(JsonSerializer.Deserialize<GetEnvironmentResponseEnvironmentLinkColor>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "button_border_radius":
                            buttonBorderRadius = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "card_border_radius":
                            cardBorderRadius = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "input_border_radius":
                            inputBorderRadius = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "theme_code":
                            string? themeCodeRawValue = utf8JsonReader.GetString();
                            if (themeCodeRawValue != null)
                                themeCode = new Option<GetOrganizationResponse.ThemeCodeEnum?>(GetOrganizationResponse.ThemeCodeEnumFromStringOrDefault(themeCodeRawValue));
                            break;
                        case "color_scheme":
                            string? colorSchemeRawValue = utf8JsonReader.GetString();
                            if (colorSchemeRawValue != null)
                                colorScheme = new Option<GetOrganizationResponse.ColorSchemeEnum?>(GetOrganizationResponse.ColorSchemeEnumFromStringOrDefault(colorSchemeRawValue));
                            break;
                        case "created_on":
                            createdOn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_allow_registrations":
                            isAllowRegistrations = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sender_name":
                            senderName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sender_email":
                            senderEmail = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "billing":
                            billing = new Option<GetOrganizationResponseBilling?>(JsonSerializer.Deserialize<GetOrganizationResponseBilling>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class GetOrganizationResponse.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetOrganizationResponse.");

            if (isDefault.IsSet && isDefault.Value == null)
                throw new ArgumentNullException(nameof(isDefault), "Property is not nullable for class GetOrganizationResponse.");

            if (isAutoMembershipEnabled.IsSet && isAutoMembershipEnabled.Value == null)
                throw new ArgumentNullException(nameof(isAutoMembershipEnabled), "Property is not nullable for class GetOrganizationResponse.");

            if (themeCode.IsSet && themeCode.Value == null)
                throw new ArgumentNullException(nameof(themeCode), "Property is not nullable for class GetOrganizationResponse.");

            if (colorScheme.IsSet && colorScheme.Value == null)
                throw new ArgumentNullException(nameof(colorScheme), "Property is not nullable for class GetOrganizationResponse.");

            if (createdOn.IsSet && createdOn.Value == null)
                throw new ArgumentNullException(nameof(createdOn), "Property is not nullable for class GetOrganizationResponse.");

            if (billing.IsSet && billing.Value == null)
                throw new ArgumentNullException(nameof(billing), "Property is not nullable for class GetOrganizationResponse.");

            return new GetOrganizationResponse(code, name, handle, isDefault, externalId, isAutoMembershipEnabled, logo, logoDark, faviconSvg, faviconFallback, linkColor, backgroundColor, buttonColor, buttonTextColor, linkColorDark, backgroundColorDark, buttonTextColorDark, buttonColorDark, buttonBorderRadius, cardBorderRadius, inputBorderRadius, themeCode, colorScheme, createdOn, isAllowRegistrations, senderName, senderEmail, billing);
        }

        /// <summary>
        /// Serializes a <see cref="GetOrganizationResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getOrganizationResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetOrganizationResponse getOrganizationResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getOrganizationResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetOrganizationResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getOrganizationResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetOrganizationResponse getOrganizationResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getOrganizationResponse.CodeOption.IsSet && getOrganizationResponse.Code == null)
                throw new ArgumentNullException(nameof(getOrganizationResponse.Code), "Property is required for class GetOrganizationResponse.");

            if (getOrganizationResponse.NameOption.IsSet && getOrganizationResponse.Name == null)
                throw new ArgumentNullException(nameof(getOrganizationResponse.Name), "Property is required for class GetOrganizationResponse.");

            if (getOrganizationResponse.CreatedOnOption.IsSet && getOrganizationResponse.CreatedOn == null)
                throw new ArgumentNullException(nameof(getOrganizationResponse.CreatedOn), "Property is required for class GetOrganizationResponse.");

            if (getOrganizationResponse.BillingOption.IsSet && getOrganizationResponse.Billing == null)
                throw new ArgumentNullException(nameof(getOrganizationResponse.Billing), "Property is required for class GetOrganizationResponse.");

            if (getOrganizationResponse.CodeOption.IsSet)
                writer.WriteString("code", getOrganizationResponse.Code);

            if (getOrganizationResponse.NameOption.IsSet)
                writer.WriteString("name", getOrganizationResponse.Name);

            if (getOrganizationResponse.HandleOption.IsSet)
                if (getOrganizationResponse.HandleOption.Value != null)
                    writer.WriteString("handle", getOrganizationResponse.Handle);
                else
                    writer.WriteNull("handle");

            if (getOrganizationResponse.IsDefaultOption.IsSet)
                writer.WriteBoolean("is_default", getOrganizationResponse.IsDefaultOption.Value!.Value);

            if (getOrganizationResponse.ExternalIdOption.IsSet)
                if (getOrganizationResponse.ExternalIdOption.Value != null)
                    writer.WriteString("external_id", getOrganizationResponse.ExternalId);
                else
                    writer.WriteNull("external_id");

            if (getOrganizationResponse.IsAutoMembershipEnabledOption.IsSet)
                writer.WriteBoolean("is_auto_membership_enabled", getOrganizationResponse.IsAutoMembershipEnabledOption.Value!.Value);

            if (getOrganizationResponse.LogoOption.IsSet)
                if (getOrganizationResponse.LogoOption.Value != null)
                    writer.WriteString("logo", getOrganizationResponse.Logo);
                else
                    writer.WriteNull("logo");

            if (getOrganizationResponse.LogoDarkOption.IsSet)
                if (getOrganizationResponse.LogoDarkOption.Value != null)
                    writer.WriteString("logo_dark", getOrganizationResponse.LogoDark);
                else
                    writer.WriteNull("logo_dark");

            if (getOrganizationResponse.FaviconSvgOption.IsSet)
                if (getOrganizationResponse.FaviconSvgOption.Value != null)
                    writer.WriteString("favicon_svg", getOrganizationResponse.FaviconSvg);
                else
                    writer.WriteNull("favicon_svg");

            if (getOrganizationResponse.FaviconFallbackOption.IsSet)
                if (getOrganizationResponse.FaviconFallbackOption.Value != null)
                    writer.WriteString("favicon_fallback", getOrganizationResponse.FaviconFallback);
                else
                    writer.WriteNull("favicon_fallback");

            if (getOrganizationResponse.LinkColorOption.IsSet)
                if (getOrganizationResponse.LinkColorOption.Value != null)
                {
                    writer.WritePropertyName("link_color");
                    JsonSerializer.Serialize(writer, getOrganizationResponse.LinkColor, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("link_color");
            if (getOrganizationResponse.BackgroundColorOption.IsSet)
                if (getOrganizationResponse.BackgroundColorOption.Value != null)
                {
                    writer.WritePropertyName("background_color");
                    JsonSerializer.Serialize(writer, getOrganizationResponse.BackgroundColor, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("background_color");
            if (getOrganizationResponse.ButtonColorOption.IsSet)
                if (getOrganizationResponse.ButtonColorOption.Value != null)
                {
                    writer.WritePropertyName("button_color");
                    JsonSerializer.Serialize(writer, getOrganizationResponse.ButtonColor, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("button_color");
            if (getOrganizationResponse.ButtonTextColorOption.IsSet)
                if (getOrganizationResponse.ButtonTextColorOption.Value != null)
                {
                    writer.WritePropertyName("button_text_color");
                    JsonSerializer.Serialize(writer, getOrganizationResponse.ButtonTextColor, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("button_text_color");
            if (getOrganizationResponse.LinkColorDarkOption.IsSet)
                if (getOrganizationResponse.LinkColorDarkOption.Value != null)
                {
                    writer.WritePropertyName("link_color_dark");
                    JsonSerializer.Serialize(writer, getOrganizationResponse.LinkColorDark, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("link_color_dark");
            if (getOrganizationResponse.BackgroundColorDarkOption.IsSet)
                if (getOrganizationResponse.BackgroundColorDarkOption.Value != null)
                {
                    writer.WritePropertyName("background_color_dark");
                    JsonSerializer.Serialize(writer, getOrganizationResponse.BackgroundColorDark, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("background_color_dark");
            if (getOrganizationResponse.ButtonTextColorDarkOption.IsSet)
                if (getOrganizationResponse.ButtonTextColorDarkOption.Value != null)
                {
                    writer.WritePropertyName("button_text_color_dark");
                    JsonSerializer.Serialize(writer, getOrganizationResponse.ButtonTextColorDark, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("button_text_color_dark");
            if (getOrganizationResponse.ButtonColorDarkOption.IsSet)
                if (getOrganizationResponse.ButtonColorDarkOption.Value != null)
                {
                    writer.WritePropertyName("button_color_dark");
                    JsonSerializer.Serialize(writer, getOrganizationResponse.ButtonColorDark, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("button_color_dark");
            if (getOrganizationResponse.ButtonBorderRadiusOption.IsSet)
                if (getOrganizationResponse.ButtonBorderRadiusOption.Value != null)
                    writer.WriteNumber("button_border_radius", getOrganizationResponse.ButtonBorderRadiusOption.Value!.Value);
                else
                    writer.WriteNull("button_border_radius");

            if (getOrganizationResponse.CardBorderRadiusOption.IsSet)
                if (getOrganizationResponse.CardBorderRadiusOption.Value != null)
                    writer.WriteNumber("card_border_radius", getOrganizationResponse.CardBorderRadiusOption.Value!.Value);
                else
                    writer.WriteNull("card_border_radius");

            if (getOrganizationResponse.InputBorderRadiusOption.IsSet)
                if (getOrganizationResponse.InputBorderRadiusOption.Value != null)
                    writer.WriteNumber("input_border_radius", getOrganizationResponse.InputBorderRadiusOption.Value!.Value);
                else
                    writer.WriteNull("input_border_radius");

            var themeCodeRawValue = GetOrganizationResponse.ThemeCodeEnumToJsonValue(getOrganizationResponse.ThemeCodeOption.Value!.Value);
            writer.WriteString("theme_code", themeCodeRawValue);
            var colorSchemeRawValue = GetOrganizationResponse.ColorSchemeEnumToJsonValue(getOrganizationResponse.ColorSchemeOption.Value!.Value);
            writer.WriteString("color_scheme", colorSchemeRawValue);
            if (getOrganizationResponse.CreatedOnOption.IsSet)
                writer.WriteString("created_on", getOrganizationResponse.CreatedOn);

            if (getOrganizationResponse.IsAllowRegistrationsOption.IsSet)
                if (getOrganizationResponse.IsAllowRegistrationsOption.Value != null)
                    writer.WriteBoolean("is_allow_registrations", getOrganizationResponse.IsAllowRegistrationsOption.Value!.Value);
                else
                    writer.WriteNull("is_allow_registrations");

            if (getOrganizationResponse.SenderNameOption.IsSet)
                if (getOrganizationResponse.SenderNameOption.Value != null)
                    writer.WriteString("sender_name", getOrganizationResponse.SenderName);
                else
                    writer.WriteNull("sender_name");

            if (getOrganizationResponse.SenderEmailOption.IsSet)
                if (getOrganizationResponse.SenderEmailOption.Value != null)
                    writer.WriteString("sender_email", getOrganizationResponse.SenderEmail);
                else
                    writer.WriteNull("sender_email");

            if (getOrganizationResponse.BillingOption.IsSet)
            {
                writer.WritePropertyName("billing");
                JsonSerializer.Serialize(writer, getOrganizationResponse.Billing, jsonSerializerOptions);
            }
        }
    }
}
