// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// SearchUsersResponseResultsInnerApiScopesInner
    /// </summary>
    public partial class SearchUsersResponseResultsInnerApiScopesInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchUsersResponseResultsInnerApiScopesInner" /> class.
        /// </summary>
        /// <param name="orgCode">orgCode</param>
        /// <param name="scope">scope</param>
        /// <param name="apiId">apiId</param>
        [JsonConstructor]
        public SearchUsersResponseResultsInnerApiScopesInner(Option<string?> orgCode = default, Option<string?> scope = default, Option<string?> apiId = default)
        {
            OrgCodeOption = orgCode;
            ScopeOption = scope;
            ApiIdOption = apiId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of OrgCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrgCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrgCode
        /// </summary>
        [JsonPropertyName("org_code")]
        public string? OrgCode { get { return this.OrgCodeOption; } set { this.OrgCodeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Scope
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ScopeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [JsonPropertyName("scope")]
        public string? Scope { get { return this.ScopeOption; } set { this.ScopeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ApiId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ApiIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ApiId
        /// </summary>
        [JsonPropertyName("api_id")]
        public string? ApiId { get { return this.ApiIdOption; } set { this.ApiIdOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchUsersResponseResultsInnerApiScopesInner {\n");
            sb.Append("  OrgCode: ").Append(OrgCode).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  ApiId: ").Append(ApiId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SearchUsersResponseResultsInnerApiScopesInner" />
    /// </summary>
    public class SearchUsersResponseResultsInnerApiScopesInnerJsonConverter : JsonConverter<SearchUsersResponseResultsInnerApiScopesInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchUsersResponseResultsInnerApiScopesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchUsersResponseResultsInnerApiScopesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> orgCode = default;
            Option<string?> scope = default;
            Option<string?> apiId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "org_code":
                            orgCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scope":
                            scope = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "api_id":
                            apiId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (orgCode.IsSet && orgCode.Value == null)
                throw new ArgumentNullException(nameof(orgCode), "Property is not nullable for class SearchUsersResponseResultsInnerApiScopesInner.");

            if (scope.IsSet && scope.Value == null)
                throw new ArgumentNullException(nameof(scope), "Property is not nullable for class SearchUsersResponseResultsInnerApiScopesInner.");

            if (apiId.IsSet && apiId.Value == null)
                throw new ArgumentNullException(nameof(apiId), "Property is not nullable for class SearchUsersResponseResultsInnerApiScopesInner.");

            return new SearchUsersResponseResultsInnerApiScopesInner(orgCode, scope, apiId);
        }

        /// <summary>
        /// Serializes a <see cref="SearchUsersResponseResultsInnerApiScopesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchUsersResponseResultsInnerApiScopesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchUsersResponseResultsInnerApiScopesInner searchUsersResponseResultsInnerApiScopesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, searchUsersResponseResultsInnerApiScopesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SearchUsersResponseResultsInnerApiScopesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchUsersResponseResultsInnerApiScopesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchUsersResponseResultsInnerApiScopesInner searchUsersResponseResultsInnerApiScopesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchUsersResponseResultsInnerApiScopesInner.OrgCodeOption.IsSet && searchUsersResponseResultsInnerApiScopesInner.OrgCode == null)
                throw new ArgumentNullException(nameof(searchUsersResponseResultsInnerApiScopesInner.OrgCode), "Property is required for class SearchUsersResponseResultsInnerApiScopesInner.");

            if (searchUsersResponseResultsInnerApiScopesInner.ScopeOption.IsSet && searchUsersResponseResultsInnerApiScopesInner.Scope == null)
                throw new ArgumentNullException(nameof(searchUsersResponseResultsInnerApiScopesInner.Scope), "Property is required for class SearchUsersResponseResultsInnerApiScopesInner.");

            if (searchUsersResponseResultsInnerApiScopesInner.ApiIdOption.IsSet && searchUsersResponseResultsInnerApiScopesInner.ApiId == null)
                throw new ArgumentNullException(nameof(searchUsersResponseResultsInnerApiScopesInner.ApiId), "Property is required for class SearchUsersResponseResultsInnerApiScopesInner.");

            if (searchUsersResponseResultsInnerApiScopesInner.OrgCodeOption.IsSet)
                writer.WriteString("org_code", searchUsersResponseResultsInnerApiScopesInner.OrgCode);

            if (searchUsersResponseResultsInnerApiScopesInner.ScopeOption.IsSet)
                writer.WriteString("scope", searchUsersResponseResultsInnerApiScopesInner.Scope);

            if (searchUsersResponseResultsInnerApiScopesInner.ApiIdOption.IsSet)
                writer.WriteString("api_id", searchUsersResponseResultsInnerApiScopesInner.ApiId);
        }
    }
}
