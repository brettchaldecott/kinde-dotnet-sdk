// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetEventResponseEvent
    /// </summary>
    public partial class GetEventResponseEvent
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEventResponseEvent" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="source">source</param>
        /// <param name="eventId">eventId</param>
        /// <param name="timestamp">Timestamp in ISO 8601 format.</param>
        /// <param name="data">Event specific data object.</param>
        [JsonConstructor]
        public GetEventResponseEvent(Option<string?> type = default, Option<string?> source = default, Option<string?> eventId = default, Option<int?> timestamp = default, Option<Object?> data = default)
        {
            TypeOption = type;
            SourceOption = source;
            EventIdOption = eventId;
            TimestampOption = timestamp;
            DataOption = data;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Source
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [JsonPropertyName("source")]
        public string? Source { get { return this.SourceOption; } set { this.SourceOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of EventId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EventIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [JsonPropertyName("event_id")]
        public string? EventId { get { return this.EventIdOption; } set { this.EventIdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TimestampOption { get; private set; }

        /// <summary>
        /// Timestamp in ISO 8601 format.
        /// </summary>
        /// <value>Timestamp in ISO 8601 format.</value>
        [JsonPropertyName("timestamp")]
        public int? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> DataOption { get; private set; }

        /// <summary>
        /// Event specific data object.
        /// </summary>
        /// <value>Event specific data object.</value>
        [JsonPropertyName("data")]
        public Object? Data { get { return this.DataOption; } set { this.DataOption = new Option<Object?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEventResponseEvent {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetEventResponseEvent" />
    /// </summary>
    public class GetEventResponseEventJsonConverter : JsonConverter<GetEventResponseEvent>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetEventResponseEvent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetEventResponseEvent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;
            Option<string?> source = default;
            Option<string?> eventId = default;
            Option<int?> timestamp = default;
            Option<Object?> data = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "source":
                            source = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "event_id":
                            eventId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "timestamp":
                            timestamp = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "data":
                            data = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class GetEventResponseEvent.");

            if (source.IsSet && source.Value == null)
                throw new ArgumentNullException(nameof(source), "Property is not nullable for class GetEventResponseEvent.");

            if (eventId.IsSet && eventId.Value == null)
                throw new ArgumentNullException(nameof(eventId), "Property is not nullable for class GetEventResponseEvent.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class GetEventResponseEvent.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class GetEventResponseEvent.");

            return new GetEventResponseEvent(type, source, eventId, timestamp, data);
        }

        /// <summary>
        /// Serializes a <see cref="GetEventResponseEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEventResponseEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetEventResponseEvent getEventResponseEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getEventResponseEvent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetEventResponseEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEventResponseEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetEventResponseEvent getEventResponseEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getEventResponseEvent.TypeOption.IsSet && getEventResponseEvent.Type == null)
                throw new ArgumentNullException(nameof(getEventResponseEvent.Type), "Property is required for class GetEventResponseEvent.");

            if (getEventResponseEvent.SourceOption.IsSet && getEventResponseEvent.Source == null)
                throw new ArgumentNullException(nameof(getEventResponseEvent.Source), "Property is required for class GetEventResponseEvent.");

            if (getEventResponseEvent.EventIdOption.IsSet && getEventResponseEvent.EventId == null)
                throw new ArgumentNullException(nameof(getEventResponseEvent.EventId), "Property is required for class GetEventResponseEvent.");

            if (getEventResponseEvent.DataOption.IsSet && getEventResponseEvent.Data == null)
                throw new ArgumentNullException(nameof(getEventResponseEvent.Data), "Property is required for class GetEventResponseEvent.");

            if (getEventResponseEvent.TypeOption.IsSet)
                writer.WriteString("type", getEventResponseEvent.Type);

            if (getEventResponseEvent.SourceOption.IsSet)
                writer.WriteString("source", getEventResponseEvent.Source);

            if (getEventResponseEvent.EventIdOption.IsSet)
                writer.WriteString("event_id", getEventResponseEvent.EventId);

            if (getEventResponseEvent.TimestampOption.IsSet)
                writer.WriteNumber("timestamp", getEventResponseEvent.TimestampOption.Value!.Value);

            if (getEventResponseEvent.DataOption.IsSet)
            {
                writer.WritePropertyName("data");
                JsonSerializer.Serialize(writer, getEventResponseEvent.Data, jsonSerializerOptions);
            }
        }
    }
}
