// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// SetUserPasswordRequest
    /// </summary>
    public partial class SetUserPasswordRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetUserPasswordRequest" /> class.
        /// </summary>
        /// <param name="hashedPassword">The hashed password.</param>
        /// <param name="hashingMethod">The hashing method or algorithm used to encrypt the user’s password. Default is bcrypt.</param>
        /// <param name="salt">Extra characters added to passwords to make them stronger. Not required for bcrypt.</param>
        /// <param name="saltPosition">Position of salt in password string. Not required for bcrypt.</param>
        /// <param name="isTemporaryPassword">The user will be prompted to set a new password after entering this one.</param>
        [JsonConstructor]
        public SetUserPasswordRequest(string hashedPassword, Option<HashingMethodEnum?> hashingMethod = default, Option<string?> salt = default, Option<SaltPositionEnum?> saltPosition = default, Option<bool?> isTemporaryPassword = default)
        {
            HashedPassword = hashedPassword;
            HashingMethodOption = hashingMethod;
            SaltOption = salt;
            SaltPositionOption = saltPosition;
            IsTemporaryPasswordOption = isTemporaryPassword;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The hashing method or algorithm used to encrypt the user’s password. Default is bcrypt.
        /// </summary>
        /// <value>The hashing method or algorithm used to encrypt the user’s password. Default is bcrypt.</value>
        public enum HashingMethodEnum
        {
            /// <summary>
            /// Enum Bcrypt for value: bcrypt
            /// </summary>
            Bcrypt = 1,

            /// <summary>
            /// Enum Crypt for value: crypt
            /// </summary>
            Crypt = 2,

            /// <summary>
            /// Enum Md5 for value: md5
            /// </summary>
            Md5 = 3,

            /// <summary>
            /// Enum Wordpress for value: wordpress
            /// </summary>
            Wordpress = 4
        }

        /// <summary>
        /// Returns a <see cref="HashingMethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static HashingMethodEnum HashingMethodEnumFromString(string value)
        {
            if (value.Equals("bcrypt"))
                return HashingMethodEnum.Bcrypt;

            if (value.Equals("crypt"))
                return HashingMethodEnum.Crypt;

            if (value.Equals("md5"))
                return HashingMethodEnum.Md5;

            if (value.Equals("wordpress"))
                return HashingMethodEnum.Wordpress;

            throw new NotImplementedException($"Could not convert value to type HashingMethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="HashingMethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static HashingMethodEnum? HashingMethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("bcrypt"))
                return HashingMethodEnum.Bcrypt;

            if (value.Equals("crypt"))
                return HashingMethodEnum.Crypt;

            if (value.Equals("md5"))
                return HashingMethodEnum.Md5;

            if (value.Equals("wordpress"))
                return HashingMethodEnum.Wordpress;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="HashingMethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string HashingMethodEnumToJsonValue(HashingMethodEnum? value)
        {
            if (value == HashingMethodEnum.Bcrypt)
                return "bcrypt";

            if (value == HashingMethodEnum.Crypt)
                return "crypt";

            if (value == HashingMethodEnum.Md5)
                return "md5";

            if (value == HashingMethodEnum.Wordpress)
                return "wordpress";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of HashingMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<HashingMethodEnum?> HashingMethodOption { get; private set; }

        /// <summary>
        /// The hashing method or algorithm used to encrypt the user’s password. Default is bcrypt.
        /// </summary>
        /// <value>The hashing method or algorithm used to encrypt the user’s password. Default is bcrypt.</value>
        [JsonPropertyName("hashing_method")]
        public HashingMethodEnum? HashingMethod { get { return this.HashingMethodOption; } set { this.HashingMethodOption = new Option<HashingMethodEnum?>(value); } }

        /// <summary>
        /// Position of salt in password string. Not required for bcrypt.
        /// </summary>
        /// <value>Position of salt in password string. Not required for bcrypt.</value>
        public enum SaltPositionEnum
        {
            /// <summary>
            /// Enum Prefix for value: prefix
            /// </summary>
            Prefix = 1,

            /// <summary>
            /// Enum Suffix for value: suffix
            /// </summary>
            Suffix = 2
        }

        /// <summary>
        /// Returns a <see cref="SaltPositionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SaltPositionEnum SaltPositionEnumFromString(string value)
        {
            if (value.Equals("prefix"))
                return SaltPositionEnum.Prefix;

            if (value.Equals("suffix"))
                return SaltPositionEnum.Suffix;

            throw new NotImplementedException($"Could not convert value to type SaltPositionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SaltPositionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SaltPositionEnum? SaltPositionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("prefix"))
                return SaltPositionEnum.Prefix;

            if (value.Equals("suffix"))
                return SaltPositionEnum.Suffix;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SaltPositionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SaltPositionEnumToJsonValue(SaltPositionEnum? value)
        {
            if (value == SaltPositionEnum.Prefix)
                return "prefix";

            if (value == SaltPositionEnum.Suffix)
                return "suffix";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SaltPosition
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SaltPositionEnum?> SaltPositionOption { get; private set; }

        /// <summary>
        /// Position of salt in password string. Not required for bcrypt.
        /// </summary>
        /// <value>Position of salt in password string. Not required for bcrypt.</value>
        [JsonPropertyName("salt_position")]
        public SaltPositionEnum? SaltPosition { get { return this.SaltPositionOption; } set { this.SaltPositionOption = new Option<SaltPositionEnum?>(value); } }

        /// <summary>
        /// The hashed password.
        /// </summary>
        /// <value>The hashed password.</value>
        [JsonPropertyName("hashed_password")]
        public string HashedPassword { get; set; }

        /// <summary>
        /// Used to track the state of Salt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SaltOption { get; private set; }

        /// <summary>
        /// Extra characters added to passwords to make them stronger. Not required for bcrypt.
        /// </summary>
        /// <value>Extra characters added to passwords to make them stronger. Not required for bcrypt.</value>
        [JsonPropertyName("salt")]
        public string? Salt { get { return this.SaltOption; } set { this.SaltOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsTemporaryPassword
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsTemporaryPasswordOption { get; private set; }

        /// <summary>
        /// The user will be prompted to set a new password after entering this one.
        /// </summary>
        /// <value>The user will be prompted to set a new password after entering this one.</value>
        [JsonPropertyName("is_temporary_password")]
        public bool? IsTemporaryPassword { get { return this.IsTemporaryPasswordOption; } set { this.IsTemporaryPasswordOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetUserPasswordRequest {\n");
            sb.Append("  HashedPassword: ").Append(HashedPassword).Append("\n");
            sb.Append("  HashingMethod: ").Append(HashingMethod).Append("\n");
            sb.Append("  Salt: ").Append(Salt).Append("\n");
            sb.Append("  SaltPosition: ").Append(SaltPosition).Append("\n");
            sb.Append("  IsTemporaryPassword: ").Append(IsTemporaryPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SetUserPasswordRequest" />
    /// </summary>
    public class SetUserPasswordRequestJsonConverter : JsonConverter<SetUserPasswordRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="SetUserPasswordRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SetUserPasswordRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> hashedPassword = default;
            Option<SetUserPasswordRequest.HashingMethodEnum?> hashingMethod = default;
            Option<string?> salt = default;
            Option<SetUserPasswordRequest.SaltPositionEnum?> saltPosition = default;
            Option<bool?> isTemporaryPassword = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "hashed_password":
                            hashedPassword = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hashing_method":
                            string? hashingMethodRawValue = utf8JsonReader.GetString();
                            if (hashingMethodRawValue != null)
                                hashingMethod = new Option<SetUserPasswordRequest.HashingMethodEnum?>(SetUserPasswordRequest.HashingMethodEnumFromStringOrDefault(hashingMethodRawValue));
                            break;
                        case "salt":
                            salt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "salt_position":
                            string? saltPositionRawValue = utf8JsonReader.GetString();
                            if (saltPositionRawValue != null)
                                saltPosition = new Option<SetUserPasswordRequest.SaltPositionEnum?>(SetUserPasswordRequest.SaltPositionEnumFromStringOrDefault(saltPositionRawValue));
                            break;
                        case "is_temporary_password":
                            isTemporaryPassword = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!hashedPassword.IsSet)
                throw new ArgumentException("Property is required for class SetUserPasswordRequest.", nameof(hashedPassword));

            if (hashedPassword.IsSet && hashedPassword.Value == null)
                throw new ArgumentNullException(nameof(hashedPassword), "Property is not nullable for class SetUserPasswordRequest.");

            if (hashingMethod.IsSet && hashingMethod.Value == null)
                throw new ArgumentNullException(nameof(hashingMethod), "Property is not nullable for class SetUserPasswordRequest.");

            if (salt.IsSet && salt.Value == null)
                throw new ArgumentNullException(nameof(salt), "Property is not nullable for class SetUserPasswordRequest.");

            if (saltPosition.IsSet && saltPosition.Value == null)
                throw new ArgumentNullException(nameof(saltPosition), "Property is not nullable for class SetUserPasswordRequest.");

            if (isTemporaryPassword.IsSet && isTemporaryPassword.Value == null)
                throw new ArgumentNullException(nameof(isTemporaryPassword), "Property is not nullable for class SetUserPasswordRequest.");

            return new SetUserPasswordRequest(hashedPassword.Value!, hashingMethod, salt, saltPosition, isTemporaryPassword);
        }

        /// <summary>
        /// Serializes a <see cref="SetUserPasswordRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="setUserPasswordRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SetUserPasswordRequest setUserPasswordRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, setUserPasswordRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SetUserPasswordRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="setUserPasswordRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SetUserPasswordRequest setUserPasswordRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (setUserPasswordRequest.HashedPassword == null)
                throw new ArgumentNullException(nameof(setUserPasswordRequest.HashedPassword), "Property is required for class SetUserPasswordRequest.");

            if (setUserPasswordRequest.SaltOption.IsSet && setUserPasswordRequest.Salt == null)
                throw new ArgumentNullException(nameof(setUserPasswordRequest.Salt), "Property is required for class SetUserPasswordRequest.");

            writer.WriteString("hashed_password", setUserPasswordRequest.HashedPassword);

            var hashingMethodRawValue = SetUserPasswordRequest.HashingMethodEnumToJsonValue(setUserPasswordRequest.HashingMethodOption.Value!.Value);
            writer.WriteString("hashing_method", hashingMethodRawValue);
            if (setUserPasswordRequest.SaltOption.IsSet)
                writer.WriteString("salt", setUserPasswordRequest.Salt);

            var saltPositionRawValue = SetUserPasswordRequest.SaltPositionEnumToJsonValue(setUserPasswordRequest.SaltPositionOption.Value!.Value);
            writer.WriteString("salt_position", saltPositionRawValue);
            if (setUserPasswordRequest.IsTemporaryPasswordOption.IsSet)
                writer.WriteBoolean("is_temporary_password", setUserPasswordRequest.IsTemporaryPasswordOption.Value!.Value);
        }
    }
}
