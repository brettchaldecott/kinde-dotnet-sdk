// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetUserSessionsResponse
    /// </summary>
    public partial class GetUserSessionsResponse
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserSessionsResponse" /> class.
        /// </summary>
        /// <param name="code">code</param>
        /// <param name="message">message</param>
        /// <param name="hasMore">hasMore</param>
        /// <param name="sessions">sessions</param>
        [JsonConstructor]
        public GetUserSessionsResponse(Option<string?> code = default, Option<string?> message = default, Option<bool?> hasMore = default, Option<List<GetUserSessionsResponseSessionsInner>?> sessions = default)
        {
            CodeOption = code;
            MessageOption = message;
            HasMoreOption = hasMore;
            SessionsOption = sessions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        /* <example>OK</example> */
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        /* <example>Success</example> */
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of HasMore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasMoreOption { get; private set; }

        /// <summary>
        /// Gets or Sets HasMore
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("has_more")]
        public bool? HasMore { get { return this.HasMoreOption; } set { this.HasMoreOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Sessions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetUserSessionsResponseSessionsInner>?> SessionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sessions
        /// </summary>
        [JsonPropertyName("sessions")]
        public List<GetUserSessionsResponseSessionsInner>? Sessions { get { return this.SessionsOption; } set { this.SessionsOption = new Option<List<GetUserSessionsResponseSessionsInner>?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserSessionsResponse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  HasMore: ").Append(HasMore).Append("\n");
            sb.Append("  Sessions: ").Append(Sessions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetUserSessionsResponse" />
    /// </summary>
    public class GetUserSessionsResponseJsonConverter : JsonConverter<GetUserSessionsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetUserSessionsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetUserSessionsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> message = default;
            Option<bool?> hasMore = default;
            Option<List<GetUserSessionsResponseSessionsInner>?> sessions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "has_more":
                            hasMore = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sessions":
                            sessions = new Option<List<GetUserSessionsResponseSessionsInner>?>(JsonSerializer.Deserialize<List<GetUserSessionsResponseSessionsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class GetUserSessionsResponse.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class GetUserSessionsResponse.");

            if (hasMore.IsSet && hasMore.Value == null)
                throw new ArgumentNullException(nameof(hasMore), "Property is not nullable for class GetUserSessionsResponse.");

            if (sessions.IsSet && sessions.Value == null)
                throw new ArgumentNullException(nameof(sessions), "Property is not nullable for class GetUserSessionsResponse.");

            return new GetUserSessionsResponse(code, message, hasMore, sessions);
        }

        /// <summary>
        /// Serializes a <see cref="GetUserSessionsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserSessionsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetUserSessionsResponse getUserSessionsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getUserSessionsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetUserSessionsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserSessionsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetUserSessionsResponse getUserSessionsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getUserSessionsResponse.CodeOption.IsSet && getUserSessionsResponse.Code == null)
                throw new ArgumentNullException(nameof(getUserSessionsResponse.Code), "Property is required for class GetUserSessionsResponse.");

            if (getUserSessionsResponse.MessageOption.IsSet && getUserSessionsResponse.Message == null)
                throw new ArgumentNullException(nameof(getUserSessionsResponse.Message), "Property is required for class GetUserSessionsResponse.");

            if (getUserSessionsResponse.SessionsOption.IsSet && getUserSessionsResponse.Sessions == null)
                throw new ArgumentNullException(nameof(getUserSessionsResponse.Sessions), "Property is required for class GetUserSessionsResponse.");

            if (getUserSessionsResponse.CodeOption.IsSet)
                writer.WriteString("code", getUserSessionsResponse.Code);

            if (getUserSessionsResponse.MessageOption.IsSet)
                writer.WriteString("message", getUserSessionsResponse.Message);

            if (getUserSessionsResponse.HasMoreOption.IsSet)
                writer.WriteBoolean("has_more", getUserSessionsResponse.HasMoreOption.Value!.Value);

            if (getUserSessionsResponse.SessionsOption.IsSet)
            {
                writer.WritePropertyName("sessions");
                JsonSerializer.Serialize(writer, getUserSessionsResponse.Sessions, jsonSerializerOptions);
            }
        }
    }
}
