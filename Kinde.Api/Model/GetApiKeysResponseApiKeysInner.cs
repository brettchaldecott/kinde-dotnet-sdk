// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetApiKeysResponseApiKeysInner
    /// </summary>
    public partial class GetApiKeysResponseApiKeysInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetApiKeysResponseApiKeysInner" /> class.
        /// </summary>
        /// <param name="id">The unique ID for the API key.</param>
        /// <param name="name">The API key&#39;s name.</param>
        /// <param name="type">The type of API key.</param>
        /// <param name="status">The status of the API key.</param>
        /// <param name="keyPrefix">The first 6 characters of the API key for identification.</param>
        /// <param name="keySuffix">The last 4 characters of the API key for identification.</param>
        /// <param name="createdOn">When the API key was created.</param>
        /// <param name="lastVerifiedOn">When the API key was last verified.</param>
        /// <param name="lastVerifiedIp">The IP address from which the API key was last verified.</param>
        /// <param name="createdBy">The name of the user who created the API key.</param>
        /// <param name="apiIds">Array of API IDs associated with this key.</param>
        /// <param name="scopes">Array of scopes associated with this key.</param>
        [JsonConstructor]
        public GetApiKeysResponseApiKeysInner(Option<string?> id = default, Option<string?> name = default, Option<string?> type = default, Option<string?> status = default, Option<string?> keyPrefix = default, Option<string?> keySuffix = default, Option<DateTimeOffset?> createdOn = default, Option<DateTimeOffset?> lastVerifiedOn = default, Option<string?> lastVerifiedIp = default, Option<string?> createdBy = default, Option<List<string>?> apiIds = default, Option<List<string>?> scopes = default)
        {
            IdOption = id;
            NameOption = name;
            TypeOption = type;
            StatusOption = status;
            KeyPrefixOption = keyPrefix;
            KeySuffixOption = keySuffix;
            CreatedOnOption = createdOn;
            LastVerifiedOnOption = lastVerifiedOn;
            LastVerifiedIpOption = lastVerifiedIp;
            CreatedByOption = createdBy;
            ApiIdsOption = apiIds;
            ScopesOption = scopes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The unique ID for the API key.
        /// </summary>
        /// <value>The unique ID for the API key.</value>
        /* <example>api_key_0195ac80a14e8d71f42b98e75d3c61ad</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The API key&#39;s name.
        /// </summary>
        /// <value>The API key&#39;s name.</value>
        /* <example>My API Key</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// The type of API key.
        /// </summary>
        /// <value>The type of API key.</value>
        /* <example>organization</example> */
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// The status of the API key.
        /// </summary>
        /// <value>The status of the API key.</value>
        /* <example>active</example> */
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of KeyPrefix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyPrefixOption { get; private set; }

        /// <summary>
        /// The first 6 characters of the API key for identification.
        /// </summary>
        /// <value>The first 6 characters of the API key for identification.</value>
        /* <example>kinde_</example> */
        [JsonPropertyName("key_prefix")]
        public string? KeyPrefix { get { return this.KeyPrefixOption; } set { this.KeyPrefixOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of KeySuffix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeySuffixOption { get; private set; }

        /// <summary>
        /// The last 4 characters of the API key for identification.
        /// </summary>
        /// <value>The last 4 characters of the API key for identification.</value>
        /* <example>abcd</example> */
        [JsonPropertyName("key_suffix")]
        public string? KeySuffix { get { return this.KeySuffixOption; } set { this.KeySuffixOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> CreatedOnOption { get; private set; }

        /// <summary>
        /// When the API key was created.
        /// </summary>
        /// <value>When the API key was created.</value>
        /* <example>2024-11-18T13:32:03+11:00</example> */
        [JsonPropertyName("created_on")]
        public DateTimeOffset? CreatedOn { get { return this.CreatedOnOption; } set { this.CreatedOnOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of LastVerifiedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> LastVerifiedOnOption { get; private set; }

        /// <summary>
        /// When the API key was last verified.
        /// </summary>
        /// <value>When the API key was last verified.</value>
        /* <example>2024-11-18T13:32:03+11:00</example> */
        [JsonPropertyName("last_verified_on")]
        public DateTimeOffset? LastVerifiedOn { get { return this.LastVerifiedOnOption; } set { this.LastVerifiedOnOption = new Option<DateTimeOffset?>(value); } }

        /// <summary>
        /// Used to track the state of LastVerifiedIp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastVerifiedIpOption { get; private set; }

        /// <summary>
        /// The IP address from which the API key was last verified.
        /// </summary>
        /// <value>The IP address from which the API key was last verified.</value>
        /* <example>192.168.1.1</example> */
        [JsonPropertyName("last_verified_ip")]
        public string? LastVerifiedIp { get { return this.LastVerifiedIpOption; } set { this.LastVerifiedIpOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedBy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedByOption { get; private set; }

        /// <summary>
        /// The name of the user who created the API key.
        /// </summary>
        /// <value>The name of the user who created the API key.</value>
        /* <example>John Doe</example> */
        [JsonPropertyName("created_by")]
        public string? CreatedBy { get { return this.CreatedByOption; } set { this.CreatedByOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ApiIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ApiIdsOption { get; private set; }

        /// <summary>
        /// Array of API IDs associated with this key.
        /// </summary>
        /// <value>Array of API IDs associated with this key.</value>
        /* <example>[&quot;api_123&quot;,&quot;api_456&quot;]</example> */
        [JsonPropertyName("api_ids")]
        public List<string>? ApiIds { get { return this.ApiIdsOption; } set { this.ApiIdsOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Used to track the state of Scopes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ScopesOption { get; private set; }

        /// <summary>
        /// Array of scopes associated with this key.
        /// </summary>
        /// <value>Array of scopes associated with this key.</value>
        /* <example>[&quot;read:users&quot;,&quot;write:users&quot;]</example> */
        [JsonPropertyName("scopes")]
        public List<string>? Scopes { get { return this.ScopesOption; } set { this.ScopesOption = new Option<List<string>?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetApiKeysResponseApiKeysInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  KeyPrefix: ").Append(KeyPrefix).Append("\n");
            sb.Append("  KeySuffix: ").Append(KeySuffix).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  LastVerifiedOn: ").Append(LastVerifiedOn).Append("\n");
            sb.Append("  LastVerifiedIp: ").Append(LastVerifiedIp).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ApiIds: ").Append(ApiIds).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetApiKeysResponseApiKeysInner" />
    /// </summary>
    public class GetApiKeysResponseApiKeysInnerJsonConverter : JsonConverter<GetApiKeysResponseApiKeysInner>
    {
        /// <summary>
        /// The format to use to serialize CreatedOn
        /// </summary>
        public static string CreatedOnFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastVerifiedOn
        /// </summary>
        public static string LastVerifiedOnFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetApiKeysResponseApiKeysInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetApiKeysResponseApiKeysInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> type = default;
            Option<string?> status = default;
            Option<string?> keyPrefix = default;
            Option<string?> keySuffix = default;
            Option<DateTimeOffset?> createdOn = default;
            Option<DateTimeOffset?> lastVerifiedOn = default;
            Option<string?> lastVerifiedIp = default;
            Option<string?> createdBy = default;
            Option<List<string>?> apiIds = default;
            Option<List<string>?> scopes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key_prefix":
                            keyPrefix = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key_suffix":
                            keySuffix = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "created_on":
                            createdOn = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "last_verified_on":
                            lastVerifiedOn = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "last_verified_ip":
                            lastVerifiedIp = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "created_by":
                            createdBy = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "api_ids":
                            apiIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "scopes":
                            scopes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetApiKeysResponseApiKeysInner.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetApiKeysResponseApiKeysInner.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class GetApiKeysResponseApiKeysInner.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class GetApiKeysResponseApiKeysInner.");

            if (keyPrefix.IsSet && keyPrefix.Value == null)
                throw new ArgumentNullException(nameof(keyPrefix), "Property is not nullable for class GetApiKeysResponseApiKeysInner.");

            if (createdOn.IsSet && createdOn.Value == null)
                throw new ArgumentNullException(nameof(createdOn), "Property is not nullable for class GetApiKeysResponseApiKeysInner.");

            if (apiIds.IsSet && apiIds.Value == null)
                throw new ArgumentNullException(nameof(apiIds), "Property is not nullable for class GetApiKeysResponseApiKeysInner.");

            if (scopes.IsSet && scopes.Value == null)
                throw new ArgumentNullException(nameof(scopes), "Property is not nullable for class GetApiKeysResponseApiKeysInner.");

            return new GetApiKeysResponseApiKeysInner(id, name, type, status, keyPrefix, keySuffix, createdOn, lastVerifiedOn, lastVerifiedIp, createdBy, apiIds, scopes);
        }

        /// <summary>
        /// Serializes a <see cref="GetApiKeysResponseApiKeysInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getApiKeysResponseApiKeysInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetApiKeysResponseApiKeysInner getApiKeysResponseApiKeysInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getApiKeysResponseApiKeysInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetApiKeysResponseApiKeysInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getApiKeysResponseApiKeysInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetApiKeysResponseApiKeysInner getApiKeysResponseApiKeysInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getApiKeysResponseApiKeysInner.IdOption.IsSet && getApiKeysResponseApiKeysInner.Id == null)
                throw new ArgumentNullException(nameof(getApiKeysResponseApiKeysInner.Id), "Property is required for class GetApiKeysResponseApiKeysInner.");

            if (getApiKeysResponseApiKeysInner.NameOption.IsSet && getApiKeysResponseApiKeysInner.Name == null)
                throw new ArgumentNullException(nameof(getApiKeysResponseApiKeysInner.Name), "Property is required for class GetApiKeysResponseApiKeysInner.");

            if (getApiKeysResponseApiKeysInner.TypeOption.IsSet && getApiKeysResponseApiKeysInner.Type == null)
                throw new ArgumentNullException(nameof(getApiKeysResponseApiKeysInner.Type), "Property is required for class GetApiKeysResponseApiKeysInner.");

            if (getApiKeysResponseApiKeysInner.StatusOption.IsSet && getApiKeysResponseApiKeysInner.Status == null)
                throw new ArgumentNullException(nameof(getApiKeysResponseApiKeysInner.Status), "Property is required for class GetApiKeysResponseApiKeysInner.");

            if (getApiKeysResponseApiKeysInner.KeyPrefixOption.IsSet && getApiKeysResponseApiKeysInner.KeyPrefix == null)
                throw new ArgumentNullException(nameof(getApiKeysResponseApiKeysInner.KeyPrefix), "Property is required for class GetApiKeysResponseApiKeysInner.");

            if (getApiKeysResponseApiKeysInner.ApiIdsOption.IsSet && getApiKeysResponseApiKeysInner.ApiIds == null)
                throw new ArgumentNullException(nameof(getApiKeysResponseApiKeysInner.ApiIds), "Property is required for class GetApiKeysResponseApiKeysInner.");

            if (getApiKeysResponseApiKeysInner.ScopesOption.IsSet && getApiKeysResponseApiKeysInner.Scopes == null)
                throw new ArgumentNullException(nameof(getApiKeysResponseApiKeysInner.Scopes), "Property is required for class GetApiKeysResponseApiKeysInner.");

            if (getApiKeysResponseApiKeysInner.IdOption.IsSet)
                writer.WriteString("id", getApiKeysResponseApiKeysInner.Id);

            if (getApiKeysResponseApiKeysInner.NameOption.IsSet)
                writer.WriteString("name", getApiKeysResponseApiKeysInner.Name);

            if (getApiKeysResponseApiKeysInner.TypeOption.IsSet)
                writer.WriteString("type", getApiKeysResponseApiKeysInner.Type);

            if (getApiKeysResponseApiKeysInner.StatusOption.IsSet)
                writer.WriteString("status", getApiKeysResponseApiKeysInner.Status);

            if (getApiKeysResponseApiKeysInner.KeyPrefixOption.IsSet)
                writer.WriteString("key_prefix", getApiKeysResponseApiKeysInner.KeyPrefix);

            if (getApiKeysResponseApiKeysInner.KeySuffixOption.IsSet)
                if (getApiKeysResponseApiKeysInner.KeySuffixOption.Value != null)
                    writer.WriteString("key_suffix", getApiKeysResponseApiKeysInner.KeySuffix);
                else
                    writer.WriteNull("key_suffix");

            if (getApiKeysResponseApiKeysInner.CreatedOnOption.IsSet)
                writer.WriteString("created_on", getApiKeysResponseApiKeysInner.CreatedOnOption.Value!.Value.ToString(CreatedOnFormat));

            if (getApiKeysResponseApiKeysInner.LastVerifiedOnOption.IsSet)
                if (getApiKeysResponseApiKeysInner.LastVerifiedOnOption.Value != null)
                    writer.WriteString("last_verified_on", getApiKeysResponseApiKeysInner.LastVerifiedOnOption.Value!.Value.ToString(LastVerifiedOnFormat));
                else
                    writer.WriteNull("last_verified_on");

            if (getApiKeysResponseApiKeysInner.LastVerifiedIpOption.IsSet)
                if (getApiKeysResponseApiKeysInner.LastVerifiedIpOption.Value != null)
                    writer.WriteString("last_verified_ip", getApiKeysResponseApiKeysInner.LastVerifiedIp);
                else
                    writer.WriteNull("last_verified_ip");

            if (getApiKeysResponseApiKeysInner.CreatedByOption.IsSet)
                if (getApiKeysResponseApiKeysInner.CreatedByOption.Value != null)
                    writer.WriteString("created_by", getApiKeysResponseApiKeysInner.CreatedBy);
                else
                    writer.WriteNull("created_by");

            if (getApiKeysResponseApiKeysInner.ApiIdsOption.IsSet)
            {
                writer.WritePropertyName("api_ids");
                JsonSerializer.Serialize(writer, getApiKeysResponseApiKeysInner.ApiIds, jsonSerializerOptions);
            }
            if (getApiKeysResponseApiKeysInner.ScopesOption.IsSet)
            {
                writer.WritePropertyName("scopes");
                JsonSerializer.Serialize(writer, getApiKeysResponseApiKeysInner.Scopes, jsonSerializerOptions);
            }
        }
    }
}
