// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// Additional details required to create the user.
    /// </summary>
    public partial class CreateUserRequestIdentitiesInnerDetails
    {
        /// <summary>
        /// </summary>
        /// <param name="email">The email address of the user.</param>
        /// <param name="phone">The phone number of the user.</param>
        /// <param name="phoneCountryId">The country code for the phone number.</param>
        /// <param name="username">The username of the user.</param>
        [JsonConstructor]
        public CreateUserRequestIdentitiesInnerDetails(Option<string?> email = default, Option<string?> phone = default, Option<string?> phoneCountryId = default, Option<string?> username = default)
        {
            EmailOption = email;
            PhoneOption = phone;
            PhoneCountryIdOption = phoneCountryId;
            UsernameOption = username;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// The email address of the user.
        /// </summary>
        /// <value>The email address of the user.</value>
        /* <example>email@email.com</example> */
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneOption { get; private set; }

        /// <summary>
        /// The phone number of the user.
        /// </summary>
        /// <value>The phone number of the user.</value>
        /* <example>+61426148233</example> */
        [JsonPropertyName("phone")]
        public string? Phone { get { return this.PhoneOption; } set { this.PhoneOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneCountryIdOption { get; private set; }

        /// <summary>
        /// The country code for the phone number.
        /// </summary>
        /// <value>The country code for the phone number.</value>
        /* <example>au</example> */
        [JsonPropertyName("phone_country_id")]
        public string? PhoneCountryId { get { return this.PhoneCountryIdOption; } set { this.PhoneCountryIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Username
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UsernameOption { get; private set; }

        /// <summary>
        /// The username of the user.
        /// </summary>
        /// <value>The username of the user.</value>
        /* <example>myusername</example> */
        [JsonPropertyName("username")]
        public string? Username { get { return this.UsernameOption; } set { this.UsernameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateUserRequestIdentitiesInnerDetails {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PhoneCountryId: ").Append(PhoneCountryId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class CreateUserRequestIdentitiesInnerDetailsJsonConverter : JsonConverter<CreateUserRequestIdentitiesInnerDetails>
    {
        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateUserRequestIdentitiesInnerDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> email = default;
            Option<string?> phone = default;
            Option<string?> phoneCountryId = default;
            Option<string?> username = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "phone":
                            phone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "phone_country_id":
                            phoneCountryId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "username":
                            username = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class CreateUserRequestIdentitiesInnerDetails.");

            if (phone.IsSet && phone.Value == null)
                throw new ArgumentNullException(nameof(phone), "Property is not nullable for class CreateUserRequestIdentitiesInnerDetails.");

            if (phoneCountryId.IsSet && phoneCountryId.Value == null)
                throw new ArgumentNullException(nameof(phoneCountryId), "Property is not nullable for class CreateUserRequestIdentitiesInnerDetails.");

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class CreateUserRequestIdentitiesInnerDetails.");

            return new CreateUserRequestIdentitiesInnerDetails(email, phone, phoneCountryId, username);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, CreateUserRequestIdentitiesInnerDetails createUserRequestIdentitiesInnerDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createUserRequestIdentitiesInnerDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, CreateUserRequestIdentitiesInnerDetails createUserRequestIdentitiesInnerDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createUserRequestIdentitiesInnerDetails.EmailOption.IsSet && createUserRequestIdentitiesInnerDetails.Email == null)
                throw new ArgumentNullException(nameof(createUserRequestIdentitiesInnerDetails.Email), "Property is required for class CreateUserRequestIdentitiesInnerDetails.");

            if (createUserRequestIdentitiesInnerDetails.PhoneOption.IsSet && createUserRequestIdentitiesInnerDetails.Phone == null)
                throw new ArgumentNullException(nameof(createUserRequestIdentitiesInnerDetails.Phone), "Property is required for class CreateUserRequestIdentitiesInnerDetails.");

            if (createUserRequestIdentitiesInnerDetails.PhoneCountryIdOption.IsSet && createUserRequestIdentitiesInnerDetails.PhoneCountryId == null)
                throw new ArgumentNullException(nameof(createUserRequestIdentitiesInnerDetails.PhoneCountryId), "Property is required for class CreateUserRequestIdentitiesInnerDetails.");

            if (createUserRequestIdentitiesInnerDetails.UsernameOption.IsSet && createUserRequestIdentitiesInnerDetails.Username == null)
                throw new ArgumentNullException(nameof(createUserRequestIdentitiesInnerDetails.Username), "Property is required for class CreateUserRequestIdentitiesInnerDetails.");

            if (createUserRequestIdentitiesInnerDetails.EmailOption.IsSet)
                writer.WriteString("email", createUserRequestIdentitiesInnerDetails.Email);

            if (createUserRequestIdentitiesInnerDetails.PhoneOption.IsSet)
                writer.WriteString("phone", createUserRequestIdentitiesInnerDetails.Phone);

            if (createUserRequestIdentitiesInnerDetails.PhoneCountryIdOption.IsSet)
                writer.WriteString("phone_country_id", createUserRequestIdentitiesInnerDetails.PhoneCountryId);

            if (createUserRequestIdentitiesInnerDetails.UsernameOption.IsSet)
                writer.WriteString("username", createUserRequestIdentitiesInnerDetails.Username);
        }
    }
}
