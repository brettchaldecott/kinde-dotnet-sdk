// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    public partial class CreateCategoryRequest
    {
        /// <summary>
        /// </summary>
        /// <param name="name">The name of the category.</param>
        /// <param name="context">The context that the category applies to.</param>
        [JsonConstructor]
        public CreateCategoryRequest(string name, ContextEnum context)
        {
            Name = name;
            Context = context;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The context that the category applies to.
        /// </summary>
        /// <value>The context that the category applies to.</value>
        public enum ContextEnum
        {
            /// <summary>
            /// Enum Org for value: org
            /// </summary>
            Org = 1,

            /// <summary>
            /// Enum Usr for value: usr
            /// </summary>
            Usr = 2,

            /// <summary>
            /// Enum App for value: app
            /// </summary>
            App = 3
        }

        /// <summary>
        /// Returns a <see cref="ContextEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ContextEnum ContextEnumFromString(string value)
        {
            if (value.Equals("org"))
                return ContextEnum.Org;

            if (value.Equals("usr"))
                return ContextEnum.Usr;

            if (value.Equals("app"))
                return ContextEnum.App;

            throw new NotImplementedException($"Could not convert value to type ContextEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ContextEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ContextEnum? ContextEnumFromStringOrDefault(string value)
        {
            if (value.Equals("org"))
                return ContextEnum.Org;

            if (value.Equals("usr"))
                return ContextEnum.Usr;

            if (value.Equals("app"))
                return ContextEnum.App;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ContextEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string ContextEnumToJsonValue(ContextEnum value)
        {
            if (value == ContextEnum.Org)
                return "org";

            if (value == ContextEnum.Usr)
                return "usr";

            if (value == ContextEnum.App)
                return "app";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The context that the category applies to.
        /// </summary>
        /// <value>The context that the category applies to.</value>
        [JsonPropertyName("context")]
        public ContextEnum Context { get; set; }

        /// <summary>
        /// The name of the category.
        /// </summary>
        /// <value>The name of the category.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCategoryRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class CreateCategoryRequestJsonConverter : JsonConverter<CreateCategoryRequest>
    {
        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateCategoryRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<CreateCategoryRequest.ContextEnum?> context = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "context":
                            string? contextRawValue = utf8JsonReader.GetString();
                            if (contextRawValue != null)
                                context = new Option<CreateCategoryRequest.ContextEnum?>(CreateCategoryRequest.ContextEnumFromStringOrDefault(contextRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateCategoryRequest.", nameof(name));

            if (!context.IsSet)
                throw new ArgumentException("Property is required for class CreateCategoryRequest.", nameof(context));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateCategoryRequest.");

            if (context.IsSet && context.Value == null)
                throw new ArgumentNullException(nameof(context), "Property is not nullable for class CreateCategoryRequest.");

            return new CreateCategoryRequest(name.Value!, context.Value!.Value!);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, CreateCategoryRequest createCategoryRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createCategoryRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, CreateCategoryRequest createCategoryRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createCategoryRequest.Name == null)
                throw new ArgumentNullException(nameof(createCategoryRequest.Name), "Property is required for class CreateCategoryRequest.");

            writer.WriteString("name", createCategoryRequest.Name);

            var contextRawValue = CreateCategoryRequest.ContextEnumToJsonValue(createCategoryRequest.Context);
            writer.WriteString("context", contextRawValue);
        }
    }
}
