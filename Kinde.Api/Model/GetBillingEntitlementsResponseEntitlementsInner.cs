// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetBillingEntitlementsResponseEntitlementsInner
    /// </summary>
    public partial class GetBillingEntitlementsResponseEntitlementsInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBillingEntitlementsResponseEntitlementsInner" /> class.
        /// </summary>
        /// <param name="id">The friendly id of an entitlement</param>
        /// <param name="fixedCharge">The price charged if this is an entitlement for a fixed charged</param>
        /// <param name="priceName">The name of the price associated with the entitlement</param>
        /// <param name="unitAmount">The price charged for this entitlement in cents</param>
        /// <param name="featureCode">The feature code of the feature corresponding to this entitlement</param>
        /// <param name="featureName">The feature name of the feature corresponding to this entitlement</param>
        /// <param name="entitlementLimitMax">The maximum number of units of the feature the customer is entitled to</param>
        /// <param name="entitlementLimitMin">The minimum number of units of the feature the customer is entitled to</param>
        [JsonConstructor]
        public GetBillingEntitlementsResponseEntitlementsInner(Option<string?> id = default, Option<int?> fixedCharge = default, Option<string?> priceName = default, Option<int?> unitAmount = default, Option<string?> featureCode = default, Option<string?> featureName = default, Option<int?> entitlementLimitMax = default, Option<int?> entitlementLimitMin = default)
        {
            IdOption = id;
            FixedChargeOption = fixedCharge;
            PriceNameOption = priceName;
            UnitAmountOption = unitAmount;
            FeatureCodeOption = featureCode;
            FeatureNameOption = featureName;
            EntitlementLimitMaxOption = entitlementLimitMax;
            EntitlementLimitMinOption = entitlementLimitMin;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The friendly id of an entitlement
        /// </summary>
        /// <value>The friendly id of an entitlement</value>
        /* <example>entitlement_0195ac80a14e8d71f42b98e75d3c61ad</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FixedCharge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FixedChargeOption { get; private set; }

        /// <summary>
        /// The price charged if this is an entitlement for a fixed charged
        /// </summary>
        /// <value>The price charged if this is an entitlement for a fixed charged</value>
        /* <example>35</example> */
        [JsonPropertyName("fixed_charge")]
        public int? FixedCharge { get { return this.FixedChargeOption; } set { this.FixedChargeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PriceName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PriceNameOption { get; private set; }

        /// <summary>
        /// The name of the price associated with the entitlement
        /// </summary>
        /// <value>The name of the price associated with the entitlement</value>
        /* <example>Pro gym</example> */
        [JsonPropertyName("price_name")]
        public string? PriceName { get { return this.PriceNameOption; } set { this.PriceNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnitAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> UnitAmountOption { get; private set; }

        /// <summary>
        /// The price charged for this entitlement in cents
        /// </summary>
        /// <value>The price charged for this entitlement in cents</value>
        [JsonPropertyName("unit_amount")]
        public int? UnitAmount { get { return this.UnitAmountOption; } set { this.UnitAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of FeatureCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FeatureCodeOption { get; private set; }

        /// <summary>
        /// The feature code of the feature corresponding to this entitlement
        /// </summary>
        /// <value>The feature code of the feature corresponding to this entitlement</value>
        /* <example>CcdkvEXpbg6UY</example> */
        [JsonPropertyName("feature_code")]
        public string? FeatureCode { get { return this.FeatureCodeOption; } set { this.FeatureCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of FeatureName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FeatureNameOption { get; private set; }

        /// <summary>
        /// The feature name of the feature corresponding to this entitlement
        /// </summary>
        /// <value>The feature name of the feature corresponding to this entitlement</value>
        /* <example>Pro Gym</example> */
        [JsonPropertyName("feature_name")]
        public string? FeatureName { get { return this.FeatureNameOption; } set { this.FeatureNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of EntitlementLimitMax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EntitlementLimitMaxOption { get; private set; }

        /// <summary>
        /// The maximum number of units of the feature the customer is entitled to
        /// </summary>
        /// <value>The maximum number of units of the feature the customer is entitled to</value>
        [JsonPropertyName("entitlement_limit_max")]
        public int? EntitlementLimitMax { get { return this.EntitlementLimitMaxOption; } set { this.EntitlementLimitMaxOption = new(value); } }

        /// <summary>
        /// Used to track the state of EntitlementLimitMin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EntitlementLimitMinOption { get; private set; }

        /// <summary>
        /// The minimum number of units of the feature the customer is entitled to
        /// </summary>
        /// <value>The minimum number of units of the feature the customer is entitled to</value>
        [JsonPropertyName("entitlement_limit_min")]
        public int? EntitlementLimitMin { get { return this.EntitlementLimitMinOption; } set { this.EntitlementLimitMinOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetBillingEntitlementsResponseEntitlementsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FixedCharge: ").Append(FixedCharge).Append("\n");
            sb.Append("  PriceName: ").Append(PriceName).Append("\n");
            sb.Append("  UnitAmount: ").Append(UnitAmount).Append("\n");
            sb.Append("  FeatureCode: ").Append(FeatureCode).Append("\n");
            sb.Append("  FeatureName: ").Append(FeatureName).Append("\n");
            sb.Append("  EntitlementLimitMax: ").Append(EntitlementLimitMax).Append("\n");
            sb.Append("  EntitlementLimitMin: ").Append(EntitlementLimitMin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetBillingEntitlementsResponseEntitlementsInner" />
    /// </summary>
    public class GetBillingEntitlementsResponseEntitlementsInnerJsonConverter : JsonConverter<GetBillingEntitlementsResponseEntitlementsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetBillingEntitlementsResponseEntitlementsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetBillingEntitlementsResponseEntitlementsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<int?> fixedCharge = default;
            Option<string?> priceName = default;
            Option<int?> unitAmount = default;
            Option<string?> featureCode = default;
            Option<string?> featureName = default;
            Option<int?> entitlementLimitMax = default;
            Option<int?> entitlementLimitMin = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fixed_charge":
                            fixedCharge = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "price_name":
                            priceName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "unit_amount":
                            unitAmount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "feature_code":
                            featureCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "feature_name":
                            featureName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "entitlement_limit_max":
                            entitlementLimitMax = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "entitlement_limit_min":
                            entitlementLimitMin = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetBillingEntitlementsResponseEntitlementsInner.");

            if (fixedCharge.IsSet && fixedCharge.Value == null)
                throw new ArgumentNullException(nameof(fixedCharge), "Property is not nullable for class GetBillingEntitlementsResponseEntitlementsInner.");

            if (priceName.IsSet && priceName.Value == null)
                throw new ArgumentNullException(nameof(priceName), "Property is not nullable for class GetBillingEntitlementsResponseEntitlementsInner.");

            if (unitAmount.IsSet && unitAmount.Value == null)
                throw new ArgumentNullException(nameof(unitAmount), "Property is not nullable for class GetBillingEntitlementsResponseEntitlementsInner.");

            if (featureCode.IsSet && featureCode.Value == null)
                throw new ArgumentNullException(nameof(featureCode), "Property is not nullable for class GetBillingEntitlementsResponseEntitlementsInner.");

            if (featureName.IsSet && featureName.Value == null)
                throw new ArgumentNullException(nameof(featureName), "Property is not nullable for class GetBillingEntitlementsResponseEntitlementsInner.");

            if (entitlementLimitMax.IsSet && entitlementLimitMax.Value == null)
                throw new ArgumentNullException(nameof(entitlementLimitMax), "Property is not nullable for class GetBillingEntitlementsResponseEntitlementsInner.");

            if (entitlementLimitMin.IsSet && entitlementLimitMin.Value == null)
                throw new ArgumentNullException(nameof(entitlementLimitMin), "Property is not nullable for class GetBillingEntitlementsResponseEntitlementsInner.");

            return new GetBillingEntitlementsResponseEntitlementsInner(id, fixedCharge, priceName, unitAmount, featureCode, featureName, entitlementLimitMax, entitlementLimitMin);
        }

        /// <summary>
        /// Serializes a <see cref="GetBillingEntitlementsResponseEntitlementsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getBillingEntitlementsResponseEntitlementsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetBillingEntitlementsResponseEntitlementsInner getBillingEntitlementsResponseEntitlementsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getBillingEntitlementsResponseEntitlementsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetBillingEntitlementsResponseEntitlementsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getBillingEntitlementsResponseEntitlementsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetBillingEntitlementsResponseEntitlementsInner getBillingEntitlementsResponseEntitlementsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getBillingEntitlementsResponseEntitlementsInner.IdOption.IsSet && getBillingEntitlementsResponseEntitlementsInner.Id == null)
                throw new ArgumentNullException(nameof(getBillingEntitlementsResponseEntitlementsInner.Id), "Property is required for class GetBillingEntitlementsResponseEntitlementsInner.");

            if (getBillingEntitlementsResponseEntitlementsInner.PriceNameOption.IsSet && getBillingEntitlementsResponseEntitlementsInner.PriceName == null)
                throw new ArgumentNullException(nameof(getBillingEntitlementsResponseEntitlementsInner.PriceName), "Property is required for class GetBillingEntitlementsResponseEntitlementsInner.");

            if (getBillingEntitlementsResponseEntitlementsInner.FeatureCodeOption.IsSet && getBillingEntitlementsResponseEntitlementsInner.FeatureCode == null)
                throw new ArgumentNullException(nameof(getBillingEntitlementsResponseEntitlementsInner.FeatureCode), "Property is required for class GetBillingEntitlementsResponseEntitlementsInner.");

            if (getBillingEntitlementsResponseEntitlementsInner.FeatureNameOption.IsSet && getBillingEntitlementsResponseEntitlementsInner.FeatureName == null)
                throw new ArgumentNullException(nameof(getBillingEntitlementsResponseEntitlementsInner.FeatureName), "Property is required for class GetBillingEntitlementsResponseEntitlementsInner.");

            if (getBillingEntitlementsResponseEntitlementsInner.IdOption.IsSet)
                writer.WriteString("id", getBillingEntitlementsResponseEntitlementsInner.Id);

            if (getBillingEntitlementsResponseEntitlementsInner.FixedChargeOption.IsSet)
                writer.WriteNumber("fixed_charge", getBillingEntitlementsResponseEntitlementsInner.FixedChargeOption.Value!.Value);

            if (getBillingEntitlementsResponseEntitlementsInner.PriceNameOption.IsSet)
                writer.WriteString("price_name", getBillingEntitlementsResponseEntitlementsInner.PriceName);

            if (getBillingEntitlementsResponseEntitlementsInner.UnitAmountOption.IsSet)
                writer.WriteNumber("unit_amount", getBillingEntitlementsResponseEntitlementsInner.UnitAmountOption.Value!.Value);

            if (getBillingEntitlementsResponseEntitlementsInner.FeatureCodeOption.IsSet)
                writer.WriteString("feature_code", getBillingEntitlementsResponseEntitlementsInner.FeatureCode);

            if (getBillingEntitlementsResponseEntitlementsInner.FeatureNameOption.IsSet)
                writer.WriteString("feature_name", getBillingEntitlementsResponseEntitlementsInner.FeatureName);

            if (getBillingEntitlementsResponseEntitlementsInner.EntitlementLimitMaxOption.IsSet)
                writer.WriteNumber("entitlement_limit_max", getBillingEntitlementsResponseEntitlementsInner.EntitlementLimitMaxOption.Value!.Value);

            if (getBillingEntitlementsResponseEntitlementsInner.EntitlementLimitMinOption.IsSet)
                writer.WriteNumber("entitlement_limit_min", getBillingEntitlementsResponseEntitlementsInner.EntitlementLimitMinOption.Value!.Value);
        }
    }
}
