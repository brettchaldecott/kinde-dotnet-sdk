// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// SAML connection options (e.g., Cloudflare SAML).
    /// </summary>
    public partial class CreateConnectionRequestOptionsOneOf2
    {
        /// <summary>
        /// </summary>
        /// <param name="samlEntityId">SAML Entity ID.</param>
        /// <param name="samlAcsUrl">Assertion Consumer Service URL.</param>
        /// <param name="samlSignInUrl">Override the default SSO endpoint with a URL your IdP recognizes.</param>
        /// <param name="upstreamParams">Additional upstream parameters to pass to the identity provider.</param>
        [JsonConstructor]
        public CreateConnectionRequestOptionsOneOf2(Option<List<string>?> homeRealmDomains = default, Option<string?> samlEntityId = default, Option<string?> samlAcsUrl = default, Option<string?> samlIdpMetadataUrl = default, Option<string?> samlSignInUrl = default, Option<string?> samlEmailKeyAttr = default, Option<string?> samlFirstNameKeyAttr = default, Option<string?> samlLastNameKeyAttr = default, Option<bool?> isCreateMissingUser = default, Option<bool?> isForceShowSsoButton = default, Option<Dictionary<string, Object>?> upstreamParams = default, Option<string?> samlSigningCertificate = default, Option<string?> samlSigningPrivateKey = default, Option<bool?> isAutoJoinOrganizationEnabled = default)
        {
            HomeRealmDomainsOption = homeRealmDomains;
            SamlEntityIdOption = samlEntityId;
            SamlAcsUrlOption = samlAcsUrl;
            SamlIdpMetadataUrlOption = samlIdpMetadataUrl;
            SamlSignInUrlOption = samlSignInUrl;
            SamlEmailKeyAttrOption = samlEmailKeyAttr;
            SamlFirstNameKeyAttrOption = samlFirstNameKeyAttr;
            SamlLastNameKeyAttrOption = samlLastNameKeyAttr;
            IsCreateMissingUserOption = isCreateMissingUser;
            IsForceShowSsoButtonOption = isForceShowSsoButton;
            UpstreamParamsOption = upstreamParams;
            SamlSigningCertificateOption = samlSigningCertificate;
            SamlSigningPrivateKeyOption = samlSigningPrivateKey;
            IsAutoJoinOrganizationEnabledOption = isAutoJoinOrganizationEnabled;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> HomeRealmDomainsOption { get; private set; }

        /// <summary>
        /// List of domains to restrict authentication.
        /// </summary>
        /// <value>List of domains to restrict authentication.</value>
        /* <example>[&quot;@kinde.com&quot;,&quot;@kinde.io&quot;]</example> */
        [JsonPropertyName("home_realm_domains")]
        public List<string>? HomeRealmDomains { get { return this.HomeRealmDomainsOption; } set { this.HomeRealmDomainsOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SamlEntityIdOption { get; private set; }

        /// <summary>
        /// SAML Entity ID.
        /// </summary>
        /// <value>SAML Entity ID.</value>
        /* <example>https://kinde.com</example> */
        [JsonPropertyName("saml_entity_id")]
        public string? SamlEntityId { get { return this.SamlEntityIdOption; } set { this.SamlEntityIdOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SamlAcsUrlOption { get; private set; }

        /// <summary>
        /// Assertion Consumer Service URL.
        /// </summary>
        /// <value>Assertion Consumer Service URL.</value>
        /* <example>https://kinde.com/saml/acs</example> */
        [JsonPropertyName("saml_acs_url")]
        public string? SamlAcsUrl { get { return this.SamlAcsUrlOption; } set { this.SamlAcsUrlOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SamlIdpMetadataUrlOption { get; private set; }

        /// <summary>
        /// URL for the IdP metadata.
        /// </summary>
        /// <value>URL for the IdP metadata.</value>
        /* <example>https://kinde.com/saml/metadata</example> */
        [JsonPropertyName("saml_idp_metadata_url")]
        public string? SamlIdpMetadataUrl { get { return this.SamlIdpMetadataUrlOption; } set { this.SamlIdpMetadataUrlOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SamlSignInUrlOption { get; private set; }

        /// <summary>
        /// Override the default SSO endpoint with a URL your IdP recognizes.
        /// </summary>
        /// <value>Override the default SSO endpoint with a URL your IdP recognizes.</value>
        /* <example>https://kinde.com/saml/signin</example> */
        [JsonPropertyName("saml_sign_in_url")]
        public string? SamlSignInUrl { get { return this.SamlSignInUrlOption; } set { this.SamlSignInUrlOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SamlEmailKeyAttrOption { get; private set; }

        /// <summary>
        /// Attribute key for the user’s email.
        /// </summary>
        /// <value>Attribute key for the user’s email.</value>
        /* <example>email</example> */
        [JsonPropertyName("saml_email_key_attr")]
        public string? SamlEmailKeyAttr { get { return this.SamlEmailKeyAttrOption; } set { this.SamlEmailKeyAttrOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SamlFirstNameKeyAttrOption { get; private set; }

        /// <summary>
        /// Attribute key for the user’s first name.
        /// </summary>
        /// <value>Attribute key for the user’s first name.</value>
        /* <example>given_name</example> */
        [JsonPropertyName("saml_first_name_key_attr")]
        public string? SamlFirstNameKeyAttr { get { return this.SamlFirstNameKeyAttrOption; } set { this.SamlFirstNameKeyAttrOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SamlLastNameKeyAttrOption { get; private set; }

        /// <summary>
        /// Attribute key for the user’s last name.
        /// </summary>
        /// <value>Attribute key for the user’s last name.</value>
        /* <example>family_name</example> */
        [JsonPropertyName("saml_last_name_key_attr")]
        public string? SamlLastNameKeyAttr { get { return this.SamlLastNameKeyAttrOption; } set { this.SamlLastNameKeyAttrOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsCreateMissingUserOption { get; private set; }

        /// <summary>
        /// Create user if they don’t exist.
        /// </summary>
        /// <value>Create user if they don’t exist.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_create_missing_user")]
        public bool? IsCreateMissingUser { get { return this.IsCreateMissingUserOption; } set { this.IsCreateMissingUserOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsForceShowSsoButtonOption { get; private set; }

        /// <summary>
        /// Force showing the SSO button for this connection.
        /// </summary>
        /// <value>Force showing the SSO button for this connection.</value>
        /* <example>false</example> */
        [JsonPropertyName("is_force_show_sso_button")]
        public bool? IsForceShowSsoButton { get { return this.IsForceShowSsoButtonOption; } set { this.IsForceShowSsoButtonOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> UpstreamParamsOption { get; private set; }

        /// <summary>
        /// Additional upstream parameters to pass to the identity provider.
        /// </summary>
        /// <value>Additional upstream parameters to pass to the identity provider.</value>
        /* <example>{&quot;prompt&quot;:{&quot;value&quot;:&quot;select_account&quot;}}</example> */
        [JsonPropertyName("upstream_params")]
        public Dictionary<string, Object>? UpstreamParams { get { return this.UpstreamParamsOption; } set { this.UpstreamParamsOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SamlSigningCertificateOption { get; private set; }

        /// <summary>
        /// Certificate for signing SAML requests.
        /// </summary>
        /// <value>Certificate for signing SAML requests.</value>
        [JsonPropertyName("saml_signing_certificate")]
        public string? SamlSigningCertificate { get { return this.SamlSigningCertificateOption; } set { this.SamlSigningCertificateOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SamlSigningPrivateKeyOption { get; private set; }

        /// <summary>
        /// Private key associated with the signing certificate.
        /// </summary>
        /// <value>Private key associated with the signing certificate.</value>
        [JsonPropertyName("saml_signing_private_key")]
        public string? SamlSigningPrivateKey { get { return this.SamlSigningPrivateKeyOption; } set { this.SamlSigningPrivateKeyOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAutoJoinOrganizationEnabledOption { get; private set; }

        /// <summary>
        /// Users automatically join organization when using this connection.
        /// </summary>
        /// <value>Users automatically join organization when using this connection.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_auto_join_organization_enabled")]
        public bool? IsAutoJoinOrganizationEnabled { get { return this.IsAutoJoinOrganizationEnabledOption; } set { this.IsAutoJoinOrganizationEnabledOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectionRequestOptionsOneOf2 {\n");
            sb.Append("  HomeRealmDomains: ").Append(HomeRealmDomains).Append("\n");
            sb.Append("  SamlEntityId: ").Append(SamlEntityId).Append("\n");
            sb.Append("  SamlAcsUrl: ").Append(SamlAcsUrl).Append("\n");
            sb.Append("  SamlIdpMetadataUrl: ").Append(SamlIdpMetadataUrl).Append("\n");
            sb.Append("  SamlSignInUrl: ").Append(SamlSignInUrl).Append("\n");
            sb.Append("  SamlEmailKeyAttr: ").Append(SamlEmailKeyAttr).Append("\n");
            sb.Append("  SamlFirstNameKeyAttr: ").Append(SamlFirstNameKeyAttr).Append("\n");
            sb.Append("  SamlLastNameKeyAttr: ").Append(SamlLastNameKeyAttr).Append("\n");
            sb.Append("  IsCreateMissingUser: ").Append(IsCreateMissingUser).Append("\n");
            sb.Append("  IsForceShowSsoButton: ").Append(IsForceShowSsoButton).Append("\n");
            sb.Append("  UpstreamParams: ").Append(UpstreamParams).Append("\n");
            sb.Append("  SamlSigningCertificate: ").Append(SamlSigningCertificate).Append("\n");
            sb.Append("  SamlSigningPrivateKey: ").Append(SamlSigningPrivateKey).Append("\n");
            sb.Append("  IsAutoJoinOrganizationEnabled: ").Append(IsAutoJoinOrganizationEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class CreateConnectionRequestOptionsOneOf2JsonConverter : JsonConverter<CreateConnectionRequestOptionsOneOf2>
    {
        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateConnectionRequestOptionsOneOf2 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> homeRealmDomains = default;
            Option<string?> samlEntityId = default;
            Option<string?> samlAcsUrl = default;
            Option<string?> samlIdpMetadataUrl = default;
            Option<string?> samlSignInUrl = default;
            Option<string?> samlEmailKeyAttr = default;
            Option<string?> samlFirstNameKeyAttr = default;
            Option<string?> samlLastNameKeyAttr = default;
            Option<bool?> isCreateMissingUser = default;
            Option<bool?> isForceShowSsoButton = default;
            Option<Dictionary<string, Object>?> upstreamParams = default;
            Option<string?> samlSigningCertificate = default;
            Option<string?> samlSigningPrivateKey = default;
            Option<bool?> isAutoJoinOrganizationEnabled = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "home_realm_domains":
                            homeRealmDomains = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "saml_entity_id":
                            samlEntityId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "saml_acs_url":
                            samlAcsUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "saml_idp_metadata_url":
                            samlIdpMetadataUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "saml_sign_in_url":
                            samlSignInUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "saml_email_key_attr":
                            samlEmailKeyAttr = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "saml_first_name_key_attr":
                            samlFirstNameKeyAttr = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "saml_last_name_key_attr":
                            samlLastNameKeyAttr = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_create_missing_user":
                            isCreateMissingUser = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_force_show_sso_button":
                            isForceShowSsoButton = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "upstream_params":
                            upstreamParams = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "saml_signing_certificate":
                            samlSigningCertificate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "saml_signing_private_key":
                            samlSigningPrivateKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_auto_join_organization_enabled":
                            isAutoJoinOrganizationEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (homeRealmDomains.IsSet && homeRealmDomains.Value == null)
                throw new ArgumentNullException(nameof(homeRealmDomains), "Property is not nullable for class CreateConnectionRequestOptionsOneOf2.");

            if (samlEntityId.IsSet && samlEntityId.Value == null)
                throw new ArgumentNullException(nameof(samlEntityId), "Property is not nullable for class CreateConnectionRequestOptionsOneOf2.");

            if (samlAcsUrl.IsSet && samlAcsUrl.Value == null)
                throw new ArgumentNullException(nameof(samlAcsUrl), "Property is not nullable for class CreateConnectionRequestOptionsOneOf2.");

            if (samlIdpMetadataUrl.IsSet && samlIdpMetadataUrl.Value == null)
                throw new ArgumentNullException(nameof(samlIdpMetadataUrl), "Property is not nullable for class CreateConnectionRequestOptionsOneOf2.");

            if (samlSignInUrl.IsSet && samlSignInUrl.Value == null)
                throw new ArgumentNullException(nameof(samlSignInUrl), "Property is not nullable for class CreateConnectionRequestOptionsOneOf2.");

            if (samlEmailKeyAttr.IsSet && samlEmailKeyAttr.Value == null)
                throw new ArgumentNullException(nameof(samlEmailKeyAttr), "Property is not nullable for class CreateConnectionRequestOptionsOneOf2.");

            if (samlFirstNameKeyAttr.IsSet && samlFirstNameKeyAttr.Value == null)
                throw new ArgumentNullException(nameof(samlFirstNameKeyAttr), "Property is not nullable for class CreateConnectionRequestOptionsOneOf2.");

            if (samlLastNameKeyAttr.IsSet && samlLastNameKeyAttr.Value == null)
                throw new ArgumentNullException(nameof(samlLastNameKeyAttr), "Property is not nullable for class CreateConnectionRequestOptionsOneOf2.");

            if (isCreateMissingUser.IsSet && isCreateMissingUser.Value == null)
                throw new ArgumentNullException(nameof(isCreateMissingUser), "Property is not nullable for class CreateConnectionRequestOptionsOneOf2.");

            if (isForceShowSsoButton.IsSet && isForceShowSsoButton.Value == null)
                throw new ArgumentNullException(nameof(isForceShowSsoButton), "Property is not nullable for class CreateConnectionRequestOptionsOneOf2.");

            if (upstreamParams.IsSet && upstreamParams.Value == null)
                throw new ArgumentNullException(nameof(upstreamParams), "Property is not nullable for class CreateConnectionRequestOptionsOneOf2.");

            if (samlSigningCertificate.IsSet && samlSigningCertificate.Value == null)
                throw new ArgumentNullException(nameof(samlSigningCertificate), "Property is not nullable for class CreateConnectionRequestOptionsOneOf2.");

            if (samlSigningPrivateKey.IsSet && samlSigningPrivateKey.Value == null)
                throw new ArgumentNullException(nameof(samlSigningPrivateKey), "Property is not nullable for class CreateConnectionRequestOptionsOneOf2.");

            if (isAutoJoinOrganizationEnabled.IsSet && isAutoJoinOrganizationEnabled.Value == null)
                throw new ArgumentNullException(nameof(isAutoJoinOrganizationEnabled), "Property is not nullable for class CreateConnectionRequestOptionsOneOf2.");

            return new CreateConnectionRequestOptionsOneOf2(homeRealmDomains, samlEntityId, samlAcsUrl, samlIdpMetadataUrl, samlSignInUrl, samlEmailKeyAttr, samlFirstNameKeyAttr, samlLastNameKeyAttr, isCreateMissingUser, isForceShowSsoButton, upstreamParams, samlSigningCertificate, samlSigningPrivateKey, isAutoJoinOrganizationEnabled);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, CreateConnectionRequestOptionsOneOf2 createConnectionRequestOptionsOneOf2, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createConnectionRequestOptionsOneOf2, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, CreateConnectionRequestOptionsOneOf2 createConnectionRequestOptionsOneOf2, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createConnectionRequestOptionsOneOf2.HomeRealmDomainsOption.IsSet && createConnectionRequestOptionsOneOf2.HomeRealmDomains == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf2.HomeRealmDomains), "Property is required for class CreateConnectionRequestOptionsOneOf2.");

            if (createConnectionRequestOptionsOneOf2.SamlEntityIdOption.IsSet && createConnectionRequestOptionsOneOf2.SamlEntityId == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf2.SamlEntityId), "Property is required for class CreateConnectionRequestOptionsOneOf2.");

            if (createConnectionRequestOptionsOneOf2.SamlAcsUrlOption.IsSet && createConnectionRequestOptionsOneOf2.SamlAcsUrl == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf2.SamlAcsUrl), "Property is required for class CreateConnectionRequestOptionsOneOf2.");

            if (createConnectionRequestOptionsOneOf2.SamlIdpMetadataUrlOption.IsSet && createConnectionRequestOptionsOneOf2.SamlIdpMetadataUrl == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf2.SamlIdpMetadataUrl), "Property is required for class CreateConnectionRequestOptionsOneOf2.");

            if (createConnectionRequestOptionsOneOf2.SamlSignInUrlOption.IsSet && createConnectionRequestOptionsOneOf2.SamlSignInUrl == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf2.SamlSignInUrl), "Property is required for class CreateConnectionRequestOptionsOneOf2.");

            if (createConnectionRequestOptionsOneOf2.SamlEmailKeyAttrOption.IsSet && createConnectionRequestOptionsOneOf2.SamlEmailKeyAttr == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf2.SamlEmailKeyAttr), "Property is required for class CreateConnectionRequestOptionsOneOf2.");

            if (createConnectionRequestOptionsOneOf2.SamlFirstNameKeyAttrOption.IsSet && createConnectionRequestOptionsOneOf2.SamlFirstNameKeyAttr == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf2.SamlFirstNameKeyAttr), "Property is required for class CreateConnectionRequestOptionsOneOf2.");

            if (createConnectionRequestOptionsOneOf2.SamlLastNameKeyAttrOption.IsSet && createConnectionRequestOptionsOneOf2.SamlLastNameKeyAttr == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf2.SamlLastNameKeyAttr), "Property is required for class CreateConnectionRequestOptionsOneOf2.");

            if (createConnectionRequestOptionsOneOf2.UpstreamParamsOption.IsSet && createConnectionRequestOptionsOneOf2.UpstreamParams == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf2.UpstreamParams), "Property is required for class CreateConnectionRequestOptionsOneOf2.");

            if (createConnectionRequestOptionsOneOf2.SamlSigningCertificateOption.IsSet && createConnectionRequestOptionsOneOf2.SamlSigningCertificate == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf2.SamlSigningCertificate), "Property is required for class CreateConnectionRequestOptionsOneOf2.");

            if (createConnectionRequestOptionsOneOf2.SamlSigningPrivateKeyOption.IsSet && createConnectionRequestOptionsOneOf2.SamlSigningPrivateKey == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf2.SamlSigningPrivateKey), "Property is required for class CreateConnectionRequestOptionsOneOf2.");

            if (createConnectionRequestOptionsOneOf2.HomeRealmDomainsOption.IsSet)
            {
                writer.WritePropertyName("home_realm_domains");
                JsonSerializer.Serialize(writer, createConnectionRequestOptionsOneOf2.HomeRealmDomains, jsonSerializerOptions);
            }
            if (createConnectionRequestOptionsOneOf2.SamlEntityIdOption.IsSet)
                writer.WriteString("saml_entity_id", createConnectionRequestOptionsOneOf2.SamlEntityId);

            if (createConnectionRequestOptionsOneOf2.SamlAcsUrlOption.IsSet)
                writer.WriteString("saml_acs_url", createConnectionRequestOptionsOneOf2.SamlAcsUrl);

            if (createConnectionRequestOptionsOneOf2.SamlIdpMetadataUrlOption.IsSet)
                writer.WriteString("saml_idp_metadata_url", createConnectionRequestOptionsOneOf2.SamlIdpMetadataUrl);

            if (createConnectionRequestOptionsOneOf2.SamlSignInUrlOption.IsSet)
                writer.WriteString("saml_sign_in_url", createConnectionRequestOptionsOneOf2.SamlSignInUrl);

            if (createConnectionRequestOptionsOneOf2.SamlEmailKeyAttrOption.IsSet)
                writer.WriteString("saml_email_key_attr", createConnectionRequestOptionsOneOf2.SamlEmailKeyAttr);

            if (createConnectionRequestOptionsOneOf2.SamlFirstNameKeyAttrOption.IsSet)
                writer.WriteString("saml_first_name_key_attr", createConnectionRequestOptionsOneOf2.SamlFirstNameKeyAttr);

            if (createConnectionRequestOptionsOneOf2.SamlLastNameKeyAttrOption.IsSet)
                writer.WriteString("saml_last_name_key_attr", createConnectionRequestOptionsOneOf2.SamlLastNameKeyAttr);

            if (createConnectionRequestOptionsOneOf2.IsCreateMissingUserOption.IsSet)
                writer.WriteBoolean("is_create_missing_user", createConnectionRequestOptionsOneOf2.IsCreateMissingUserOption.Value!.Value);

            if (createConnectionRequestOptionsOneOf2.IsForceShowSsoButtonOption.IsSet)
                writer.WriteBoolean("is_force_show_sso_button", createConnectionRequestOptionsOneOf2.IsForceShowSsoButtonOption.Value!.Value);

            if (createConnectionRequestOptionsOneOf2.UpstreamParamsOption.IsSet)
            {
                writer.WritePropertyName("upstream_params");
                JsonSerializer.Serialize(writer, createConnectionRequestOptionsOneOf2.UpstreamParams, jsonSerializerOptions);
            }
            if (createConnectionRequestOptionsOneOf2.SamlSigningCertificateOption.IsSet)
                writer.WriteString("saml_signing_certificate", createConnectionRequestOptionsOneOf2.SamlSigningCertificate);

            if (createConnectionRequestOptionsOneOf2.SamlSigningPrivateKeyOption.IsSet)
                writer.WriteString("saml_signing_private_key", createConnectionRequestOptionsOneOf2.SamlSigningPrivateKey);

            if (createConnectionRequestOptionsOneOf2.IsAutoJoinOrganizationEnabledOption.IsSet)
                writer.WriteBoolean("is_auto_join_organization_enabled", createConnectionRequestOptionsOneOf2.IsAutoJoinOrganizationEnabledOption.Value!.Value);
        }
    }
}
