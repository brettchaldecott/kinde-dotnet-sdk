// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetPropertyValuesResponse
    /// </summary>
    public partial class GetPropertyValuesResponse
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPropertyValuesResponse" /> class.
        /// </summary>
        /// <param name="code">Response code.</param>
        /// <param name="message">Response message.</param>
        /// <param name="properties">properties</param>
        /// <param name="nextToken">Pagination token.</param>
        [JsonConstructor]
        public GetPropertyValuesResponse(Option<string?> code = default, Option<string?> message = default, Option<List<PropertyValue>?> properties = default, Option<string?> nextToken = default)
        {
            CodeOption = code;
            MessageOption = message;
            PropertiesOption = properties;
            NextTokenOption = nextToken;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// Response code.
        /// </summary>
        /// <value>Response code.</value>
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Response message.
        /// </summary>
        /// <value>Response message.</value>
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Properties
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PropertyValue>?> PropertiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [JsonPropertyName("properties")]
        public List<PropertyValue>? Properties { get { return this.PropertiesOption; } set { this.PropertiesOption = new Option<List<PropertyValue>?>(value); } }

        /// <summary>
        /// Used to track the state of NextToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NextTokenOption { get; private set; }

        /// <summary>
        /// Pagination token.
        /// </summary>
        /// <value>Pagination token.</value>
        [JsonPropertyName("next_token")]
        public string? NextToken { get { return this.NextTokenOption; } set { this.NextTokenOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetPropertyValuesResponse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  NextToken: ").Append(NextToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetPropertyValuesResponse" />
    /// </summary>
    public class GetPropertyValuesResponseJsonConverter : JsonConverter<GetPropertyValuesResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetPropertyValuesResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetPropertyValuesResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> message = default;
            Option<List<PropertyValue>?> properties = default;
            Option<string?> nextToken = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "properties":
                            properties = new Option<List<PropertyValue>?>(JsonSerializer.Deserialize<List<PropertyValue>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "next_token":
                            nextToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class GetPropertyValuesResponse.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class GetPropertyValuesResponse.");

            if (properties.IsSet && properties.Value == null)
                throw new ArgumentNullException(nameof(properties), "Property is not nullable for class GetPropertyValuesResponse.");

            if (nextToken.IsSet && nextToken.Value == null)
                throw new ArgumentNullException(nameof(nextToken), "Property is not nullable for class GetPropertyValuesResponse.");

            return new GetPropertyValuesResponse(code, message, properties, nextToken);
        }

        /// <summary>
        /// Serializes a <see cref="GetPropertyValuesResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getPropertyValuesResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetPropertyValuesResponse getPropertyValuesResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getPropertyValuesResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetPropertyValuesResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getPropertyValuesResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetPropertyValuesResponse getPropertyValuesResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getPropertyValuesResponse.CodeOption.IsSet && getPropertyValuesResponse.Code == null)
                throw new ArgumentNullException(nameof(getPropertyValuesResponse.Code), "Property is required for class GetPropertyValuesResponse.");

            if (getPropertyValuesResponse.MessageOption.IsSet && getPropertyValuesResponse.Message == null)
                throw new ArgumentNullException(nameof(getPropertyValuesResponse.Message), "Property is required for class GetPropertyValuesResponse.");

            if (getPropertyValuesResponse.PropertiesOption.IsSet && getPropertyValuesResponse.Properties == null)
                throw new ArgumentNullException(nameof(getPropertyValuesResponse.Properties), "Property is required for class GetPropertyValuesResponse.");

            if (getPropertyValuesResponse.NextTokenOption.IsSet && getPropertyValuesResponse.NextToken == null)
                throw new ArgumentNullException(nameof(getPropertyValuesResponse.NextToken), "Property is required for class GetPropertyValuesResponse.");

            if (getPropertyValuesResponse.CodeOption.IsSet)
                writer.WriteString("code", getPropertyValuesResponse.Code);

            if (getPropertyValuesResponse.MessageOption.IsSet)
                writer.WriteString("message", getPropertyValuesResponse.Message);

            if (getPropertyValuesResponse.PropertiesOption.IsSet)
            {
                writer.WritePropertyName("properties");
                JsonSerializer.Serialize(writer, getPropertyValuesResponse.Properties, jsonSerializerOptions);
            }
            if (getPropertyValuesResponse.NextTokenOption.IsSet)
                writer.WriteString("next_token", getPropertyValuesResponse.NextToken);
        }
    }
}
