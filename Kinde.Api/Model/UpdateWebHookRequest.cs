// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// UpdateWebHookRequest
    /// </summary>
    public partial class UpdateWebHookRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateWebHookRequest" /> class.
        /// </summary>
        /// <param name="eventTypes">Array of event type keys</param>
        /// <param name="name">The webhook name</param>
        /// <param name="description">The webhook description</param>
        [JsonConstructor]
        public UpdateWebHookRequest(Option<List<string>?> eventTypes = default, Option<string?> name = default, Option<string?> description = default)
        {
            EventTypesOption = eventTypes;
            NameOption = name;
            DescriptionOption = description;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EventTypes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> EventTypesOption { get; private set; }

        /// <summary>
        /// Array of event type keys
        /// </summary>
        /// <value>Array of event type keys</value>
        [JsonPropertyName("event_types")]
        public List<string>? EventTypes { get { return this.EventTypesOption; } set { this.EventTypesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The webhook name
        /// </summary>
        /// <value>The webhook name</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The webhook description
        /// </summary>
        /// <value>The webhook description</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateWebHookRequest {\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateWebHookRequest" />
    /// </summary>
    public class UpdateWebHookRequestJsonConverter : JsonConverter<UpdateWebHookRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateWebHookRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateWebHookRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> eventTypes = default;
            Option<string?> name = default;
            Option<string?> description = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "event_types":
                            eventTypes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (eventTypes.IsSet && eventTypes.Value == null)
                throw new ArgumentNullException(nameof(eventTypes), "Property is not nullable for class UpdateWebHookRequest.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UpdateWebHookRequest.");

            return new UpdateWebHookRequest(eventTypes, name, description);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateWebHookRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateWebHookRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateWebHookRequest updateWebHookRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateWebHookRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateWebHookRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateWebHookRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateWebHookRequest updateWebHookRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateWebHookRequest.EventTypesOption.IsSet && updateWebHookRequest.EventTypes == null)
                throw new ArgumentNullException(nameof(updateWebHookRequest.EventTypes), "Property is required for class UpdateWebHookRequest.");

            if (updateWebHookRequest.NameOption.IsSet && updateWebHookRequest.Name == null)
                throw new ArgumentNullException(nameof(updateWebHookRequest.Name), "Property is required for class UpdateWebHookRequest.");

            if (updateWebHookRequest.EventTypesOption.IsSet)
            {
                writer.WritePropertyName("event_types");
                JsonSerializer.Serialize(writer, updateWebHookRequest.EventTypes, jsonSerializerOptions);
            }
            if (updateWebHookRequest.NameOption.IsSet)
                writer.WriteString("name", updateWebHookRequest.Name);

            if (updateWebHookRequest.DescriptionOption.IsSet)
                if (updateWebHookRequest.DescriptionOption.Value != null)
                    writer.WriteString("description", updateWebHookRequest.Description);
                else
                    writer.WriteNull("description");
        }
    }
}
