// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// UpdateRolesRequest
    /// </summary>
    public partial class UpdateRolesRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRolesRequest" /> class.
        /// </summary>
        /// <param name="name">The role&#39;s name.</param>
        /// <param name="key">The role identifier to use in code.</param>
        /// <param name="description">The role&#39;s description.</param>
        /// <param name="isDefaultRole">Set role as default for new users.</param>
        /// <param name="assignmentPermissionId">The public ID of the permission required to assign this role to users. If null, no permission is required.</param>
        [JsonConstructor]
        public UpdateRolesRequest(string name, string key, Option<string?> description = default, Option<bool?> isDefaultRole = default, Option<Guid?> assignmentPermissionId = default)
        {
            Name = name;
            Key = key;
            DescriptionOption = description;
            IsDefaultRoleOption = isDefaultRole;
            AssignmentPermissionIdOption = assignmentPermissionId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The role&#39;s name.
        /// </summary>
        /// <value>The role&#39;s name.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// The role identifier to use in code.
        /// </summary>
        /// <value>The role identifier to use in code.</value>
        [JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The role&#39;s description.
        /// </summary>
        /// <value>The role&#39;s description.</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsDefaultRole
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDefaultRoleOption { get; private set; }

        /// <summary>
        /// Set role as default for new users.
        /// </summary>
        /// <value>Set role as default for new users.</value>
        [JsonPropertyName("is_default_role")]
        public bool? IsDefaultRole { get { return this.IsDefaultRoleOption; } set { this.IsDefaultRoleOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of AssignmentPermissionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> AssignmentPermissionIdOption { get; private set; }

        /// <summary>
        /// The public ID of the permission required to assign this role to users. If null, no permission is required.
        /// </summary>
        /// <value>The public ID of the permission required to assign this role to users. If null, no permission is required.</value>
        [JsonPropertyName("assignment_permission_id")]
        public Guid? AssignmentPermissionId { get { return this.AssignmentPermissionIdOption; } set { this.AssignmentPermissionIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateRolesRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsDefaultRole: ").Append(IsDefaultRole).Append("\n");
            sb.Append("  AssignmentPermissionId: ").Append(AssignmentPermissionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateRolesRequest" />
    /// </summary>
    public class UpdateRolesRequestJsonConverter : JsonConverter<UpdateRolesRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateRolesRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateRolesRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> key = default;
            Option<string?> description = default;
            Option<bool?> isDefaultRole = default;
            Option<Guid?> assignmentPermissionId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_default_role":
                            isDefaultRole = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "assignment_permission_id":
                            assignmentPermissionId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class UpdateRolesRequest.", nameof(name));

            if (!key.IsSet)
                throw new ArgumentException("Property is required for class UpdateRolesRequest.", nameof(key));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UpdateRolesRequest.");

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class UpdateRolesRequest.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class UpdateRolesRequest.");

            if (isDefaultRole.IsSet && isDefaultRole.Value == null)
                throw new ArgumentNullException(nameof(isDefaultRole), "Property is not nullable for class UpdateRolesRequest.");

            return new UpdateRolesRequest(name.Value!, key.Value!, description, isDefaultRole, assignmentPermissionId);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateRolesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateRolesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateRolesRequest updateRolesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateRolesRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateRolesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateRolesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateRolesRequest updateRolesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateRolesRequest.Name == null)
                throw new ArgumentNullException(nameof(updateRolesRequest.Name), "Property is required for class UpdateRolesRequest.");

            if (updateRolesRequest.Key == null)
                throw new ArgumentNullException(nameof(updateRolesRequest.Key), "Property is required for class UpdateRolesRequest.");

            if (updateRolesRequest.DescriptionOption.IsSet && updateRolesRequest.Description == null)
                throw new ArgumentNullException(nameof(updateRolesRequest.Description), "Property is required for class UpdateRolesRequest.");

            writer.WriteString("name", updateRolesRequest.Name);

            writer.WriteString("key", updateRolesRequest.Key);

            if (updateRolesRequest.DescriptionOption.IsSet)
                writer.WriteString("description", updateRolesRequest.Description);

            if (updateRolesRequest.IsDefaultRoleOption.IsSet)
                writer.WriteBoolean("is_default_role", updateRolesRequest.IsDefaultRoleOption.Value!.Value);

            if (updateRolesRequest.AssignmentPermissionIdOption.IsSet)
                if (updateRolesRequest.AssignmentPermissionIdOption.Value != null)
                    writer.WriteString("assignment_permission_id", updateRolesRequest.AssignmentPermissionIdOption.Value!.Value);
                else
                    writer.WriteNull("assignment_permission_id");
        }
    }
}
