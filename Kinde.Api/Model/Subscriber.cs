// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// Subscriber
    /// </summary>
    public partial class Subscriber
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscriber" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="preferredEmail">preferredEmail</param>
        /// <param name="firstName">firstName</param>
        /// <param name="lastName">lastName</param>
        [JsonConstructor]
        public Subscriber(Option<string?> id = default, Option<string?> preferredEmail = default, Option<string?> firstName = default, Option<string?> lastName = default)
        {
            IdOption = id;
            PreferredEmailOption = preferredEmail;
            FirstNameOption = firstName;
            LastNameOption = lastName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PreferredEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreferredEmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets PreferredEmail
        /// </summary>
        [JsonPropertyName("preferred_email")]
        public string? PreferredEmail { get { return this.PreferredEmailOption; } set { this.PreferredEmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [JsonPropertyName("first_name")]
        public string? FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [JsonPropertyName("last_name")]
        public string? LastName { get { return this.LastNameOption; } set { this.LastNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Subscriber {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PreferredEmail: ").Append(PreferredEmail).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Subscriber" />
    /// </summary>
    public class SubscriberJsonConverter : JsonConverter<Subscriber>
    {
        /// <summary>
        /// Deserializes json to <see cref="Subscriber" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Subscriber Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> preferredEmail = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "preferred_email":
                            preferredEmail = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "first_name":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_name":
                            lastName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Subscriber.");

            if (preferredEmail.IsSet && preferredEmail.Value == null)
                throw new ArgumentNullException(nameof(preferredEmail), "Property is not nullable for class Subscriber.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class Subscriber.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class Subscriber.");

            return new Subscriber(id, preferredEmail, firstName, lastName);
        }

        /// <summary>
        /// Serializes a <see cref="Subscriber" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subscriber"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Subscriber subscriber, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, subscriber, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Subscriber" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subscriber"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Subscriber subscriber, JsonSerializerOptions jsonSerializerOptions)
        {
            if (subscriber.IdOption.IsSet && subscriber.Id == null)
                throw new ArgumentNullException(nameof(subscriber.Id), "Property is required for class Subscriber.");

            if (subscriber.PreferredEmailOption.IsSet && subscriber.PreferredEmail == null)
                throw new ArgumentNullException(nameof(subscriber.PreferredEmail), "Property is required for class Subscriber.");

            if (subscriber.FirstNameOption.IsSet && subscriber.FirstName == null)
                throw new ArgumentNullException(nameof(subscriber.FirstName), "Property is required for class Subscriber.");

            if (subscriber.LastNameOption.IsSet && subscriber.LastName == null)
                throw new ArgumentNullException(nameof(subscriber.LastName), "Property is required for class Subscriber.");

            if (subscriber.IdOption.IsSet)
                writer.WriteString("id", subscriber.Id);

            if (subscriber.PreferredEmailOption.IsSet)
                writer.WriteString("preferred_email", subscriber.PreferredEmail);

            if (subscriber.FirstNameOption.IsSet)
                writer.WriteString("first_name", subscriber.FirstName);

            if (subscriber.LastNameOption.IsSet)
                writer.WriteString("last_name", subscriber.LastName);
        }
    }
}
