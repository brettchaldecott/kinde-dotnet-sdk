// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    public partial class CreateMeterUsageRecordRequest
    {
        /// <summary>
        /// </summary>
        /// <param name="meterValue">The value of usage to record</param>
        /// <param name="meterTypeCode">Absolutes overrides the current usage</param>
        [JsonConstructor]
        public CreateMeterUsageRecordRequest(string customerAgreementId, string billingFeatureCode, string meterValue, Option<DateTimeOffset?> meterUsageTimestamp = default, Option<MeterTypeCodeEnum?> meterTypeCode = default)
        {
            CustomerAgreementId = customerAgreementId;
            BillingFeatureCode = billingFeatureCode;
            MeterValue = meterValue;
            MeterUsageTimestampOption = meterUsageTimestamp;
            MeterTypeCodeOption = meterTypeCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Absolutes overrides the current usage
        /// </summary>
        /// <value>Absolutes overrides the current usage</value>
        public enum MeterTypeCodeEnum
        {
            /// <summary>
            /// Enum Absolute for value: absolute
            /// </summary>
            Absolute = 1,

            /// <summary>
            /// Enum Delta for value: delta
            /// </summary>
            Delta = 2
        }

        /// <summary>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MeterTypeCodeEnum MeterTypeCodeEnumFromString(string value)
        {
            if (value.Equals("absolute"))
                return MeterTypeCodeEnum.Absolute;

            if (value.Equals("delta"))
                return MeterTypeCodeEnum.Delta;

            throw new NotImplementedException($"Could not convert value to type MeterTypeCodeEnum: '{value}'");
        }

        /// <summary>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MeterTypeCodeEnum? MeterTypeCodeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("absolute"))
                return MeterTypeCodeEnum.Absolute;

            if (value.Equals("delta"))
                return MeterTypeCodeEnum.Delta;

            return null;
        }

        /// <summary>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string MeterTypeCodeEnumToJsonValue(MeterTypeCodeEnum? value)
        {
            if (value == MeterTypeCodeEnum.Absolute)
                return "absolute";

            if (value == MeterTypeCodeEnum.Delta)
                return "delta";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MeterTypeCodeEnum?> MeterTypeCodeOption { get; private set; }

        /// <summary>
        /// Absolutes overrides the current usage
        /// </summary>
        /// <value>Absolutes overrides the current usage</value>
        [JsonPropertyName("meter_type_code")]
        public MeterTypeCodeEnum? MeterTypeCode { get { return this.MeterTypeCodeOption; } set { this.MeterTypeCodeOption = new(value); } }

        /// <summary>
        /// The billing agreement against which to record usage
        /// </summary>
        /// <value>The billing agreement against which to record usage</value>
        [JsonPropertyName("customer_agreement_id")]
        public string CustomerAgreementId { get; set; }

        /// <summary>
        /// The code of the feature within the agreement against which to record usage
        /// </summary>
        /// <value>The code of the feature within the agreement against which to record usage</value>
        /* <example>pro_gym</example> */
        [JsonPropertyName("billing_feature_code")]
        public string BillingFeatureCode { get; set; }

        /// <summary>
        /// The value of usage to record
        /// </summary>
        /// <value>The value of usage to record</value>
        /* <example>pro_gym</example> */
        [JsonPropertyName("meter_value")]
        public string MeterValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> MeterUsageTimestampOption { get; private set; }

        /// <summary>
        /// The date and time the usage needs to be recorded for (defaults to current date/time)
        /// </summary>
        /// <value>The date and time the usage needs to be recorded for (defaults to current date/time)</value>
        /* <example>2024-11-18T13:32:03+11:00</example> */
        [JsonPropertyName("meter_usage_timestamp")]
        public DateTimeOffset? MeterUsageTimestamp { get { return this.MeterUsageTimestampOption; } set { this.MeterUsageTimestampOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateMeterUsageRecordRequest {\n");
            sb.Append("  CustomerAgreementId: ").Append(CustomerAgreementId).Append("\n");
            sb.Append("  BillingFeatureCode: ").Append(BillingFeatureCode).Append("\n");
            sb.Append("  MeterValue: ").Append(MeterValue).Append("\n");
            sb.Append("  MeterUsageTimestamp: ").Append(MeterUsageTimestamp).Append("\n");
            sb.Append("  MeterTypeCode: ").Append(MeterTypeCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class CreateMeterUsageRecordRequestJsonConverter : JsonConverter<CreateMeterUsageRecordRequest>
    {
        /// <summary>
        /// </summary>
        public static string MeterUsageTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateMeterUsageRecordRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> customerAgreementId = default;
            Option<string?> billingFeatureCode = default;
            Option<string?> meterValue = default;
            Option<DateTimeOffset?> meterUsageTimestamp = default;
            Option<CreateMeterUsageRecordRequest.MeterTypeCodeEnum?> meterTypeCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "customer_agreement_id":
                            customerAgreementId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "billing_feature_code":
                            billingFeatureCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "meter_value":
                            meterValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "meter_usage_timestamp":
                            meterUsageTimestamp = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "meter_type_code":
                            string? meterTypeCodeRawValue = utf8JsonReader.GetString();
                            if (meterTypeCodeRawValue != null)
                                meterTypeCode = new Option<CreateMeterUsageRecordRequest.MeterTypeCodeEnum?>(CreateMeterUsageRecordRequest.MeterTypeCodeEnumFromStringOrDefault(meterTypeCodeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!customerAgreementId.IsSet)
                throw new ArgumentException("Property is required for class CreateMeterUsageRecordRequest.", nameof(customerAgreementId));

            if (!billingFeatureCode.IsSet)
                throw new ArgumentException("Property is required for class CreateMeterUsageRecordRequest.", nameof(billingFeatureCode));

            if (!meterValue.IsSet)
                throw new ArgumentException("Property is required for class CreateMeterUsageRecordRequest.", nameof(meterValue));

            if (customerAgreementId.IsSet && customerAgreementId.Value == null)
                throw new ArgumentNullException(nameof(customerAgreementId), "Property is not nullable for class CreateMeterUsageRecordRequest.");

            if (billingFeatureCode.IsSet && billingFeatureCode.Value == null)
                throw new ArgumentNullException(nameof(billingFeatureCode), "Property is not nullable for class CreateMeterUsageRecordRequest.");

            if (meterValue.IsSet && meterValue.Value == null)
                throw new ArgumentNullException(nameof(meterValue), "Property is not nullable for class CreateMeterUsageRecordRequest.");

            if (meterUsageTimestamp.IsSet && meterUsageTimestamp.Value == null)
                throw new ArgumentNullException(nameof(meterUsageTimestamp), "Property is not nullable for class CreateMeterUsageRecordRequest.");

            if (meterTypeCode.IsSet && meterTypeCode.Value == null)
                throw new ArgumentNullException(nameof(meterTypeCode), "Property is not nullable for class CreateMeterUsageRecordRequest.");

            return new CreateMeterUsageRecordRequest(customerAgreementId.Value!, billingFeatureCode.Value!, meterValue.Value!, meterUsageTimestamp, meterTypeCode);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, CreateMeterUsageRecordRequest createMeterUsageRecordRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createMeterUsageRecordRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, CreateMeterUsageRecordRequest createMeterUsageRecordRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createMeterUsageRecordRequest.CustomerAgreementId == null)
                throw new ArgumentNullException(nameof(createMeterUsageRecordRequest.CustomerAgreementId), "Property is required for class CreateMeterUsageRecordRequest.");

            if (createMeterUsageRecordRequest.BillingFeatureCode == null)
                throw new ArgumentNullException(nameof(createMeterUsageRecordRequest.BillingFeatureCode), "Property is required for class CreateMeterUsageRecordRequest.");

            if (createMeterUsageRecordRequest.MeterValue == null)
                throw new ArgumentNullException(nameof(createMeterUsageRecordRequest.MeterValue), "Property is required for class CreateMeterUsageRecordRequest.");

            writer.WriteString("customer_agreement_id", createMeterUsageRecordRequest.CustomerAgreementId);

            writer.WriteString("billing_feature_code", createMeterUsageRecordRequest.BillingFeatureCode);

            writer.WriteString("meter_value", createMeterUsageRecordRequest.MeterValue);

            if (createMeterUsageRecordRequest.MeterUsageTimestampOption.IsSet)
                writer.WriteString("meter_usage_timestamp", createMeterUsageRecordRequest.MeterUsageTimestampOption.Value!.Value.ToString(MeterUsageTimestampFormat));

            var meterTypeCodeRawValue = CreateMeterUsageRecordRequest.MeterTypeCodeEnumToJsonValue(createMeterUsageRecordRequest.MeterTypeCodeOption.Value!.Value);
            writer.WriteString("meter_type_code", meterTypeCodeRawValue);
        }
    }
}
