// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    public partial class UpdatePropertyRequest
    {
        /// <summary>
        /// </summary>
        /// <param name="name">The name of the property.</param>
        /// <param name="isPrivate">Whether the property can be included in id and access tokens.</param>
        /// <param name="categoryId">Which category the property belongs to.</param>
        /// <param name="description">Description of the property purpose.</param>
        [JsonConstructor]
        public UpdatePropertyRequest(string name, bool isPrivate, string categoryId, Option<string?> description = default)
        {
            Name = name;
            IsPrivate = isPrivate;
            CategoryId = categoryId;
            DescriptionOption = description;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name of the property.
        /// </summary>
        /// <value>The name of the property.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Whether the property can be included in id and access tokens.
        /// </summary>
        /// <value>Whether the property can be included in id and access tokens.</value>
        [JsonPropertyName("is_private")]
        public bool IsPrivate { get; set; }

        /// <summary>
        /// Which category the property belongs to.
        /// </summary>
        /// <value>Which category the property belongs to.</value>
        [JsonPropertyName("category_id")]
        public string CategoryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Description of the property purpose.
        /// </summary>
        /// <value>Description of the property purpose.</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdatePropertyRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class UpdatePropertyRequestJsonConverter : JsonConverter<UpdatePropertyRequest>
    {
        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdatePropertyRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<bool?> isPrivate = default;
            Option<string?> categoryId = default;
            Option<string?> description = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_private":
                            isPrivate = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "category_id":
                            categoryId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class UpdatePropertyRequest.", nameof(name));

            if (!isPrivate.IsSet)
                throw new ArgumentException("Property is required for class UpdatePropertyRequest.", nameof(isPrivate));

            if (!categoryId.IsSet)
                throw new ArgumentException("Property is required for class UpdatePropertyRequest.", nameof(categoryId));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UpdatePropertyRequest.");

            if (isPrivate.IsSet && isPrivate.Value == null)
                throw new ArgumentNullException(nameof(isPrivate), "Property is not nullable for class UpdatePropertyRequest.");

            if (categoryId.IsSet && categoryId.Value == null)
                throw new ArgumentNullException(nameof(categoryId), "Property is not nullable for class UpdatePropertyRequest.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class UpdatePropertyRequest.");

            return new UpdatePropertyRequest(name.Value!, isPrivate.Value!.Value!, categoryId.Value!, description);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, UpdatePropertyRequest updatePropertyRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updatePropertyRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, UpdatePropertyRequest updatePropertyRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updatePropertyRequest.Name == null)
                throw new ArgumentNullException(nameof(updatePropertyRequest.Name), "Property is required for class UpdatePropertyRequest.");

            if (updatePropertyRequest.CategoryId == null)
                throw new ArgumentNullException(nameof(updatePropertyRequest.CategoryId), "Property is required for class UpdatePropertyRequest.");

            if (updatePropertyRequest.DescriptionOption.IsSet && updatePropertyRequest.Description == null)
                throw new ArgumentNullException(nameof(updatePropertyRequest.Description), "Property is required for class UpdatePropertyRequest.");

            writer.WriteString("name", updatePropertyRequest.Name);

            writer.WriteBoolean("is_private", updatePropertyRequest.IsPrivate);

            writer.WriteString("category_id", updatePropertyRequest.CategoryId);

            if (updatePropertyRequest.DescriptionOption.IsSet)
                writer.WriteString("description", updatePropertyRequest.Description);
        }
    }
}
