// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// Property
    /// </summary>
    public partial class Property
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Property" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="key">key</param>
        /// <param name="name">name</param>
        /// <param name="isPrivate">isPrivate</param>
        /// <param name="description">description</param>
        /// <param name="isKindeProperty">isKindeProperty</param>
        [JsonConstructor]
        public Property(Option<string?> id = default, Option<string?> key = default, Option<string?> name = default, Option<bool?> isPrivate = default, Option<string?> description = default, Option<bool?> isKindeProperty = default)
        {
            IdOption = id;
            KeyOption = key;
            NameOption = name;
            IsPrivateOption = isPrivate;
            DescriptionOption = description;
            IsKindePropertyOption = isKindeProperty;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Key
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [JsonPropertyName("key")]
        public string? Key { get { return this.KeyOption; } set { this.KeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsPrivate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPrivateOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsPrivate
        /// </summary>
        [JsonPropertyName("is_private")]
        public bool? IsPrivate { get { return this.IsPrivateOption; } set { this.IsPrivateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsKindeProperty
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsKindePropertyOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsKindeProperty
        /// </summary>
        [JsonPropertyName("is_kinde_property")]
        public bool? IsKindeProperty { get { return this.IsKindePropertyOption; } set { this.IsKindePropertyOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Property {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsKindeProperty: ").Append(IsKindeProperty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Property" />
    /// </summary>
    public class PropertyJsonConverter : JsonConverter<Property>
    {
        /// <summary>
        /// Deserializes json to <see cref="Property" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Property Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> key = default;
            Option<string?> name = default;
            Option<bool?> isPrivate = default;
            Option<string?> description = default;
            Option<bool?> isKindeProperty = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_private":
                            isPrivate = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_kinde_property":
                            isKindeProperty = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Property.");

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class Property.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Property.");

            if (isPrivate.IsSet && isPrivate.Value == null)
                throw new ArgumentNullException(nameof(isPrivate), "Property is not nullable for class Property.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class Property.");

            if (isKindeProperty.IsSet && isKindeProperty.Value == null)
                throw new ArgumentNullException(nameof(isKindeProperty), "Property is not nullable for class Property.");

            return new Property(id, key, name, isPrivate, description, isKindeProperty);
        }

        /// <summary>
        /// Serializes a <see cref="Property" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="property"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Property property, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, property, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Property" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="property"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Property property, JsonSerializerOptions jsonSerializerOptions)
        {
            if (property.IdOption.IsSet && property.Id == null)
                throw new ArgumentNullException(nameof(property.Id), "Property is required for class Property.");

            if (property.KeyOption.IsSet && property.Key == null)
                throw new ArgumentNullException(nameof(property.Key), "Property is required for class Property.");

            if (property.NameOption.IsSet && property.Name == null)
                throw new ArgumentNullException(nameof(property.Name), "Property is required for class Property.");

            if (property.DescriptionOption.IsSet && property.Description == null)
                throw new ArgumentNullException(nameof(property.Description), "Property is required for class Property.");

            if (property.IdOption.IsSet)
                writer.WriteString("id", property.Id);

            if (property.KeyOption.IsSet)
                writer.WriteString("key", property.Key);

            if (property.NameOption.IsSet)
                writer.WriteString("name", property.Name);

            if (property.IsPrivateOption.IsSet)
                writer.WriteBoolean("is_private", property.IsPrivateOption.Value!.Value);

            if (property.DescriptionOption.IsSet)
                writer.WriteString("description", property.Description);

            if (property.IsKindePropertyOption.IsSet)
                writer.WriteBoolean("is_kinde_property", property.IsKindePropertyOption.Value!.Value);
        }
    }
}
