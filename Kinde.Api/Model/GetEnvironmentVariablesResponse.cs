// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    public partial class GetEnvironmentVariablesResponse
    {
        /// <summary>
        /// </summary>
        /// <param name="code">Response code.</param>
        /// <param name="message">Response message.</param>
        /// <param name="hasMore">Whether more records exist.</param>
        [JsonConstructor]
        public GetEnvironmentVariablesResponse(Option<string?> code = default, Option<string?> message = default, Option<bool?> hasMore = default, Option<List<EnvironmentVariable>?> environmentVariables = default)
        {
            CodeOption = code;
            MessageOption = message;
            HasMoreOption = hasMore;
            EnvironmentVariablesOption = environmentVariables;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// Response code.
        /// </summary>
        /// <value>Response code.</value>
        /* <example>OK</example> */
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Response message.
        /// </summary>
        /// <value>Response message.</value>
        /* <example>Success</example> */
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new(value); } }

        /// <summary>
        /// Used to track the state of HasMore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasMoreOption { get; private set; }

        /// <summary>
        /// Whether more records exist.
        /// </summary>
        /// <value>Whether more records exist.</value>
        [JsonPropertyName("has_more")]
        public bool? HasMore { get { return this.HasMoreOption; } set { this.HasMoreOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EnvironmentVariable>?> EnvironmentVariablesOption { get; private set; }

        /// <summary>
        /// </summary>
        [JsonPropertyName("environment_variables")]
        public List<EnvironmentVariable>? EnvironmentVariables { get { return this.EnvironmentVariablesOption; } set { this.EnvironmentVariablesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEnvironmentVariablesResponse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  HasMore: ").Append(HasMore).Append("\n");
            sb.Append("  EnvironmentVariables: ").Append(EnvironmentVariables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class GetEnvironmentVariablesResponseJsonConverter : JsonConverter<GetEnvironmentVariablesResponse>
    {
        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetEnvironmentVariablesResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> message = default;
            Option<bool?> hasMore = default;
            Option<List<EnvironmentVariable>?> environmentVariables = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "has_more":
                            hasMore = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "environment_variables":
                            environmentVariables = new Option<List<EnvironmentVariable>?>(JsonSerializer.Deserialize<List<EnvironmentVariable>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class GetEnvironmentVariablesResponse.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class GetEnvironmentVariablesResponse.");

            if (hasMore.IsSet && hasMore.Value == null)
                throw new ArgumentNullException(nameof(hasMore), "Property is not nullable for class GetEnvironmentVariablesResponse.");

            if (environmentVariables.IsSet && environmentVariables.Value == null)
                throw new ArgumentNullException(nameof(environmentVariables), "Property is not nullable for class GetEnvironmentVariablesResponse.");

            return new GetEnvironmentVariablesResponse(code, message, hasMore, environmentVariables);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, GetEnvironmentVariablesResponse getEnvironmentVariablesResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getEnvironmentVariablesResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, GetEnvironmentVariablesResponse getEnvironmentVariablesResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getEnvironmentVariablesResponse.CodeOption.IsSet && getEnvironmentVariablesResponse.Code == null)
                throw new ArgumentNullException(nameof(getEnvironmentVariablesResponse.Code), "Property is required for class GetEnvironmentVariablesResponse.");

            if (getEnvironmentVariablesResponse.MessageOption.IsSet && getEnvironmentVariablesResponse.Message == null)
                throw new ArgumentNullException(nameof(getEnvironmentVariablesResponse.Message), "Property is required for class GetEnvironmentVariablesResponse.");

            if (getEnvironmentVariablesResponse.EnvironmentVariablesOption.IsSet && getEnvironmentVariablesResponse.EnvironmentVariables == null)
                throw new ArgumentNullException(nameof(getEnvironmentVariablesResponse.EnvironmentVariables), "Property is required for class GetEnvironmentVariablesResponse.");

            if (getEnvironmentVariablesResponse.CodeOption.IsSet)
                writer.WriteString("code", getEnvironmentVariablesResponse.Code);

            if (getEnvironmentVariablesResponse.MessageOption.IsSet)
                writer.WriteString("message", getEnvironmentVariablesResponse.Message);

            if (getEnvironmentVariablesResponse.HasMoreOption.IsSet)
                writer.WriteBoolean("has_more", getEnvironmentVariablesResponse.HasMoreOption.Value!.Value);

            if (getEnvironmentVariablesResponse.EnvironmentVariablesOption.IsSet)
            {
                writer.WritePropertyName("environment_variables");
                JsonSerializer.Serialize(writer, getEnvironmentVariablesResponse.EnvironmentVariables, jsonSerializerOptions);
            }
        }
    }
}
