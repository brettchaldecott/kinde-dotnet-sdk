// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// GetBillingAgreementsResponseAgreementsInner
    /// </summary>
    public partial class GetBillingAgreementsResponseAgreementsInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBillingAgreementsResponseAgreementsInner" /> class.
        /// </summary>
        /// <param name="id">The friendly id of an agreement</param>
        /// <param name="planCode">The plan code the billing customer is subscribed to</param>
        /// <param name="expiresOn">The date the agreement expired (and was no longer active)</param>
        /// <param name="billingGroupId">The friendly id of the billing group this agreement&#39;s plan is part of</param>
        /// <param name="entitlements">A list of billing entitlements that is part of this agreement</param>
        [JsonConstructor]
        public GetBillingAgreementsResponseAgreementsInner(Option<string?> id = default, Option<string?> planCode = default, Option<DateTimeOffset?> expiresOn = default, Option<string?> billingGroupId = default, Option<List<GetBillingAgreementsResponseAgreementsInnerEntitlementsInner>?> entitlements = default)
        {
            IdOption = id;
            PlanCodeOption = planCode;
            ExpiresOnOption = expiresOn;
            BillingGroupIdOption = billingGroupId;
            EntitlementsOption = entitlements;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The friendly id of an agreement
        /// </summary>
        /// <value>The friendly id of an agreement</value>
        /* <example>agreement_0195ac80a14c2ca2cec97d026d864de0</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PlanCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PlanCodeOption { get; private set; }

        /// <summary>
        /// The plan code the billing customer is subscribed to
        /// </summary>
        /// <value>The plan code the billing customer is subscribed to</value>
        [JsonPropertyName("plan_code")]
        public string? PlanCode { get { return this.PlanCodeOption; } set { this.PlanCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpiresOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> ExpiresOnOption { get; private set; }

        /// <summary>
        /// The date the agreement expired (and was no longer active)
        /// </summary>
        /// <value>The date the agreement expired (and was no longer active)</value>
        /* <example>2024-11-18T13:32:03+11:00</example> */
        [JsonPropertyName("expires_on")]
        public DateTimeOffset? ExpiresOn { get { return this.ExpiresOnOption; } set { this.ExpiresOnOption = new(value); } }

        /// <summary>
        /// Used to track the state of BillingGroupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BillingGroupIdOption { get; private set; }

        /// <summary>
        /// The friendly id of the billing group this agreement&#39;s plan is part of
        /// </summary>
        /// <value>The friendly id of the billing group this agreement&#39;s plan is part of</value>
        /* <example>sbg_0195abf6773fdae18d5da72281a3fde2</example> */
        [JsonPropertyName("billing_group_id")]
        public string? BillingGroupId { get { return this.BillingGroupIdOption; } set { this.BillingGroupIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Entitlements
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetBillingAgreementsResponseAgreementsInnerEntitlementsInner>?> EntitlementsOption { get; private set; }

        /// <summary>
        /// A list of billing entitlements that is part of this agreement
        /// </summary>
        /// <value>A list of billing entitlements that is part of this agreement</value>
        [JsonPropertyName("entitlements")]
        public List<GetBillingAgreementsResponseAgreementsInnerEntitlementsInner>? Entitlements { get { return this.EntitlementsOption; } set { this.EntitlementsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetBillingAgreementsResponseAgreementsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PlanCode: ").Append(PlanCode).Append("\n");
            sb.Append("  ExpiresOn: ").Append(ExpiresOn).Append("\n");
            sb.Append("  BillingGroupId: ").Append(BillingGroupId).Append("\n");
            sb.Append("  Entitlements: ").Append(Entitlements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetBillingAgreementsResponseAgreementsInner" />
    /// </summary>
    public class GetBillingAgreementsResponseAgreementsInnerJsonConverter : JsonConverter<GetBillingAgreementsResponseAgreementsInner>
    {
        /// <summary>
        /// The format to use to serialize ExpiresOn
        /// </summary>
        public static string ExpiresOnFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetBillingAgreementsResponseAgreementsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetBillingAgreementsResponseAgreementsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> planCode = default;
            Option<DateTimeOffset?> expiresOn = default;
            Option<string?> billingGroupId = default;
            Option<List<GetBillingAgreementsResponseAgreementsInnerEntitlementsInner>?> entitlements = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "plan_code":
                            planCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expires_on":
                            expiresOn = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "billing_group_id":
                            billingGroupId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "entitlements":
                            entitlements = new Option<List<GetBillingAgreementsResponseAgreementsInnerEntitlementsInner>?>(JsonSerializer.Deserialize<List<GetBillingAgreementsResponseAgreementsInnerEntitlementsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetBillingAgreementsResponseAgreementsInner.");

            if (planCode.IsSet && planCode.Value == null)
                throw new ArgumentNullException(nameof(planCode), "Property is not nullable for class GetBillingAgreementsResponseAgreementsInner.");

            if (expiresOn.IsSet && expiresOn.Value == null)
                throw new ArgumentNullException(nameof(expiresOn), "Property is not nullable for class GetBillingAgreementsResponseAgreementsInner.");

            if (billingGroupId.IsSet && billingGroupId.Value == null)
                throw new ArgumentNullException(nameof(billingGroupId), "Property is not nullable for class GetBillingAgreementsResponseAgreementsInner.");

            if (entitlements.IsSet && entitlements.Value == null)
                throw new ArgumentNullException(nameof(entitlements), "Property is not nullable for class GetBillingAgreementsResponseAgreementsInner.");

            return new GetBillingAgreementsResponseAgreementsInner(id, planCode, expiresOn, billingGroupId, entitlements);
        }

        /// <summary>
        /// Serializes a <see cref="GetBillingAgreementsResponseAgreementsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getBillingAgreementsResponseAgreementsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetBillingAgreementsResponseAgreementsInner getBillingAgreementsResponseAgreementsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getBillingAgreementsResponseAgreementsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetBillingAgreementsResponseAgreementsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getBillingAgreementsResponseAgreementsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetBillingAgreementsResponseAgreementsInner getBillingAgreementsResponseAgreementsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getBillingAgreementsResponseAgreementsInner.IdOption.IsSet && getBillingAgreementsResponseAgreementsInner.Id == null)
                throw new ArgumentNullException(nameof(getBillingAgreementsResponseAgreementsInner.Id), "Property is required for class GetBillingAgreementsResponseAgreementsInner.");

            if (getBillingAgreementsResponseAgreementsInner.PlanCodeOption.IsSet && getBillingAgreementsResponseAgreementsInner.PlanCode == null)
                throw new ArgumentNullException(nameof(getBillingAgreementsResponseAgreementsInner.PlanCode), "Property is required for class GetBillingAgreementsResponseAgreementsInner.");

            if (getBillingAgreementsResponseAgreementsInner.BillingGroupIdOption.IsSet && getBillingAgreementsResponseAgreementsInner.BillingGroupId == null)
                throw new ArgumentNullException(nameof(getBillingAgreementsResponseAgreementsInner.BillingGroupId), "Property is required for class GetBillingAgreementsResponseAgreementsInner.");

            if (getBillingAgreementsResponseAgreementsInner.EntitlementsOption.IsSet && getBillingAgreementsResponseAgreementsInner.Entitlements == null)
                throw new ArgumentNullException(nameof(getBillingAgreementsResponseAgreementsInner.Entitlements), "Property is required for class GetBillingAgreementsResponseAgreementsInner.");

            if (getBillingAgreementsResponseAgreementsInner.IdOption.IsSet)
                writer.WriteString("id", getBillingAgreementsResponseAgreementsInner.Id);

            if (getBillingAgreementsResponseAgreementsInner.PlanCodeOption.IsSet)
                writer.WriteString("plan_code", getBillingAgreementsResponseAgreementsInner.PlanCode);

            if (getBillingAgreementsResponseAgreementsInner.ExpiresOnOption.IsSet)
                writer.WriteString("expires_on", getBillingAgreementsResponseAgreementsInner.ExpiresOnOption.Value!.Value.ToString(ExpiresOnFormat));

            if (getBillingAgreementsResponseAgreementsInner.BillingGroupIdOption.IsSet)
                writer.WriteString("billing_group_id", getBillingAgreementsResponseAgreementsInner.BillingGroupId);

            if (getBillingAgreementsResponseAgreementsInner.EntitlementsOption.IsSet)
            {
                writer.WritePropertyName("entitlements");
                JsonSerializer.Serialize(writer, getBillingAgreementsResponseAgreementsInner.Entitlements, jsonSerializerOptions);
            }
        }
    }
}
