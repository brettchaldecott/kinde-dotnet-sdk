// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// Identity
    /// </summary>
    public partial class Identity
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Identity" /> class.
        /// </summary>
        /// <param name="id">The unique ID for the identity</param>
        /// <param name="type">The type of identity</param>
        /// <param name="isConfirmed">Whether the identity is confirmed</param>
        /// <param name="createdOn">Date of user creation in ISO 8601 format</param>
        /// <param name="lastLoginOn">Date of last login in ISO 8601 format</param>
        /// <param name="totalLogins">totalLogins</param>
        /// <param name="name">The value of the identity</param>
        /// <param name="email">The associated email of the identity</param>
        /// <param name="isPrimary">Whether the identity is the primary identity for the user</param>
        [JsonConstructor]
        public Identity(Option<string?> id = default, Option<string?> type = default, Option<bool?> isConfirmed = default, Option<string?> createdOn = default, Option<string?> lastLoginOn = default, Option<int?> totalLogins = default, Option<string?> name = default, Option<string?> email = default, Option<bool?> isPrimary = default)
        {
            IdOption = id;
            TypeOption = type;
            IsConfirmedOption = isConfirmed;
            CreatedOnOption = createdOn;
            LastLoginOnOption = lastLoginOn;
            TotalLoginsOption = totalLogins;
            NameOption = name;
            EmailOption = email;
            IsPrimaryOption = isPrimary;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The unique ID for the identity
        /// </summary>
        /// <value>The unique ID for the identity</value>
        /* <example>identity_019617f0cd72460a42192cf37b41084f</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// The type of identity
        /// </summary>
        /// <value>The type of identity</value>
        /* <example>email</example> */
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsConfirmed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsConfirmedOption { get; private set; }

        /// <summary>
        /// Whether the identity is confirmed
        /// </summary>
        /// <value>Whether the identity is confirmed</value>
        /* <example>true</example> */
        [JsonPropertyName("is_confirmed")]
        public bool? IsConfirmed { get { return this.IsConfirmedOption; } set { this.IsConfirmedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreatedOnOption { get; private set; }

        /// <summary>
        /// Date of user creation in ISO 8601 format
        /// </summary>
        /// <value>Date of user creation in ISO 8601 format</value>
        /* <example>2025-01-01T00:00:00Z</example> */
        [JsonPropertyName("created_on")]
        public string? CreatedOn { get { return this.CreatedOnOption; } set { this.CreatedOnOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of LastLoginOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastLoginOnOption { get; private set; }

        /// <summary>
        /// Date of last login in ISO 8601 format
        /// </summary>
        /// <value>Date of last login in ISO 8601 format</value>
        /* <example>2025-01-05T00:00:00Z</example> */
        [JsonPropertyName("last_login_on")]
        public string? LastLoginOn { get { return this.LastLoginOnOption; } set { this.LastLoginOnOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of TotalLogins
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalLoginsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalLogins
        /// </summary>
        /* <example>20</example> */
        [JsonPropertyName("total_logins")]
        public int? TotalLogins { get { return this.TotalLoginsOption; } set { this.TotalLoginsOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The value of the identity
        /// </summary>
        /// <value>The value of the identity</value>
        /* <example>sally@example.com</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// The associated email of the identity
        /// </summary>
        /// <value>The associated email of the identity</value>
        /* <example>sally@example.com</example> */
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsPrimary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPrimaryOption { get; private set; }

        /// <summary>
        /// Whether the identity is the primary identity for the user
        /// </summary>
        /// <value>Whether the identity is the primary identity for the user</value>
        /* <example>true</example> */
        [JsonPropertyName("is_primary")]
        public bool? IsPrimary { get { return this.IsPrimaryOption; } set { this.IsPrimaryOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Identity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsConfirmed: ").Append(IsConfirmed).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  LastLoginOn: ").Append(LastLoginOn).Append("\n");
            sb.Append("  TotalLogins: ").Append(TotalLogins).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Identity" />
    /// </summary>
    public class IdentityJsonConverter : JsonConverter<Identity>
    {
        /// <summary>
        /// Deserializes json to <see cref="Identity" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Identity Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> type = default;
            Option<bool?> isConfirmed = default;
            Option<string?> createdOn = default;
            Option<string?> lastLoginOn = default;
            Option<int?> totalLogins = default;
            Option<string?> name = default;
            Option<string?> email = default;
            Option<bool?> isPrimary = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_confirmed":
                            isConfirmed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "created_on":
                            createdOn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_login_on":
                            lastLoginOn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "total_logins":
                            totalLogins = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_primary":
                            isPrimary = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Identity.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Identity.");

            if (isConfirmed.IsSet && isConfirmed.Value == null)
                throw new ArgumentNullException(nameof(isConfirmed), "Property is not nullable for class Identity.");

            if (createdOn.IsSet && createdOn.Value == null)
                throw new ArgumentNullException(nameof(createdOn), "Property is not nullable for class Identity.");

            if (lastLoginOn.IsSet && lastLoginOn.Value == null)
                throw new ArgumentNullException(nameof(lastLoginOn), "Property is not nullable for class Identity.");

            if (totalLogins.IsSet && totalLogins.Value == null)
                throw new ArgumentNullException(nameof(totalLogins), "Property is not nullable for class Identity.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Identity.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class Identity.");

            return new Identity(id, type, isConfirmed, createdOn, lastLoginOn, totalLogins, name, email, isPrimary);
        }

        /// <summary>
        /// Serializes a <see cref="Identity" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="identity"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Identity identity, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, identity, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Identity" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="identity"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Identity identity, JsonSerializerOptions jsonSerializerOptions)
        {
            if (identity.IdOption.IsSet && identity.Id == null)
                throw new ArgumentNullException(nameof(identity.Id), "Property is required for class Identity.");

            if (identity.TypeOption.IsSet && identity.Type == null)
                throw new ArgumentNullException(nameof(identity.Type), "Property is required for class Identity.");

            if (identity.CreatedOnOption.IsSet && identity.CreatedOn == null)
                throw new ArgumentNullException(nameof(identity.CreatedOn), "Property is required for class Identity.");

            if (identity.LastLoginOnOption.IsSet && identity.LastLoginOn == null)
                throw new ArgumentNullException(nameof(identity.LastLoginOn), "Property is required for class Identity.");

            if (identity.NameOption.IsSet && identity.Name == null)
                throw new ArgumentNullException(nameof(identity.Name), "Property is required for class Identity.");

            if (identity.EmailOption.IsSet && identity.Email == null)
                throw new ArgumentNullException(nameof(identity.Email), "Property is required for class Identity.");

            if (identity.IdOption.IsSet)
                writer.WriteString("id", identity.Id);

            if (identity.TypeOption.IsSet)
                writer.WriteString("type", identity.Type);

            if (identity.IsConfirmedOption.IsSet)
                writer.WriteBoolean("is_confirmed", identity.IsConfirmedOption.Value!.Value);

            if (identity.CreatedOnOption.IsSet)
                writer.WriteString("created_on", identity.CreatedOn);

            if (identity.LastLoginOnOption.IsSet)
                writer.WriteString("last_login_on", identity.LastLoginOn);

            if (identity.TotalLoginsOption.IsSet)
                writer.WriteNumber("total_logins", identity.TotalLoginsOption.Value!.Value);

            if (identity.NameOption.IsSet)
                writer.WriteString("name", identity.Name);

            if (identity.EmailOption.IsSet)
                writer.WriteString("email", identity.Email);

            if (identity.IsPrimaryOption.IsSet)
                if (identity.IsPrimaryOption.Value != null)
                    writer.WriteBoolean("is_primary", identity.IsPrimaryOption.Value!.Value);
                else
                    writer.WriteNull("is_primary");
        }
    }
}
