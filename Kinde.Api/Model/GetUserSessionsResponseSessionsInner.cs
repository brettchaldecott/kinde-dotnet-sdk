// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    public partial class GetUserSessionsResponseSessionsInner
    {
        /// <summary>
        /// </summary>
        /// <param name="userId">The unique identifier of the user associated with the session.</param>
        /// <param name="orgCode">The organization code associated with the session, if applicable.</param>
        /// <param name="clientId">The client ID used to initiate the session.</param>
        /// <param name="expiresOn">The timestamp indicating when the session will expire.</param>
        /// <param name="sessionId">The unique identifier of the session.</param>
        /// <param name="startedOn">The timestamp when the session was initiated.</param>
        /// <param name="updatedOn">The timestamp of the last update to the session.</param>
        /// <param name="connectionId">The identifier of the connection through which the session was established.</param>
        /// <param name="lastIpAddress">The last known IP address of the user during this session.</param>
        /// <param name="lastUserAgent">The last known user agent (browser or app) used during this session.</param>
        [JsonConstructor]
        public GetUserSessionsResponseSessionsInner(Option<string?> userId = default, Option<string?> orgCode = default, Option<string?> clientId = default, Option<DateTimeOffset?> expiresOn = default, Option<string?> sessionId = default, Option<DateTimeOffset?> startedOn = default, Option<DateTimeOffset?> updatedOn = default, Option<string?> connectionId = default, Option<string?> lastIpAddress = default, Option<string?> lastUserAgent = default, Option<string?> initialIpAddress = default, Option<string?> initialUserAgent = default)
        {
            UserIdOption = userId;
            OrgCodeOption = orgCode;
            ClientIdOption = clientId;
            ExpiresOnOption = expiresOn;
            SessionIdOption = sessionId;
            StartedOnOption = startedOn;
            UpdatedOnOption = updatedOn;
            ConnectionIdOption = connectionId;
            LastIpAddressOption = lastIpAddress;
            LastUserAgentOption = lastUserAgent;
            InitialIpAddressOption = initialIpAddress;
            InitialUserAgentOption = initialUserAgent;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserIdOption { get; private set; }

        /// <summary>
        /// The unique identifier of the user associated with the session.
        /// </summary>
        /// <value>The unique identifier of the user associated with the session.</value>
        [JsonPropertyName("user_id")]
        public string? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of OrgCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrgCodeOption { get; private set; }

        /// <summary>
        /// The organization code associated with the session, if applicable.
        /// </summary>
        /// <value>The organization code associated with the session, if applicable.</value>
        /* <example>org_1ccfb819462</example> */
        [JsonPropertyName("org_code")]
        public string? OrgCode { get { return this.OrgCodeOption; } set { this.OrgCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClientId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientIdOption { get; private set; }

        /// <summary>
        /// The client ID used to initiate the session.
        /// </summary>
        /// <value>The client ID used to initiate the session.</value>
        [JsonPropertyName("client_id")]
        public string? ClientId { get { return this.ClientIdOption; } set { this.ClientIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpiresOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> ExpiresOnOption { get; private set; }

        /// <summary>
        /// The timestamp indicating when the session will expire.
        /// </summary>
        /// <value>The timestamp indicating when the session will expire.</value>
        /* <example>2025-04-02T13:04:20.315701+11:00</example> */
        [JsonPropertyName("expires_on")]
        public DateTimeOffset? ExpiresOn { get { return this.ExpiresOnOption; } set { this.ExpiresOnOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SessionIdOption { get; private set; }

        /// <summary>
        /// The unique identifier of the session.
        /// </summary>
        /// <value>The unique identifier of the session.</value>
        [JsonPropertyName("session_id")]
        public string? SessionId { get { return this.SessionIdOption; } set { this.SessionIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> StartedOnOption { get; private set; }

        /// <summary>
        /// The timestamp when the session was initiated.
        /// </summary>
        /// <value>The timestamp when the session was initiated.</value>
        /* <example>2025-04-01T13:04:20.315701+11:00</example> */
        [JsonPropertyName("started_on")]
        public DateTimeOffset? StartedOn { get { return this.StartedOnOption; } set { this.StartedOnOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> UpdatedOnOption { get; private set; }

        /// <summary>
        /// The timestamp of the last update to the session.
        /// </summary>
        /// <value>The timestamp of the last update to the session.</value>
        /* <example>2025-04-01T13:04:20+11:00</example> */
        [JsonPropertyName("updated_on")]
        public DateTimeOffset? UpdatedOn { get { return this.UpdatedOnOption; } set { this.UpdatedOnOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ConnectionIdOption { get; private set; }

        /// <summary>
        /// The identifier of the connection through which the session was established.
        /// </summary>
        /// <value>The identifier of the connection through which the session was established.</value>
        [JsonPropertyName("connection_id")]
        public string? ConnectionId { get { return this.ConnectionIdOption; } set { this.ConnectionIdOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastIpAddressOption { get; private set; }

        /// <summary>
        /// The last known IP address of the user during this session.
        /// </summary>
        /// <value>The last known IP address of the user during this session.</value>
        /* <example>192.168.65.1</example> */
        [JsonPropertyName("last_ip_address")]
        public string? LastIpAddress { get { return this.LastIpAddressOption; } set { this.LastIpAddressOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastUserAgentOption { get; private set; }

        /// <summary>
        /// The last known user agent (browser or app) used during this session.
        /// </summary>
        /// <value>The last known user agent (browser or app) used during this session.</value>
        /* <example>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</example> */
        [JsonPropertyName("last_user_agent")]
        public string? LastUserAgent { get { return this.LastUserAgentOption; } set { this.LastUserAgentOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InitialIpAddressOption { get; private set; }

        /// <summary>
        /// The IP address from which the session was initially started.
        /// </summary>
        /// <value>The IP address from which the session was initially started.</value>
        /* <example>192.168.65.1</example> */
        [JsonPropertyName("initial_ip_address")]
        public string? InitialIpAddress { get { return this.InitialIpAddressOption; } set { this.InitialIpAddressOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InitialUserAgentOption { get; private set; }

        /// <summary>
        /// The user agent (browser or app) used when the session was first created.
        /// </summary>
        /// <value>The user agent (browser or app) used when the session was first created.</value>
        /* <example>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</example> */
        [JsonPropertyName("initial_user_agent")]
        public string? InitialUserAgent { get { return this.InitialUserAgentOption; } set { this.InitialUserAgentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserSessionsResponseSessionsInner {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  OrgCode: ").Append(OrgCode).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ExpiresOn: ").Append(ExpiresOn).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  StartedOn: ").Append(StartedOn).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("  ConnectionId: ").Append(ConnectionId).Append("\n");
            sb.Append("  LastIpAddress: ").Append(LastIpAddress).Append("\n");
            sb.Append("  LastUserAgent: ").Append(LastUserAgent).Append("\n");
            sb.Append("  InitialIpAddress: ").Append(InitialIpAddress).Append("\n");
            sb.Append("  InitialUserAgent: ").Append(InitialUserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class GetUserSessionsResponseSessionsInnerJsonConverter : JsonConverter<GetUserSessionsResponseSessionsInner>
    {
        /// <summary>
        /// The format to use to serialize ExpiresOn
        /// </summary>
        public static string ExpiresOnFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartedOn
        /// </summary>
        public static string StartedOnFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedOn
        /// </summary>
        public static string UpdatedOnFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetUserSessionsResponseSessionsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> userId = default;
            Option<string?> orgCode = default;
            Option<string?> clientId = default;
            Option<DateTimeOffset?> expiresOn = default;
            Option<string?> sessionId = default;
            Option<DateTimeOffset?> startedOn = default;
            Option<DateTimeOffset?> updatedOn = default;
            Option<string?> connectionId = default;
            Option<string?> lastIpAddress = default;
            Option<string?> lastUserAgent = default;
            Option<string?> initialIpAddress = default;
            Option<string?> initialUserAgent = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "org_code":
                            orgCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "client_id":
                            clientId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expires_on":
                            expiresOn = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "session_id":
                            sessionId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "started_on":
                            startedOn = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_on":
                            updatedOn = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "connection_id":
                            connectionId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_ip_address":
                            lastIpAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_user_agent":
                            lastUserAgent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "initial_ip_address":
                            initialIpAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "initial_user_agent":
                            initialUserAgent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class GetUserSessionsResponseSessionsInner.");

            if (clientId.IsSet && clientId.Value == null)
                throw new ArgumentNullException(nameof(clientId), "Property is not nullable for class GetUserSessionsResponseSessionsInner.");

            if (expiresOn.IsSet && expiresOn.Value == null)
                throw new ArgumentNullException(nameof(expiresOn), "Property is not nullable for class GetUserSessionsResponseSessionsInner.");

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId), "Property is not nullable for class GetUserSessionsResponseSessionsInner.");

            if (startedOn.IsSet && startedOn.Value == null)
                throw new ArgumentNullException(nameof(startedOn), "Property is not nullable for class GetUserSessionsResponseSessionsInner.");

            if (updatedOn.IsSet && updatedOn.Value == null)
                throw new ArgumentNullException(nameof(updatedOn), "Property is not nullable for class GetUserSessionsResponseSessionsInner.");

            if (connectionId.IsSet && connectionId.Value == null)
                throw new ArgumentNullException(nameof(connectionId), "Property is not nullable for class GetUserSessionsResponseSessionsInner.");

            if (lastIpAddress.IsSet && lastIpAddress.Value == null)
                throw new ArgumentNullException(nameof(lastIpAddress), "Property is not nullable for class GetUserSessionsResponseSessionsInner.");

            if (lastUserAgent.IsSet && lastUserAgent.Value == null)
                throw new ArgumentNullException(nameof(lastUserAgent), "Property is not nullable for class GetUserSessionsResponseSessionsInner.");

            if (initialIpAddress.IsSet && initialIpAddress.Value == null)
                throw new ArgumentNullException(nameof(initialIpAddress), "Property is not nullable for class GetUserSessionsResponseSessionsInner.");

            if (initialUserAgent.IsSet && initialUserAgent.Value == null)
                throw new ArgumentNullException(nameof(initialUserAgent), "Property is not nullable for class GetUserSessionsResponseSessionsInner.");

            return new GetUserSessionsResponseSessionsInner(userId, orgCode, clientId, expiresOn, sessionId, startedOn, updatedOn, connectionId, lastIpAddress, lastUserAgent, initialIpAddress, initialUserAgent);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, GetUserSessionsResponseSessionsInner getUserSessionsResponseSessionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getUserSessionsResponseSessionsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, GetUserSessionsResponseSessionsInner getUserSessionsResponseSessionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getUserSessionsResponseSessionsInner.UserIdOption.IsSet && getUserSessionsResponseSessionsInner.UserId == null)
                throw new ArgumentNullException(nameof(getUserSessionsResponseSessionsInner.UserId), "Property is required for class GetUserSessionsResponseSessionsInner.");

            if (getUserSessionsResponseSessionsInner.ClientIdOption.IsSet && getUserSessionsResponseSessionsInner.ClientId == null)
                throw new ArgumentNullException(nameof(getUserSessionsResponseSessionsInner.ClientId), "Property is required for class GetUserSessionsResponseSessionsInner.");

            if (getUserSessionsResponseSessionsInner.SessionIdOption.IsSet && getUserSessionsResponseSessionsInner.SessionId == null)
                throw new ArgumentNullException(nameof(getUserSessionsResponseSessionsInner.SessionId), "Property is required for class GetUserSessionsResponseSessionsInner.");

            if (getUserSessionsResponseSessionsInner.ConnectionIdOption.IsSet && getUserSessionsResponseSessionsInner.ConnectionId == null)
                throw new ArgumentNullException(nameof(getUserSessionsResponseSessionsInner.ConnectionId), "Property is required for class GetUserSessionsResponseSessionsInner.");

            if (getUserSessionsResponseSessionsInner.LastIpAddressOption.IsSet && getUserSessionsResponseSessionsInner.LastIpAddress == null)
                throw new ArgumentNullException(nameof(getUserSessionsResponseSessionsInner.LastIpAddress), "Property is required for class GetUserSessionsResponseSessionsInner.");

            if (getUserSessionsResponseSessionsInner.LastUserAgentOption.IsSet && getUserSessionsResponseSessionsInner.LastUserAgent == null)
                throw new ArgumentNullException(nameof(getUserSessionsResponseSessionsInner.LastUserAgent), "Property is required for class GetUserSessionsResponseSessionsInner.");

            if (getUserSessionsResponseSessionsInner.InitialIpAddressOption.IsSet && getUserSessionsResponseSessionsInner.InitialIpAddress == null)
                throw new ArgumentNullException(nameof(getUserSessionsResponseSessionsInner.InitialIpAddress), "Property is required for class GetUserSessionsResponseSessionsInner.");

            if (getUserSessionsResponseSessionsInner.InitialUserAgentOption.IsSet && getUserSessionsResponseSessionsInner.InitialUserAgent == null)
                throw new ArgumentNullException(nameof(getUserSessionsResponseSessionsInner.InitialUserAgent), "Property is required for class GetUserSessionsResponseSessionsInner.");

            if (getUserSessionsResponseSessionsInner.UserIdOption.IsSet)
                writer.WriteString("user_id", getUserSessionsResponseSessionsInner.UserId);

            if (getUserSessionsResponseSessionsInner.OrgCodeOption.IsSet)
                if (getUserSessionsResponseSessionsInner.OrgCodeOption.Value != null)
                    writer.WriteString("org_code", getUserSessionsResponseSessionsInner.OrgCode);
                else
                    writer.WriteNull("org_code");

            if (getUserSessionsResponseSessionsInner.ClientIdOption.IsSet)
                writer.WriteString("client_id", getUserSessionsResponseSessionsInner.ClientId);

            if (getUserSessionsResponseSessionsInner.ExpiresOnOption.IsSet)
                writer.WriteString("expires_on", getUserSessionsResponseSessionsInner.ExpiresOnOption.Value!.Value.ToString(ExpiresOnFormat));

            if (getUserSessionsResponseSessionsInner.SessionIdOption.IsSet)
                writer.WriteString("session_id", getUserSessionsResponseSessionsInner.SessionId);

            if (getUserSessionsResponseSessionsInner.StartedOnOption.IsSet)
                writer.WriteString("started_on", getUserSessionsResponseSessionsInner.StartedOnOption.Value!.Value.ToString(StartedOnFormat));

            if (getUserSessionsResponseSessionsInner.UpdatedOnOption.IsSet)
                writer.WriteString("updated_on", getUserSessionsResponseSessionsInner.UpdatedOnOption.Value!.Value.ToString(UpdatedOnFormat));

            if (getUserSessionsResponseSessionsInner.ConnectionIdOption.IsSet)
                writer.WriteString("connection_id", getUserSessionsResponseSessionsInner.ConnectionId);

            if (getUserSessionsResponseSessionsInner.LastIpAddressOption.IsSet)
                writer.WriteString("last_ip_address", getUserSessionsResponseSessionsInner.LastIpAddress);

            if (getUserSessionsResponseSessionsInner.LastUserAgentOption.IsSet)
                writer.WriteString("last_user_agent", getUserSessionsResponseSessionsInner.LastUserAgent);

            if (getUserSessionsResponseSessionsInner.InitialIpAddressOption.IsSet)
                writer.WriteString("initial_ip_address", getUserSessionsResponseSessionsInner.InitialIpAddress);

            if (getUserSessionsResponseSessionsInner.InitialUserAgentOption.IsSet)
                writer.WriteString("initial_user_agent", getUserSessionsResponseSessionsInner.InitialUserAgent);
        }
    }
}
