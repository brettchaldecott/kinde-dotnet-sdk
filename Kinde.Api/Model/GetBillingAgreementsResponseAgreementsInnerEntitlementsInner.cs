// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    public partial class GetBillingAgreementsResponseAgreementsInnerEntitlementsInner
    {
        /// <summary>
        /// </summary>
        /// <param name="featureCode">The feature code of the feature corresponding to this entitlement</param>
        /// <param name="entitlementId">The friendly id of an entitlement</param>
        [JsonConstructor]
        public GetBillingAgreementsResponseAgreementsInnerEntitlementsInner(Option<string?> featureCode = default, Option<string?> entitlementId = default)
        {
            FeatureCodeOption = featureCode;
            EntitlementIdOption = entitlementId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FeatureCodeOption { get; private set; }

        /// <summary>
        /// </summary>
        /// <value>The feature code of the feature corresponding to this entitlement</value>
        /* <example>CcdkvEXpbg6UY</example> */
        [JsonPropertyName("feature_code")]
        public string? FeatureCode { get { return this.FeatureCodeOption; } set { this.FeatureCodeOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EntitlementIdOption { get; private set; }

        /// <summary>
        /// </summary>
        /// <value>The friendly id of an entitlement</value>
        [JsonPropertyName("entitlement_id")]
        public string? EntitlementId { get { return this.EntitlementIdOption; } set { this.EntitlementIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetBillingAgreementsResponseAgreementsInnerEntitlementsInner {\n");
            sb.Append("  FeatureCode: ").Append(FeatureCode).Append("\n");
            sb.Append("  EntitlementId: ").Append(EntitlementId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class GetBillingAgreementsResponseAgreementsInnerEntitlementsInnerJsonConverter : JsonConverter<GetBillingAgreementsResponseAgreementsInnerEntitlementsInner>
    {
        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetBillingAgreementsResponseAgreementsInnerEntitlementsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> featureCode = default;
            Option<string?> entitlementId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "feature_code":
                            featureCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "entitlement_id":
                            entitlementId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (featureCode.IsSet && featureCode.Value == null)
                throw new ArgumentNullException(nameof(featureCode), "Property is not nullable for class GetBillingAgreementsResponseAgreementsInnerEntitlementsInner.");

            if (entitlementId.IsSet && entitlementId.Value == null)
                throw new ArgumentNullException(nameof(entitlementId), "Property is not nullable for class GetBillingAgreementsResponseAgreementsInnerEntitlementsInner.");

            return new GetBillingAgreementsResponseAgreementsInnerEntitlementsInner(featureCode, entitlementId);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, GetBillingAgreementsResponseAgreementsInnerEntitlementsInner getBillingAgreementsResponseAgreementsInnerEntitlementsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getBillingAgreementsResponseAgreementsInnerEntitlementsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, GetBillingAgreementsResponseAgreementsInnerEntitlementsInner getBillingAgreementsResponseAgreementsInnerEntitlementsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getBillingAgreementsResponseAgreementsInnerEntitlementsInner.FeatureCodeOption.IsSet && getBillingAgreementsResponseAgreementsInnerEntitlementsInner.FeatureCode == null)
                throw new ArgumentNullException(nameof(getBillingAgreementsResponseAgreementsInnerEntitlementsInner.FeatureCode), "Property is required for class GetBillingAgreementsResponseAgreementsInnerEntitlementsInner.");

            if (getBillingAgreementsResponseAgreementsInnerEntitlementsInner.EntitlementIdOption.IsSet && getBillingAgreementsResponseAgreementsInnerEntitlementsInner.EntitlementId == null)
                throw new ArgumentNullException(nameof(getBillingAgreementsResponseAgreementsInnerEntitlementsInner.EntitlementId), "Property is required for class GetBillingAgreementsResponseAgreementsInnerEntitlementsInner.");

            if (getBillingAgreementsResponseAgreementsInnerEntitlementsInner.FeatureCodeOption.IsSet)
                writer.WriteString("feature_code", getBillingAgreementsResponseAgreementsInnerEntitlementsInner.FeatureCode);

            if (getBillingAgreementsResponseAgreementsInnerEntitlementsInner.EntitlementIdOption.IsSet)
                writer.WriteString("entitlement_id", getBillingAgreementsResponseAgreementsInnerEntitlementsInner.EntitlementId);
        }
    }
}
