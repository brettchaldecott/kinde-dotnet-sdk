// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// Social connection options (e.g., Google SSO).
    /// </summary>
    public partial class CreateConnectionRequestOptionsOneOf
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectionRequestOptionsOneOf" /> class.
        /// </summary>
        /// <param name="clientId">OAuth client ID.</param>
        /// <param name="clientSecret">OAuth client secret.</param>
        /// <param name="isUseCustomDomain">Use custom domain callback URL.</param>
        [JsonConstructor]
        public CreateConnectionRequestOptionsOneOf(Option<string?> clientId = default, Option<string?> clientSecret = default, Option<bool?> isUseCustomDomain = default)
        {
            ClientIdOption = clientId;
            ClientSecretOption = clientSecret;
            IsUseCustomDomainOption = isUseCustomDomain;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ClientId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientIdOption { get; private set; }

        /// <summary>
        /// OAuth client ID.
        /// </summary>
        /// <value>OAuth client ID.</value>
        /* <example>hji7db2146af332akfldfded22</example> */
        [JsonPropertyName("client_id")]
        public string? ClientId { get { return this.ClientIdOption; } set { this.ClientIdOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ClientSecret
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientSecretOption { get; private set; }

        /// <summary>
        /// OAuth client secret.
        /// </summary>
        /// <value>OAuth client secret.</value>
        /* <example>19fkjdalg521l23fassf3039d4ae18b</example> */
        [JsonPropertyName("client_secret")]
        public string? ClientSecret { get { return this.ClientSecretOption; } set { this.ClientSecretOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of IsUseCustomDomain
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsUseCustomDomainOption { get; private set; }

        /// <summary>
        /// Use custom domain callback URL.
        /// </summary>
        /// <value>Use custom domain callback URL.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_use_custom_domain")]
        public bool? IsUseCustomDomain { get { return this.IsUseCustomDomainOption; } set { this.IsUseCustomDomainOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectionRequestOptionsOneOf {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  IsUseCustomDomain: ").Append(IsUseCustomDomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateConnectionRequestOptionsOneOf" />
    /// </summary>
    public class CreateConnectionRequestOptionsOneOfJsonConverter : JsonConverter<CreateConnectionRequestOptionsOneOf>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateConnectionRequestOptionsOneOf" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateConnectionRequestOptionsOneOf Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> clientId = default;
            Option<string?> clientSecret = default;
            Option<bool?> isUseCustomDomain = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "client_id":
                            clientId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "client_secret":
                            clientSecret = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_use_custom_domain":
                            isUseCustomDomain = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (clientId.IsSet && clientId.Value == null)
                throw new ArgumentNullException(nameof(clientId), "Property is not nullable for class CreateConnectionRequestOptionsOneOf.");

            if (clientSecret.IsSet && clientSecret.Value == null)
                throw new ArgumentNullException(nameof(clientSecret), "Property is not nullable for class CreateConnectionRequestOptionsOneOf.");

            if (isUseCustomDomain.IsSet && isUseCustomDomain.Value == null)
                throw new ArgumentNullException(nameof(isUseCustomDomain), "Property is not nullable for class CreateConnectionRequestOptionsOneOf.");

            return new CreateConnectionRequestOptionsOneOf(clientId, clientSecret, isUseCustomDomain);
        }

        /// <summary>
        /// Serializes a <see cref="CreateConnectionRequestOptionsOneOf" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConnectionRequestOptionsOneOf"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateConnectionRequestOptionsOneOf createConnectionRequestOptionsOneOf, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createConnectionRequestOptionsOneOf, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateConnectionRequestOptionsOneOf" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConnectionRequestOptionsOneOf"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateConnectionRequestOptionsOneOf createConnectionRequestOptionsOneOf, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createConnectionRequestOptionsOneOf.ClientIdOption.IsSet && createConnectionRequestOptionsOneOf.ClientId == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf.ClientId), "Property is required for class CreateConnectionRequestOptionsOneOf.");

            if (createConnectionRequestOptionsOneOf.ClientSecretOption.IsSet && createConnectionRequestOptionsOneOf.ClientSecret == null)
                throw new ArgumentNullException(nameof(createConnectionRequestOptionsOneOf.ClientSecret), "Property is required for class CreateConnectionRequestOptionsOneOf.");

            if (createConnectionRequestOptionsOneOf.ClientIdOption.IsSet)
                writer.WriteString("client_id", createConnectionRequestOptionsOneOf.ClientId);

            if (createConnectionRequestOptionsOneOf.ClientSecretOption.IsSet)
                writer.WriteString("client_secret", createConnectionRequestOptionsOneOf.ClientSecret);

            if (createConnectionRequestOptionsOneOf.IsUseCustomDomainOption.IsSet)
                writer.WriteBoolean("is_use_custom_domain", createConnectionRequestOptionsOneOf.IsUseCustomDomainOption.Value!.Value);
        }
    }
}
