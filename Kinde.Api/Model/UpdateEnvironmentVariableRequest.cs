// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// UpdateEnvironmentVariableRequest
    /// </summary>
    public partial class UpdateEnvironmentVariableRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateEnvironmentVariableRequest" /> class.
        /// </summary>
        /// <param name="key">The key to update.</param>
        /// <param name="value">The new value for the environment variable.</param>
        /// <param name="isSecret">Whether the environment variable is sensitive. Secret variables are not-readable by you or your team after creation.</param>
        [JsonConstructor]
        public UpdateEnvironmentVariableRequest(Option<string?> key = default, Option<string?> value = default, Option<bool?> isSecret = default)
        {
            KeyOption = key;
            ValueOption = value;
            IsSecretOption = isSecret;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Key
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyOption { get; private set; }

        /// <summary>
        /// The key to update.
        /// </summary>
        /// <value>The key to update.</value>
        /* <example>MY_API_KEY</example> */
        [JsonPropertyName("key")]
        public string? Key { get { return this.KeyOption; } set { this.KeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// The new value for the environment variable.
        /// </summary>
        /// <value>The new value for the environment variable.</value>
        /* <example>new-secret-value</example> */
        [JsonPropertyName("value")]
        public string? Value { get { return this.ValueOption; } set { this.ValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsSecret
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSecretOption { get; private set; }

        /// <summary>
        /// Whether the environment variable is sensitive. Secret variables are not-readable by you or your team after creation.
        /// </summary>
        /// <value>Whether the environment variable is sensitive. Secret variables are not-readable by you or your team after creation.</value>
        [JsonPropertyName("is_secret")]
        public bool? IsSecret { get { return this.IsSecretOption; } set { this.IsSecretOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateEnvironmentVariableRequest {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  IsSecret: ").Append(IsSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateEnvironmentVariableRequest" />
    /// </summary>
    public class UpdateEnvironmentVariableRequestJsonConverter : JsonConverter<UpdateEnvironmentVariableRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateEnvironmentVariableRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateEnvironmentVariableRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> key = default;
            Option<string?> value = default;
            Option<bool?> isSecret = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_secret":
                            isSecret = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class UpdateEnvironmentVariableRequest.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class UpdateEnvironmentVariableRequest.");

            if (isSecret.IsSet && isSecret.Value == null)
                throw new ArgumentNullException(nameof(isSecret), "Property is not nullable for class UpdateEnvironmentVariableRequest.");

            return new UpdateEnvironmentVariableRequest(key, value, isSecret);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateEnvironmentVariableRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateEnvironmentVariableRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateEnvironmentVariableRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateEnvironmentVariableRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateEnvironmentVariableRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateEnvironmentVariableRequest.KeyOption.IsSet && updateEnvironmentVariableRequest.Key == null)
                throw new ArgumentNullException(nameof(updateEnvironmentVariableRequest.Key), "Property is required for class UpdateEnvironmentVariableRequest.");

            if (updateEnvironmentVariableRequest.ValueOption.IsSet && updateEnvironmentVariableRequest.Value == null)
                throw new ArgumentNullException(nameof(updateEnvironmentVariableRequest.Value), "Property is required for class UpdateEnvironmentVariableRequest.");

            if (updateEnvironmentVariableRequest.KeyOption.IsSet)
                writer.WriteString("key", updateEnvironmentVariableRequest.Key);

            if (updateEnvironmentVariableRequest.ValueOption.IsSet)
                writer.WriteString("value", updateEnvironmentVariableRequest.Value);

            if (updateEnvironmentVariableRequest.IsSecretOption.IsSet)
                writer.WriteBoolean("is_secret", updateEnvironmentVariableRequest.IsSecretOption.Value!.Value);
        }
    }
}
