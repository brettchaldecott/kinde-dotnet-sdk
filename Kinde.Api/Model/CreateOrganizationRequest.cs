// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// CreateOrganizationRequest
    /// </summary>
    public partial class CreateOrganizationRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrganizationRequest" /> class.
        /// </summary>
        /// <param name="name">The organization&#39;s name.</param>
        /// <param name="featureFlags">The organization&#39;s feature flag settings.</param>
        /// <param name="externalId">The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.</param>
        /// <param name="backgroundColor">The organization&#39;s brand settings - background color.</param>
        /// <param name="buttonColor">The organization&#39;s brand settings - button color.</param>
        /// <param name="buttonTextColor">The organization&#39;s brand settings - button text color.</param>
        /// <param name="linkColor">The organization&#39;s brand settings - link color.</param>
        /// <param name="backgroundColorDark">The organization&#39;s brand settings - dark mode background color.</param>
        /// <param name="buttonColorDark">The organization&#39;s brand settings - dark mode button color.</param>
        /// <param name="buttonTextColorDark">The organization&#39;s brand settings - dark mode button text color.</param>
        /// <param name="linkColorDark">The organization&#39;s brand settings - dark mode link color.</param>
        /// <param name="themeCode">The organization&#39;s brand settings - theme/mode &#39;light&#39; | &#39;dark&#39; | &#39;user_preference&#39;.</param>
        /// <param name="handle">A unique handle for the organization - can be used for dynamic callback urls.</param>
        /// <param name="isAllowRegistrations">If users become members of this organization when the org code is supplied during authentication.</param>
        /// <param name="senderName">The name of the organization that will be used in emails</param>
        /// <param name="senderEmail">The email address that will be used in emails. Requires custom SMTP to be set up.</param>
        /// <param name="isCreateBillingCustomer">If a billing customer is also created for this organization</param>
        /// <param name="billingEmail">The email address used for billing purposes for the organization</param>
        /// <param name="billingPlanCode">The billing plan to put the customer on. If not specified, the default plan is used</param>
        [JsonConstructor]
        public CreateOrganizationRequest(string name, Option<Dictionary<string, CreateOrganizationRequest.InnerEnum>?> featureFlags = default, Option<string?> externalId = default, Option<string?> backgroundColor = default, Option<string?> buttonColor = default, Option<string?> buttonTextColor = default, Option<string?> linkColor = default, Option<string?> backgroundColorDark = default, Option<string?> buttonColorDark = default, Option<string?> buttonTextColorDark = default, Option<string?> linkColorDark = default, Option<string?> themeCode = default, Option<string?> handle = default, Option<bool?> isAllowRegistrations = default, Option<string?> senderName = default, Option<string?> senderEmail = default, Option<bool?> isCreateBillingCustomer = default, Option<string?> billingEmail = default, Option<string?> billingPlanCode = default)
        {
            Name = name;
            FeatureFlagsOption = featureFlags;
            ExternalIdOption = externalId;
            BackgroundColorOption = backgroundColor;
            ButtonColorOption = buttonColor;
            ButtonTextColorOption = buttonTextColor;
            LinkColorOption = linkColor;
            BackgroundColorDarkOption = backgroundColorDark;
            ButtonColorDarkOption = buttonColorDark;
            ButtonTextColorDarkOption = buttonTextColorDark;
            LinkColorDarkOption = linkColorDark;
            ThemeCodeOption = themeCode;
            HandleOption = handle;
            IsAllowRegistrationsOption = isAllowRegistrations;
            SenderNameOption = senderName;
            SenderEmailOption = senderEmail;
            IsCreateBillingCustomerOption = isCreateBillingCustomer;
            BillingEmailOption = billingEmail;
            BillingPlanCodeOption = billingPlanCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Value of the feature flag.
        /// </summary>
        /// <value>Value of the feature flag.</value>
        public enum InnerEnum
        {
            /// <summary>
            /// Enum Str for value: str
            /// </summary>
            Str = 1,

            /// <summary>
            /// Enum Int for value: int
            /// </summary>
            Int = 2,

            /// <summary>
            /// Enum Bool for value: bool
            /// </summary>
            Bool = 3
        }

        /// <summary>
        /// Returns a <see cref="InnerEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static InnerEnum InnerEnumFromString(string value)
        {
            if (value.Equals("str"))
                return InnerEnum.Str;

            if (value.Equals("int"))
                return InnerEnum.Int;

            if (value.Equals("bool"))
                return InnerEnum.Bool;

            throw new NotImplementedException($"Could not convert value to type InnerEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="InnerEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static InnerEnum? InnerEnumFromStringOrDefault(string value)
        {
            if (value.Equals("str"))
                return InnerEnum.Str;

            if (value.Equals("int"))
                return InnerEnum.Int;

            if (value.Equals("bool"))
                return InnerEnum.Bool;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="InnerEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string InnerEnumToJsonValue(InnerEnum? value)
        {
            if (value == InnerEnum.Str)
                return "str";

            if (value == InnerEnum.Int)
                return "int";

            if (value == InnerEnum.Bool)
                return "bool";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The organization&#39;s name.
        /// </summary>
        /// <value>The organization&#39;s name.</value>
        /* <example>Acme Corp</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of FeatureFlags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, CreateOrganizationRequest.InnerEnum>?> FeatureFlagsOption { get; private set; }

        /// <summary>
        /// The organization&#39;s feature flag settings.
        /// </summary>
        /// <value>The organization&#39;s feature flag settings.</value>
        [JsonPropertyName("feature_flags")]
        public Dictionary<string, CreateOrganizationRequest.InnerEnum>? FeatureFlags { get { return this.FeatureFlagsOption; } set { this.FeatureFlagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalIdOption { get; private set; }

        /// <summary>
        /// The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.
        /// </summary>
        /// <value>The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.</value>
        /* <example>some1234</example> */
        [JsonPropertyName("external_id")]
        public string? ExternalId { get { return this.ExternalIdOption; } set { this.ExternalIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BackgroundColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BackgroundColorOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - background color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - background color.</value>
        [JsonPropertyName("background_color")]
        public string? BackgroundColor { get { return this.BackgroundColorOption; } set { this.BackgroundColorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ButtonColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ButtonColorOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - button color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - button color.</value>
        [JsonPropertyName("button_color")]
        public string? ButtonColor { get { return this.ButtonColorOption; } set { this.ButtonColorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ButtonTextColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ButtonTextColorOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - button text color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - button text color.</value>
        [JsonPropertyName("button_text_color")]
        public string? ButtonTextColor { get { return this.ButtonTextColorOption; } set { this.ButtonTextColorOption = new(value); } }

        /// <summary>
        /// Used to track the state of LinkColor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LinkColorOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - link color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - link color.</value>
        [JsonPropertyName("link_color")]
        public string? LinkColor { get { return this.LinkColorOption; } set { this.LinkColorOption = new(value); } }

        /// <summary>
        /// Used to track the state of BackgroundColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BackgroundColorDarkOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode background color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode background color.</value>
        [JsonPropertyName("background_color_dark")]
        public string? BackgroundColorDark { get { return this.BackgroundColorDarkOption; } set { this.BackgroundColorDarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of ButtonColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ButtonColorDarkOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode button color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode button color.</value>
        [JsonPropertyName("button_color_dark")]
        public string? ButtonColorDark { get { return this.ButtonColorDarkOption; } set { this.ButtonColorDarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of ButtonTextColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ButtonTextColorDarkOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode button text color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode button text color.</value>
        [JsonPropertyName("button_text_color_dark")]
        public string? ButtonTextColorDark { get { return this.ButtonTextColorDarkOption; } set { this.ButtonTextColorDarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of LinkColorDark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LinkColorDarkOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - dark mode link color.
        /// </summary>
        /// <value>The organization&#39;s brand settings - dark mode link color.</value>
        [JsonPropertyName("link_color_dark")]
        public string? LinkColorDark { get { return this.LinkColorDarkOption; } set { this.LinkColorDarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of ThemeCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ThemeCodeOption { get; private set; }

        /// <summary>
        /// The organization&#39;s brand settings - theme/mode &#39;light&#39; | &#39;dark&#39; | &#39;user_preference&#39;.
        /// </summary>
        /// <value>The organization&#39;s brand settings - theme/mode &#39;light&#39; | &#39;dark&#39; | &#39;user_preference&#39;.</value>
        [JsonPropertyName("theme_code")]
        public string? ThemeCode { get { return this.ThemeCodeOption; } set { this.ThemeCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Handle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HandleOption { get; private set; }

        /// <summary>
        /// A unique handle for the organization - can be used for dynamic callback urls.
        /// </summary>
        /// <value>A unique handle for the organization - can be used for dynamic callback urls.</value>
        /* <example>acme_corp</example> */
        [JsonPropertyName("handle")]
        public string? Handle { get { return this.HandleOption; } set { this.HandleOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsAllowRegistrations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAllowRegistrationsOption { get; private set; }

        /// <summary>
        /// If users become members of this organization when the org code is supplied during authentication.
        /// </summary>
        /// <value>If users become members of this organization when the org code is supplied during authentication.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_allow_registrations")]
        public bool? IsAllowRegistrations { get { return this.IsAllowRegistrationsOption; } set { this.IsAllowRegistrationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SenderName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SenderNameOption { get; private set; }

        /// <summary>
        /// The name of the organization that will be used in emails
        /// </summary>
        /// <value>The name of the organization that will be used in emails</value>
        /* <example>Acme Corp</example> */
        [JsonPropertyName("sender_name")]
        public string? SenderName { get { return this.SenderNameOption; } set { this.SenderNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SenderEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SenderEmailOption { get; private set; }

        /// <summary>
        /// The email address that will be used in emails. Requires custom SMTP to be set up.
        /// </summary>
        /// <value>The email address that will be used in emails. Requires custom SMTP to be set up.</value>
        /* <example>hello@acmecorp.com</example> */
        [JsonPropertyName("sender_email")]
        public string? SenderEmail { get { return this.SenderEmailOption; } set { this.SenderEmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsCreateBillingCustomer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsCreateBillingCustomerOption { get; private set; }

        /// <summary>
        /// If a billing customer is also created for this organization
        /// </summary>
        /// <value>If a billing customer is also created for this organization</value>
        /* <example>false</example> */
        [JsonPropertyName("is_create_billing_customer")]
        public bool? IsCreateBillingCustomer { get { return this.IsCreateBillingCustomerOption; } set { this.IsCreateBillingCustomerOption = new(value); } }

        /// <summary>
        /// Used to track the state of BillingEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BillingEmailOption { get; private set; }

        /// <summary>
        /// The email address used for billing purposes for the organization
        /// </summary>
        /// <value>The email address used for billing purposes for the organization</value>
        /* <example>billing@acmecorp.com</example> */
        [JsonPropertyName("billing_email")]
        public string? BillingEmail { get { return this.BillingEmailOption; } set { this.BillingEmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of BillingPlanCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BillingPlanCodeOption { get; private set; }

        /// <summary>
        /// The billing plan to put the customer on. If not specified, the default plan is used
        /// </summary>
        /// <value>The billing plan to put the customer on. If not specified, the default plan is used</value>
        /* <example>pro</example> */
        [JsonPropertyName("billing_plan_code")]
        public string? BillingPlanCode { get { return this.BillingPlanCodeOption; } set { this.BillingPlanCodeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateOrganizationRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FeatureFlags: ").Append(FeatureFlags).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  ButtonColor: ").Append(ButtonColor).Append("\n");
            sb.Append("  ButtonTextColor: ").Append(ButtonTextColor).Append("\n");
            sb.Append("  LinkColor: ").Append(LinkColor).Append("\n");
            sb.Append("  BackgroundColorDark: ").Append(BackgroundColorDark).Append("\n");
            sb.Append("  ButtonColorDark: ").Append(ButtonColorDark).Append("\n");
            sb.Append("  ButtonTextColorDark: ").Append(ButtonTextColorDark).Append("\n");
            sb.Append("  LinkColorDark: ").Append(LinkColorDark).Append("\n");
            sb.Append("  ThemeCode: ").Append(ThemeCode).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  IsAllowRegistrations: ").Append(IsAllowRegistrations).Append("\n");
            sb.Append("  SenderName: ").Append(SenderName).Append("\n");
            sb.Append("  SenderEmail: ").Append(SenderEmail).Append("\n");
            sb.Append("  IsCreateBillingCustomer: ").Append(IsCreateBillingCustomer).Append("\n");
            sb.Append("  BillingEmail: ").Append(BillingEmail).Append("\n");
            sb.Append("  BillingPlanCode: ").Append(BillingPlanCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateOrganizationRequest" />
    /// </summary>
    public class CreateOrganizationRequestJsonConverter : JsonConverter<CreateOrganizationRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateOrganizationRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateOrganizationRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<Dictionary<string, CreateOrganizationRequest.InnerEnum>?> featureFlags = default;
            Option<string?> externalId = default;
            Option<string?> backgroundColor = default;
            Option<string?> buttonColor = default;
            Option<string?> buttonTextColor = default;
            Option<string?> linkColor = default;
            Option<string?> backgroundColorDark = default;
            Option<string?> buttonColorDark = default;
            Option<string?> buttonTextColorDark = default;
            Option<string?> linkColorDark = default;
            Option<string?> themeCode = default;
            Option<string?> handle = default;
            Option<bool?> isAllowRegistrations = default;
            Option<string?> senderName = default;
            Option<string?> senderEmail = default;
            Option<bool?> isCreateBillingCustomer = default;
            Option<string?> billingEmail = default;
            Option<string?> billingPlanCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "feature_flags":
                            featureFlags = new Option<Dictionary<string, CreateOrganizationRequest.InnerEnum>?>(JsonSerializer.Deserialize<Dictionary<string, CreateOrganizationRequest.InnerEnum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "external_id":
                            externalId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "background_color":
                            backgroundColor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "button_color":
                            buttonColor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "button_text_color":
                            buttonTextColor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "link_color":
                            linkColor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "background_color_dark":
                            backgroundColorDark = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "button_color_dark":
                            buttonColorDark = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "button_text_color_dark":
                            buttonTextColorDark = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "link_color_dark":
                            linkColorDark = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "theme_code":
                            themeCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "handle":
                            handle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_allow_registrations":
                            isAllowRegistrations = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sender_name":
                            senderName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sender_email":
                            senderEmail = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_create_billing_customer":
                            isCreateBillingCustomer = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "billing_email":
                            billingEmail = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "billing_plan_code":
                            billingPlanCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateOrganizationRequest.", nameof(name));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateOrganizationRequest.");

            if (featureFlags.IsSet && featureFlags.Value == null)
                throw new ArgumentNullException(nameof(featureFlags), "Property is not nullable for class CreateOrganizationRequest.");

            if (externalId.IsSet && externalId.Value == null)
                throw new ArgumentNullException(nameof(externalId), "Property is not nullable for class CreateOrganizationRequest.");

            if (backgroundColor.IsSet && backgroundColor.Value == null)
                throw new ArgumentNullException(nameof(backgroundColor), "Property is not nullable for class CreateOrganizationRequest.");

            if (buttonColor.IsSet && buttonColor.Value == null)
                throw new ArgumentNullException(nameof(buttonColor), "Property is not nullable for class CreateOrganizationRequest.");

            if (buttonTextColor.IsSet && buttonTextColor.Value == null)
                throw new ArgumentNullException(nameof(buttonTextColor), "Property is not nullable for class CreateOrganizationRequest.");

            if (linkColor.IsSet && linkColor.Value == null)
                throw new ArgumentNullException(nameof(linkColor), "Property is not nullable for class CreateOrganizationRequest.");

            if (backgroundColorDark.IsSet && backgroundColorDark.Value == null)
                throw new ArgumentNullException(nameof(backgroundColorDark), "Property is not nullable for class CreateOrganizationRequest.");

            if (buttonColorDark.IsSet && buttonColorDark.Value == null)
                throw new ArgumentNullException(nameof(buttonColorDark), "Property is not nullable for class CreateOrganizationRequest.");

            if (buttonTextColorDark.IsSet && buttonTextColorDark.Value == null)
                throw new ArgumentNullException(nameof(buttonTextColorDark), "Property is not nullable for class CreateOrganizationRequest.");

            if (linkColorDark.IsSet && linkColorDark.Value == null)
                throw new ArgumentNullException(nameof(linkColorDark), "Property is not nullable for class CreateOrganizationRequest.");

            if (themeCode.IsSet && themeCode.Value == null)
                throw new ArgumentNullException(nameof(themeCode), "Property is not nullable for class CreateOrganizationRequest.");

            if (handle.IsSet && handle.Value == null)
                throw new ArgumentNullException(nameof(handle), "Property is not nullable for class CreateOrganizationRequest.");

            if (isAllowRegistrations.IsSet && isAllowRegistrations.Value == null)
                throw new ArgumentNullException(nameof(isAllowRegistrations), "Property is not nullable for class CreateOrganizationRequest.");

            if (isCreateBillingCustomer.IsSet && isCreateBillingCustomer.Value == null)
                throw new ArgumentNullException(nameof(isCreateBillingCustomer), "Property is not nullable for class CreateOrganizationRequest.");

            if (billingEmail.IsSet && billingEmail.Value == null)
                throw new ArgumentNullException(nameof(billingEmail), "Property is not nullable for class CreateOrganizationRequest.");

            if (billingPlanCode.IsSet && billingPlanCode.Value == null)
                throw new ArgumentNullException(nameof(billingPlanCode), "Property is not nullable for class CreateOrganizationRequest.");

            return new CreateOrganizationRequest(name.Value!, featureFlags, externalId, backgroundColor, buttonColor, buttonTextColor, linkColor, backgroundColorDark, buttonColorDark, buttonTextColorDark, linkColorDark, themeCode, handle, isAllowRegistrations, senderName, senderEmail, isCreateBillingCustomer, billingEmail, billingPlanCode);
        }

        /// <summary>
        /// Serializes a <see cref="CreateOrganizationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createOrganizationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateOrganizationRequest createOrganizationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createOrganizationRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateOrganizationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createOrganizationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateOrganizationRequest createOrganizationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createOrganizationRequest.Name == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.Name), "Property is required for class CreateOrganizationRequest.");

            if (createOrganizationRequest.FeatureFlagsOption.IsSet && createOrganizationRequest.FeatureFlags == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.FeatureFlags), "Property is required for class CreateOrganizationRequest.");

            if (createOrganizationRequest.ExternalIdOption.IsSet && createOrganizationRequest.ExternalId == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.ExternalId), "Property is required for class CreateOrganizationRequest.");

            if (createOrganizationRequest.BackgroundColorOption.IsSet && createOrganizationRequest.BackgroundColor == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.BackgroundColor), "Property is required for class CreateOrganizationRequest.");

            if (createOrganizationRequest.ButtonColorOption.IsSet && createOrganizationRequest.ButtonColor == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.ButtonColor), "Property is required for class CreateOrganizationRequest.");

            if (createOrganizationRequest.ButtonTextColorOption.IsSet && createOrganizationRequest.ButtonTextColor == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.ButtonTextColor), "Property is required for class CreateOrganizationRequest.");

            if (createOrganizationRequest.LinkColorOption.IsSet && createOrganizationRequest.LinkColor == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.LinkColor), "Property is required for class CreateOrganizationRequest.");

            if (createOrganizationRequest.BackgroundColorDarkOption.IsSet && createOrganizationRequest.BackgroundColorDark == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.BackgroundColorDark), "Property is required for class CreateOrganizationRequest.");

            if (createOrganizationRequest.ButtonColorDarkOption.IsSet && createOrganizationRequest.ButtonColorDark == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.ButtonColorDark), "Property is required for class CreateOrganizationRequest.");

            if (createOrganizationRequest.ButtonTextColorDarkOption.IsSet && createOrganizationRequest.ButtonTextColorDark == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.ButtonTextColorDark), "Property is required for class CreateOrganizationRequest.");

            if (createOrganizationRequest.LinkColorDarkOption.IsSet && createOrganizationRequest.LinkColorDark == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.LinkColorDark), "Property is required for class CreateOrganizationRequest.");

            if (createOrganizationRequest.ThemeCodeOption.IsSet && createOrganizationRequest.ThemeCode == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.ThemeCode), "Property is required for class CreateOrganizationRequest.");

            if (createOrganizationRequest.HandleOption.IsSet && createOrganizationRequest.Handle == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.Handle), "Property is required for class CreateOrganizationRequest.");

            if (createOrganizationRequest.BillingEmailOption.IsSet && createOrganizationRequest.BillingEmail == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.BillingEmail), "Property is required for class CreateOrganizationRequest.");

            if (createOrganizationRequest.BillingPlanCodeOption.IsSet && createOrganizationRequest.BillingPlanCode == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest.BillingPlanCode), "Property is required for class CreateOrganizationRequest.");

            writer.WriteString("name", createOrganizationRequest.Name);

            if (createOrganizationRequest.FeatureFlagsOption.IsSet)
            {
                writer.WritePropertyName("feature_flags");
                JsonSerializer.Serialize(writer, createOrganizationRequest.FeatureFlags, jsonSerializerOptions);
            }
            if (createOrganizationRequest.ExternalIdOption.IsSet)
                writer.WriteString("external_id", createOrganizationRequest.ExternalId);

            if (createOrganizationRequest.BackgroundColorOption.IsSet)
                writer.WriteString("background_color", createOrganizationRequest.BackgroundColor);

            if (createOrganizationRequest.ButtonColorOption.IsSet)
                writer.WriteString("button_color", createOrganizationRequest.ButtonColor);

            if (createOrganizationRequest.ButtonTextColorOption.IsSet)
                writer.WriteString("button_text_color", createOrganizationRequest.ButtonTextColor);

            if (createOrganizationRequest.LinkColorOption.IsSet)
                writer.WriteString("link_color", createOrganizationRequest.LinkColor);

            if (createOrganizationRequest.BackgroundColorDarkOption.IsSet)
                writer.WriteString("background_color_dark", createOrganizationRequest.BackgroundColorDark);

            if (createOrganizationRequest.ButtonColorDarkOption.IsSet)
                writer.WriteString("button_color_dark", createOrganizationRequest.ButtonColorDark);

            if (createOrganizationRequest.ButtonTextColorDarkOption.IsSet)
                writer.WriteString("button_text_color_dark", createOrganizationRequest.ButtonTextColorDark);

            if (createOrganizationRequest.LinkColorDarkOption.IsSet)
                writer.WriteString("link_color_dark", createOrganizationRequest.LinkColorDark);

            if (createOrganizationRequest.ThemeCodeOption.IsSet)
                writer.WriteString("theme_code", createOrganizationRequest.ThemeCode);

            if (createOrganizationRequest.HandleOption.IsSet)
                writer.WriteString("handle", createOrganizationRequest.Handle);

            if (createOrganizationRequest.IsAllowRegistrationsOption.IsSet)
                writer.WriteBoolean("is_allow_registrations", createOrganizationRequest.IsAllowRegistrationsOption.Value!.Value);

            if (createOrganizationRequest.SenderNameOption.IsSet)
                if (createOrganizationRequest.SenderNameOption.Value != null)
                    writer.WriteString("sender_name", createOrganizationRequest.SenderName);
                else
                    writer.WriteNull("sender_name");

            if (createOrganizationRequest.SenderEmailOption.IsSet)
                if (createOrganizationRequest.SenderEmailOption.Value != null)
                    writer.WriteString("sender_email", createOrganizationRequest.SenderEmail);
                else
                    writer.WriteNull("sender_email");

            if (createOrganizationRequest.IsCreateBillingCustomerOption.IsSet)
                writer.WriteBoolean("is_create_billing_customer", createOrganizationRequest.IsCreateBillingCustomerOption.Value!.Value);

            if (createOrganizationRequest.BillingEmailOption.IsSet)
                writer.WriteString("billing_email", createOrganizationRequest.BillingEmail);

            if (createOrganizationRequest.BillingPlanCodeOption.IsSet)
                writer.WriteString("billing_plan_code", createOrganizationRequest.BillingPlanCode);
        }
    }
}
