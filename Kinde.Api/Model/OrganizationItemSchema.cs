// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// OrganizationItemSchema
    /// </summary>
    public partial class OrganizationItemSchema
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationItemSchema" /> class.
        /// </summary>
        /// <param name="code">The unique identifier for the organization.</param>
        /// <param name="name">The organization&#39;s name.</param>
        /// <param name="handle">A unique handle for the organization - can be used for dynamic callback urls.</param>
        /// <param name="isDefault">Whether the organization is the default organization.</param>
        /// <param name="externalId">The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.</param>
        /// <param name="isAutoMembershipEnabled">If users become members of this organization when the org code is supplied during authentication.</param>
        [JsonConstructor]
        public OrganizationItemSchema(Option<string?> code = default, Option<string?> name = default, Option<string?> handle = default, Option<bool?> isDefault = default, Option<string?> externalId = default, Option<bool?> isAutoMembershipEnabled = default)
        {
            CodeOption = code;
            NameOption = name;
            HandleOption = handle;
            IsDefaultOption = isDefault;
            ExternalIdOption = externalId;
            IsAutoMembershipEnabledOption = isAutoMembershipEnabled;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// The unique identifier for the organization.
        /// </summary>
        /// <value>The unique identifier for the organization.</value>
        /* <example>org_1ccfb819462</example> */
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The organization&#39;s name.
        /// </summary>
        /// <value>The organization&#39;s name.</value>
        /* <example>Acme Corp</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Handle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HandleOption { get; private set; }

        /// <summary>
        /// A unique handle for the organization - can be used for dynamic callback urls.
        /// </summary>
        /// <value>A unique handle for the organization - can be used for dynamic callback urls.</value>
        /* <example>acme_corp</example> */
        [JsonPropertyName("handle")]
        public string? Handle { get { return this.HandleOption; } set { this.HandleOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDefault
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDefaultOption { get; private set; }

        /// <summary>
        /// Whether the organization is the default organization.
        /// </summary>
        /// <value>Whether the organization is the default organization.</value>
        /* <example>false</example> */
        [JsonPropertyName("is_default")]
        public bool? IsDefault { get { return this.IsDefaultOption; } set { this.IsDefaultOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalIdOption { get; private set; }

        /// <summary>
        /// The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.
        /// </summary>
        /// <value>The organization&#39;s external identifier - commonly used when migrating from or mapping to other systems.</value>
        /* <example>some1234</example> */
        [JsonPropertyName("external_id")]
        public string? ExternalId { get { return this.ExternalIdOption; } set { this.ExternalIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsAutoMembershipEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAutoMembershipEnabledOption { get; private set; }

        /// <summary>
        /// If users become members of this organization when the org code is supplied during authentication.
        /// </summary>
        /// <value>If users become members of this organization when the org code is supplied during authentication.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_auto_membership_enabled")]
        public bool? IsAutoMembershipEnabled { get { return this.IsAutoMembershipEnabledOption; } set { this.IsAutoMembershipEnabledOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationItemSchema {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  IsAutoMembershipEnabled: ").Append(IsAutoMembershipEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OrganizationItemSchema" />
    /// </summary>
    public class OrganizationItemSchemaJsonConverter : JsonConverter<OrganizationItemSchema>
    {
        /// <summary>
        /// Deserializes json to <see cref="OrganizationItemSchema" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OrganizationItemSchema Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> name = default;
            Option<string?> handle = default;
            Option<bool?> isDefault = default;
            Option<string?> externalId = default;
            Option<bool?> isAutoMembershipEnabled = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "handle":
                            handle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_default":
                            isDefault = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "external_id":
                            externalId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_auto_membership_enabled":
                            isAutoMembershipEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class OrganizationItemSchema.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class OrganizationItemSchema.");

            if (isDefault.IsSet && isDefault.Value == null)
                throw new ArgumentNullException(nameof(isDefault), "Property is not nullable for class OrganizationItemSchema.");

            if (isAutoMembershipEnabled.IsSet && isAutoMembershipEnabled.Value == null)
                throw new ArgumentNullException(nameof(isAutoMembershipEnabled), "Property is not nullable for class OrganizationItemSchema.");

            return new OrganizationItemSchema(code, name, handle, isDefault, externalId, isAutoMembershipEnabled);
        }

        /// <summary>
        /// Serializes a <see cref="OrganizationItemSchema" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationItemSchema"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OrganizationItemSchema organizationItemSchema, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, organizationItemSchema, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OrganizationItemSchema" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationItemSchema"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OrganizationItemSchema organizationItemSchema, JsonSerializerOptions jsonSerializerOptions)
        {
            if (organizationItemSchema.CodeOption.IsSet && organizationItemSchema.Code == null)
                throw new ArgumentNullException(nameof(organizationItemSchema.Code), "Property is required for class OrganizationItemSchema.");

            if (organizationItemSchema.NameOption.IsSet && organizationItemSchema.Name == null)
                throw new ArgumentNullException(nameof(organizationItemSchema.Name), "Property is required for class OrganizationItemSchema.");

            if (organizationItemSchema.CodeOption.IsSet)
                writer.WriteString("code", organizationItemSchema.Code);

            if (organizationItemSchema.NameOption.IsSet)
                writer.WriteString("name", organizationItemSchema.Name);

            if (organizationItemSchema.HandleOption.IsSet)
                if (organizationItemSchema.HandleOption.Value != null)
                    writer.WriteString("handle", organizationItemSchema.Handle);
                else
                    writer.WriteNull("handle");

            if (organizationItemSchema.IsDefaultOption.IsSet)
                writer.WriteBoolean("is_default", organizationItemSchema.IsDefaultOption.Value!.Value);

            if (organizationItemSchema.ExternalIdOption.IsSet)
                if (organizationItemSchema.ExternalIdOption.Value != null)
                    writer.WriteString("external_id", organizationItemSchema.ExternalId);
                else
                    writer.WriteNull("external_id");

            if (organizationItemSchema.IsAutoMembershipEnabledOption.IsSet)
                writer.WriteBoolean("is_auto_membership_enabled", organizationItemSchema.IsAutoMembershipEnabledOption.Value!.Value);
        }
    }
}
