// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Kinde.Api.Client;

namespace Kinde.Api.Model
{
    /// <summary>
    /// </summary>
    public partial class VerifyApiKeyResponse
    {
        /// <summary>
        /// </summary>
        /// <param name="code">Response code.</param>
        /// <param name="message">Response message.</param>
        /// <param name="isValid">Whether the API key is valid.</param>
        /// <param name="keyId">The unique ID for the API key.</param>
        /// <param name="status">The status of the API key.</param>
        /// <param name="scopes">Array of scopes associated with this key.</param>
        /// <param name="orgCode">The organization code associated with this key.</param>
        /// <param name="userId">The user ID associated with this key.</param>
        /// <param name="lastVerifiedOn">When the API key was last verified.</param>
        [JsonConstructor]
        public VerifyApiKeyResponse(Option<string?> code = default, Option<string?> message = default, Option<bool?> isValid = default, Option<string?> keyId = default, Option<string?> status = default, Option<List<string>?> scopes = default, Option<string?> orgCode = default, Option<string?> userId = default, Option<DateTimeOffset?> lastVerifiedOn = default, Option<int?> verificationCount = default)
        {
            CodeOption = code;
            MessageOption = message;
            IsValidOption = isValid;
            KeyIdOption = keyId;
            StatusOption = status;
            ScopesOption = scopes;
            OrgCodeOption = orgCode;
            UserIdOption = userId;
            LastVerifiedOnOption = lastVerifiedOn;
            VerificationCountOption = verificationCount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// Response code.
        /// </summary>
        /// <value>Response code.</value>
        /* <example>API_KEY_VERIFIED</example> */
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Response message.
        /// </summary>
        /// <value>Response message.</value>
        /* <example>API key verified</example> */
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsValid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsValidOption { get; private set; }

        /// <summary>
        /// Whether the API key is valid.
        /// </summary>
        /// <value>Whether the API key is valid.</value>
        /* <example>true</example> */
        [JsonPropertyName("is_valid")]
        public bool? IsValid { get { return this.IsValidOption; } set { this.IsValidOption = new(value); } }

        /// <summary>
        /// Used to track the state of KeyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyIdOption { get; private set; }

        /// <summary>
        /// The unique ID for the API key.
        /// </summary>
        /// <value>The unique ID for the API key.</value>
        [JsonPropertyName("key_id")]
        public string? KeyId { get { return this.KeyIdOption; } set { this.KeyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// The status of the API key.
        /// </summary>
        /// <value>The status of the API key.</value>
        /* <example>active</example> */
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Scopes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ScopesOption { get; private set; }

        /// <summary>
        /// Array of scopes associated with this key.
        /// </summary>
        /// <value>Array of scopes associated with this key.</value>
        /* <example>[&quot;read:users&quot;,&quot;write:users&quot;]</example> */
        [JsonPropertyName("scopes")]
        public List<string>? Scopes { get { return this.ScopesOption; } set { this.ScopesOption = new(value); } }

        /// <summary>
        /// Used to track the state of OrgCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrgCodeOption { get; private set; }

        /// <summary>
        /// The organization code associated with this key.
        /// </summary>
        /// <value>The organization code associated with this key.</value>
        /* <example>org_123</example> */
        [JsonPropertyName("org_code")]
        public string? OrgCode { get { return this.OrgCodeOption; } set { this.OrgCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserIdOption { get; private set; }

        /// <summary>
        /// The user ID associated with this key.
        /// </summary>
        /// <value>The user ID associated with this key.</value>
        /* <example>user_456</example> */
        [JsonPropertyName("user_id")]
        public string? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> LastVerifiedOnOption { get; private set; }

        /// <summary>
        /// When the API key was last verified.
        /// </summary>
        /// <value>When the API key was last verified.</value>
        /* <example>2024-11-18T13:32:03+11:00</example> */
        [JsonPropertyName("last_verified_on")]
        public DateTimeOffset? LastVerifiedOn { get { return this.LastVerifiedOnOption; } set { this.LastVerifiedOnOption = new(value); } }

        /// <summary>
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VerificationCountOption { get; private set; }

        /// <summary>
        /// Number of times this API key has been verified.
        /// </summary>
        /// <value>Number of times this API key has been verified.</value>
        /* <example>42</example> */
        [JsonPropertyName("verification_count")]
        public int? VerificationCount { get { return this.VerificationCountOption; } set { this.VerificationCountOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyApiKeyResponse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  KeyId: ").Append(KeyId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  OrgCode: ").Append(OrgCode).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  LastVerifiedOn: ").Append(LastVerifiedOn).Append("\n");
            sb.Append("  VerificationCount: ").Append(VerificationCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// </summary>
    public class VerifyApiKeyResponseJsonConverter : JsonConverter<VerifyApiKeyResponse>
    {
        /// <summary>
        /// </summary>
        public static string LastVerifiedOnFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VerifyApiKeyResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> message = default;
            Option<bool?> isValid = default;
            Option<string?> keyId = default;
            Option<string?> status = default;
            Option<List<string>?> scopes = default;
            Option<string?> orgCode = default;
            Option<string?> userId = default;
            Option<DateTimeOffset?> lastVerifiedOn = default;
            Option<int?> verificationCount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_valid":
                            isValid = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "key_id":
                            keyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scopes":
                            scopes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "org_code":
                            orgCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "last_verified_on":
                            lastVerifiedOn = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "verification_count":
                            verificationCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class VerifyApiKeyResponse.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class VerifyApiKeyResponse.");

            if (isValid.IsSet && isValid.Value == null)
                throw new ArgumentNullException(nameof(isValid), "Property is not nullable for class VerifyApiKeyResponse.");

            if (keyId.IsSet && keyId.Value == null)
                throw new ArgumentNullException(nameof(keyId), "Property is not nullable for class VerifyApiKeyResponse.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class VerifyApiKeyResponse.");

            if (scopes.IsSet && scopes.Value == null)
                throw new ArgumentNullException(nameof(scopes), "Property is not nullable for class VerifyApiKeyResponse.");

            if (verificationCount.IsSet && verificationCount.Value == null)
                throw new ArgumentNullException(nameof(verificationCount), "Property is not nullable for class VerifyApiKeyResponse.");

            return new VerifyApiKeyResponse(code, message, isValid, keyId, status, scopes, orgCode, userId, lastVerifiedOn, verificationCount);
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public override void Write(Utf8JsonWriter writer, VerifyApiKeyResponse verifyApiKeyResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, verifyApiKeyResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// </summary>
        /// <param name="writer"></param>
        public void WriteProperties(Utf8JsonWriter writer, VerifyApiKeyResponse verifyApiKeyResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (verifyApiKeyResponse.CodeOption.IsSet && verifyApiKeyResponse.Code == null)
                throw new ArgumentNullException(nameof(verifyApiKeyResponse.Code), "Property is required for class VerifyApiKeyResponse.");

            if (verifyApiKeyResponse.MessageOption.IsSet && verifyApiKeyResponse.Message == null)
                throw new ArgumentNullException(nameof(verifyApiKeyResponse.Message), "Property is required for class VerifyApiKeyResponse.");

            if (verifyApiKeyResponse.KeyIdOption.IsSet && verifyApiKeyResponse.KeyId == null)
                throw new ArgumentNullException(nameof(verifyApiKeyResponse.KeyId), "Property is required for class VerifyApiKeyResponse.");

            if (verifyApiKeyResponse.StatusOption.IsSet && verifyApiKeyResponse.Status == null)
                throw new ArgumentNullException(nameof(verifyApiKeyResponse.Status), "Property is required for class VerifyApiKeyResponse.");

            if (verifyApiKeyResponse.ScopesOption.IsSet && verifyApiKeyResponse.Scopes == null)
                throw new ArgumentNullException(nameof(verifyApiKeyResponse.Scopes), "Property is required for class VerifyApiKeyResponse.");

            if (verifyApiKeyResponse.CodeOption.IsSet)
                writer.WriteString("code", verifyApiKeyResponse.Code);

            if (verifyApiKeyResponse.MessageOption.IsSet)
                writer.WriteString("message", verifyApiKeyResponse.Message);

            if (verifyApiKeyResponse.IsValidOption.IsSet)
                writer.WriteBoolean("is_valid", verifyApiKeyResponse.IsValidOption.Value!.Value);

            if (verifyApiKeyResponse.KeyIdOption.IsSet)
                writer.WriteString("key_id", verifyApiKeyResponse.KeyId);

            if (verifyApiKeyResponse.StatusOption.IsSet)
                writer.WriteString("status", verifyApiKeyResponse.Status);

            if (verifyApiKeyResponse.ScopesOption.IsSet)
            {
                writer.WritePropertyName("scopes");
                JsonSerializer.Serialize(writer, verifyApiKeyResponse.Scopes, jsonSerializerOptions);
            }
            if (verifyApiKeyResponse.OrgCodeOption.IsSet)
                if (verifyApiKeyResponse.OrgCodeOption.Value != null)
                    writer.WriteString("org_code", verifyApiKeyResponse.OrgCode);
                else
                    writer.WriteNull("org_code");

            if (verifyApiKeyResponse.UserIdOption.IsSet)
                if (verifyApiKeyResponse.UserIdOption.Value != null)
                    writer.WriteString("user_id", verifyApiKeyResponse.UserId);
                else
                    writer.WriteNull("user_id");

            if (verifyApiKeyResponse.LastVerifiedOnOption.IsSet)
                if (verifyApiKeyResponse.LastVerifiedOnOption.Value != null)
                    writer.WriteString("last_verified_on", verifyApiKeyResponse.LastVerifiedOnOption.Value!.Value.ToString(LastVerifiedOnFormat));
                else
                    writer.WriteNull("last_verified_on");

            if (verifyApiKeyResponse.VerificationCountOption.IsSet)
                writer.WriteNumber("verification_count", verifyApiKeyResponse.VerificationCountOption.Value!.Value);
        }
    }
}
