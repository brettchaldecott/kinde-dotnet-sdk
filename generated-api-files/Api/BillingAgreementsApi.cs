// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Kinde.Api.Client;
using Kinde.Api.Model;
using System.Diagnostics.CodeAnalysis;

namespace Kinde.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IBillingAgreementsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        BillingAgreementsApiEvents Events { get; }

        /// <summary>
        /// Create billing agreement
        /// </summary>
        /// <remarks>
        /// Creates a new billing agreement based on the plan code passed, and cancels the customer&#39;s existing agreements  &lt;div&gt;   &lt;code&gt;create:billing_agreements&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBillingAgreementRequest">New agreement request values</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBillingAgreementApiResponse"/>&gt;</returns>
        Task<ICreateBillingAgreementApiResponse> CreateBillingAgreementAsync(CreateBillingAgreementRequest createBillingAgreementRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create billing agreement
        /// </summary>
        /// <remarks>
        /// Creates a new billing agreement based on the plan code passed, and cancels the customer&#39;s existing agreements  &lt;div&gt;   &lt;code&gt;create:billing_agreements&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="createBillingAgreementRequest">New agreement request values</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBillingAgreementApiResponse"/>?&gt;</returns>
        Task<ICreateBillingAgreementApiResponse?> CreateBillingAgreementOrDefaultAsync(CreateBillingAgreementRequest createBillingAgreementRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get billing agreements
        /// </summary>
        /// <remarks>
        /// Returns all the agreements a billing customer currently has access to  &lt;div&gt;   &lt;code&gt;read:billing_agreements&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The ID of the billing customer to retrieve agreements for</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="startingAfter">The ID of the billing agreement to start after. (optional)</param>
        /// <param name="endingBefore">The ID of the billing agreement to end before. (optional)</param>
        /// <param name="featureCode">The feature code to filter by agreements only containing that feature (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBillingAgreementsApiResponse"/>&gt;</returns>
        Task<IGetBillingAgreementsApiResponse> GetBillingAgreementsAsync(string customerId, Option<int?> pageSize = default, Option<string?> startingAfter = default, Option<string?> endingBefore = default, Option<string?> featureCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get billing agreements
        /// </summary>
        /// <remarks>
        /// Returns all the agreements a billing customer currently has access to  &lt;div&gt;   &lt;code&gt;read:billing_agreements&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="customerId">The ID of the billing customer to retrieve agreements for</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="startingAfter">The ID of the billing agreement to start after. (optional)</param>
        /// <param name="endingBefore">The ID of the billing agreement to end before. (optional)</param>
        /// <param name="featureCode">The feature code to filter by agreements only containing that feature (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBillingAgreementsApiResponse"/>?&gt;</returns>
        Task<IGetBillingAgreementsApiResponse?> GetBillingAgreementsOrDefaultAsync(string customerId, Option<int?> pageSize = default, Option<string?> startingAfter = default, Option<string?> endingBefore = default, Option<string?> featureCode = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateBillingAgreementApiResponse"/>
    /// </summary>
    public interface ICreateBillingAgreementApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetBillingAgreementsApiResponse"/>
    /// </summary>
    public interface IGetBillingAgreementsApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.GetBillingAgreementsResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class BillingAgreementsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateBillingAgreement;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateBillingAgreement;

        internal void ExecuteOnCreateBillingAgreement(BillingAgreementsApi.CreateBillingAgreementApiResponse apiResponse)
        {
            OnCreateBillingAgreement?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateBillingAgreement(Exception exception)
        {
            OnErrorCreateBillingAgreement?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetBillingAgreements;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetBillingAgreements;

        internal void ExecuteOnGetBillingAgreements(BillingAgreementsApi.GetBillingAgreementsApiResponse apiResponse)
        {
            OnGetBillingAgreements?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBillingAgreements(Exception exception)
        {
            OnErrorGetBillingAgreements?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class BillingAgreementsApi : IBillingAgreementsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<BillingAgreementsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public BillingAgreementsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingAgreementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BillingAgreementsApi(ILogger<BillingAgreementsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, BillingAgreementsApiEvents billingAgreementsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<BillingAgreementsApi>();
            HttpClient = httpClient;
            Events = billingAgreementsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCreateBillingAgreement(CreateBillingAgreementRequest createBillingAgreementRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createBillingAgreementRequest"></param>
        /// <returns></returns>
        private void ValidateCreateBillingAgreement(CreateBillingAgreementRequest createBillingAgreementRequest)
        {
            if (createBillingAgreementRequest == null)
                throw new ArgumentNullException(nameof(createBillingAgreementRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createBillingAgreementRequest"></param>
        private void AfterCreateBillingAgreementDefaultImplementation(ICreateBillingAgreementApiResponse apiResponseLocalVar, CreateBillingAgreementRequest createBillingAgreementRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateBillingAgreement(ref suppressDefaultLog, apiResponseLocalVar, createBillingAgreementRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createBillingAgreementRequest"></param>
        partial void AfterCreateBillingAgreement(ref bool suppressDefaultLog, ICreateBillingAgreementApiResponse apiResponseLocalVar, CreateBillingAgreementRequest createBillingAgreementRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createBillingAgreementRequest"></param>
        private void OnErrorCreateBillingAgreementDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateBillingAgreementRequest createBillingAgreementRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateBillingAgreement(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createBillingAgreementRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createBillingAgreementRequest"></param>
        partial void OnErrorCreateBillingAgreement(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateBillingAgreementRequest createBillingAgreementRequest);

        /// <summary>
        /// Create billing agreement Creates a new billing agreement based on the plan code passed, and cancels the customer&#39;s existing agreements  &lt;div&gt;   &lt;code&gt;create:billing_agreements&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="createBillingAgreementRequest">New agreement request values</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBillingAgreementApiResponse"/>&gt;</returns>
        public async Task<ICreateBillingAgreementApiResponse?> CreateBillingAgreementOrDefaultAsync(CreateBillingAgreementRequest createBillingAgreementRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateBillingAgreementAsync(createBillingAgreementRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create billing agreement Creates a new billing agreement based on the plan code passed, and cancels the customer&#39;s existing agreements  &lt;div&gt;   &lt;code&gt;create:billing_agreements&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBillingAgreementRequest">New agreement request values</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBillingAgreementApiResponse"/>&gt;</returns>
        public async Task<ICreateBillingAgreementApiResponse> CreateBillingAgreementAsync(CreateBillingAgreementRequest createBillingAgreementRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateBillingAgreement(createBillingAgreementRequest);

                FormatCreateBillingAgreement(createBillingAgreementRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/billing/agreements"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/billing/agreements");

                    httpRequestMessageLocalVar.Content = (createBillingAgreementRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createBillingAgreementRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreateBillingAgreementApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateBillingAgreementApiResponse>();
                        CreateBillingAgreementApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/billing/agreements", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreateBillingAgreementDefaultImplementation(apiResponseLocalVar, createBillingAgreementRequest);

                        Events.ExecuteOnCreateBillingAgreement(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateBillingAgreementDefaultImplementation(e, "/api/v1/billing/agreements", uriBuilderLocalVar.Path, createBillingAgreementRequest);
                Events.ExecuteOnErrorCreateBillingAgreement(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateBillingAgreementApiResponse"/>
        /// </summary>
        public partial class CreateBillingAgreementApiResponse : Kinde.Api.Client.ApiResponse, ICreateBillingAgreementApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateBillingAgreementApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateBillingAgreementApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateBillingAgreementApiResponse(ILogger<CreateBillingAgreementApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreateBillingAgreementApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateBillingAgreementApiResponse(ILogger<CreateBillingAgreementApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetBillingAgreements(ref string customerId, ref Option<int?> pageSize, ref Option<string?> startingAfter, ref Option<string?> endingBefore, ref Option<string?> featureCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="customerId"></param>
        /// <returns></returns>
        private void ValidateGetBillingAgreements(string customerId)
        {
            if (customerId == null)
                throw new ArgumentNullException(nameof(customerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize"></param>
        /// <param name="startingAfter"></param>
        /// <param name="endingBefore"></param>
        /// <param name="featureCode"></param>
        private void AfterGetBillingAgreementsDefaultImplementation(IGetBillingAgreementsApiResponse apiResponseLocalVar, string customerId, Option<int?> pageSize, Option<string?> startingAfter, Option<string?> endingBefore, Option<string?> featureCode)
        {
            bool suppressDefaultLog = false;
            AfterGetBillingAgreements(ref suppressDefaultLog, apiResponseLocalVar, customerId, pageSize, startingAfter, endingBefore, featureCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize"></param>
        /// <param name="startingAfter"></param>
        /// <param name="endingBefore"></param>
        /// <param name="featureCode"></param>
        partial void AfterGetBillingAgreements(ref bool suppressDefaultLog, IGetBillingAgreementsApiResponse apiResponseLocalVar, string customerId, Option<int?> pageSize, Option<string?> startingAfter, Option<string?> endingBefore, Option<string?> featureCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize"></param>
        /// <param name="startingAfter"></param>
        /// <param name="endingBefore"></param>
        /// <param name="featureCode"></param>
        private void OnErrorGetBillingAgreementsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string customerId, Option<int?> pageSize, Option<string?> startingAfter, Option<string?> endingBefore, Option<string?> featureCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetBillingAgreements(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, customerId, pageSize, startingAfter, endingBefore, featureCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize"></param>
        /// <param name="startingAfter"></param>
        /// <param name="endingBefore"></param>
        /// <param name="featureCode"></param>
        partial void OnErrorGetBillingAgreements(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string customerId, Option<int?> pageSize, Option<string?> startingAfter, Option<string?> endingBefore, Option<string?> featureCode);

        /// <summary>
        /// Get billing agreements Returns all the agreements a billing customer currently has access to  &lt;div&gt;   &lt;code&gt;read:billing_agreements&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="customerId">The ID of the billing customer to retrieve agreements for</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="startingAfter">The ID of the billing agreement to start after. (optional)</param>
        /// <param name="endingBefore">The ID of the billing agreement to end before. (optional)</param>
        /// <param name="featureCode">The feature code to filter by agreements only containing that feature (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBillingAgreementsApiResponse"/>&gt;</returns>
        public async Task<IGetBillingAgreementsApiResponse?> GetBillingAgreementsOrDefaultAsync(string customerId, Option<int?> pageSize = default, Option<string?> startingAfter = default, Option<string?> endingBefore = default, Option<string?> featureCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBillingAgreementsAsync(customerId, pageSize, startingAfter, endingBefore, featureCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get billing agreements Returns all the agreements a billing customer currently has access to  &lt;div&gt;   &lt;code&gt;read:billing_agreements&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">The ID of the billing customer to retrieve agreements for</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="startingAfter">The ID of the billing agreement to start after. (optional)</param>
        /// <param name="endingBefore">The ID of the billing agreement to end before. (optional)</param>
        /// <param name="featureCode">The feature code to filter by agreements only containing that feature (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBillingAgreementsApiResponse"/>&gt;</returns>
        public async Task<IGetBillingAgreementsApiResponse> GetBillingAgreementsAsync(string customerId, Option<int?> pageSize = default, Option<string?> startingAfter = default, Option<string?> endingBefore = default, Option<string?> featureCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetBillingAgreements(customerId);

                FormatGetBillingAgreements(ref customerId, ref pageSize, ref startingAfter, ref endingBefore, ref featureCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/billing/agreements"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/billing/agreements");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["customer_id"] = ClientUtils.ParameterToString(customerId);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (startingAfter.IsSet)
                        parseQueryStringLocalVar["starting_after"] = ClientUtils.ParameterToString(startingAfter.Value);

                    if (endingBefore.IsSet)
                        parseQueryStringLocalVar["ending_before"] = ClientUtils.ParameterToString(endingBefore.Value);

                    if (featureCode.IsSet)
                        parseQueryStringLocalVar["feature_code"] = ClientUtils.ParameterToString(featureCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json; charset=utf-8",
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetBillingAgreementsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBillingAgreementsApiResponse>();
                        GetBillingAgreementsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/billing/agreements", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetBillingAgreementsDefaultImplementation(apiResponseLocalVar, customerId, pageSize, startingAfter, endingBefore, featureCode);

                        Events.ExecuteOnGetBillingAgreements(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBillingAgreementsDefaultImplementation(e, "/api/v1/billing/agreements", uriBuilderLocalVar.Path, customerId, pageSize, startingAfter, endingBefore, featureCode);
                Events.ExecuteOnErrorGetBillingAgreements(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBillingAgreementsApiResponse"/>
        /// </summary>
        public partial class GetBillingAgreementsApiResponse : Kinde.Api.Client.ApiResponse, IGetBillingAgreementsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBillingAgreementsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBillingAgreementsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBillingAgreementsApiResponse(ILogger<GetBillingAgreementsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetBillingAgreementsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBillingAgreementsApiResponse(ILogger<GetBillingAgreementsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.GetBillingAgreementsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.GetBillingAgreementsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.GetBillingAgreementsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
