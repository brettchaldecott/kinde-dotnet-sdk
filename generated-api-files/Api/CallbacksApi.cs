// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Kinde.Api.Client;
using Kinde.Api.Model;
using System.Diagnostics.CodeAnalysis;

namespace Kinde.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICallbacksApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CallbacksApiEvents Events { get; }

        /// <summary>
        /// Add logout redirect URLs
        /// </summary>
        /// <remarks>
        /// Add additional logout redirect URLs.  &lt;div&gt;   &lt;code&gt;create:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddLogoutRedirectURLsApiResponse"/>&gt;</returns>
        Task<IAddLogoutRedirectURLsApiResponse> AddLogoutRedirectURLsAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add logout redirect URLs
        /// </summary>
        /// <remarks>
        /// Add additional logout redirect URLs.  &lt;div&gt;   &lt;code&gt;create:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddLogoutRedirectURLsApiResponse"/>?&gt;</returns>
        Task<IAddLogoutRedirectURLsApiResponse?> AddLogoutRedirectURLsOrDefaultAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Redirect Callback URLs
        /// </summary>
        /// <remarks>
        /// Add additional redirect callback URLs.  &lt;div&gt;   &lt;code&gt;create:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddRedirectCallbackURLsApiResponse"/>&gt;</returns>
        Task<IAddRedirectCallbackURLsApiResponse> AddRedirectCallbackURLsAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Redirect Callback URLs
        /// </summary>
        /// <remarks>
        /// Add additional redirect callback URLs.  &lt;div&gt;   &lt;code&gt;create:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddRedirectCallbackURLsApiResponse"/>?&gt;</returns>
        Task<IAddRedirectCallbackURLsApiResponse?> AddRedirectCallbackURLsOrDefaultAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Callback URLs
        /// </summary>
        /// <remarks>
        /// Delete callback URLs.  &lt;div&gt;   &lt;code&gt;delete:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCallbackURLsApiResponse"/>&gt;</returns>
        Task<IDeleteCallbackURLsApiResponse> DeleteCallbackURLsAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Callback URLs
        /// </summary>
        /// <remarks>
        /// Delete callback URLs.  &lt;div&gt;   &lt;code&gt;delete:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCallbackURLsApiResponse"/>?&gt;</returns>
        Task<IDeleteCallbackURLsApiResponse?> DeleteCallbackURLsOrDefaultAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Logout URLs
        /// </summary>
        /// <remarks>
        /// Delete logout URLs.  &lt;div&gt;   &lt;code&gt;delete:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteLogoutURLsApiResponse"/>&gt;</returns>
        Task<IDeleteLogoutURLsApiResponse> DeleteLogoutURLsAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Logout URLs
        /// </summary>
        /// <remarks>
        /// Delete logout URLs.  &lt;div&gt;   &lt;code&gt;delete:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteLogoutURLsApiResponse"/>?&gt;</returns>
        Task<IDeleteLogoutURLsApiResponse?> DeleteLogoutURLsOrDefaultAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Callback URLs
        /// </summary>
        /// <remarks>
        /// Returns an application&#39;s redirect callback URLs.  &lt;div&gt;   &lt;code&gt;read:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCallbackURLsApiResponse"/>&gt;</returns>
        Task<IGetCallbackURLsApiResponse> GetCallbackURLsAsync(string appId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Callback URLs
        /// </summary>
        /// <remarks>
        /// Returns an application&#39;s redirect callback URLs.  &lt;div&gt;   &lt;code&gt;read:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCallbackURLsApiResponse"/>?&gt;</returns>
        Task<IGetCallbackURLsApiResponse?> GetCallbackURLsOrDefaultAsync(string appId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List logout URLs
        /// </summary>
        /// <remarks>
        /// Returns an application&#39;s logout redirect URLs.  &lt;div&gt;   &lt;code&gt;read:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLogoutURLsApiResponse"/>&gt;</returns>
        Task<IGetLogoutURLsApiResponse> GetLogoutURLsAsync(string appId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List logout URLs
        /// </summary>
        /// <remarks>
        /// Returns an application&#39;s logout redirect URLs.  &lt;div&gt;   &lt;code&gt;read:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLogoutURLsApiResponse"/>?&gt;</returns>
        Task<IGetLogoutURLsApiResponse?> GetLogoutURLsOrDefaultAsync(string appId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace logout redirect URls
        /// </summary>
        /// <remarks>
        /// Replace all logout redirect URLs.  &lt;div&gt;   &lt;code&gt;update:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceLogoutRedirectURLsApiResponse"/>&gt;</returns>
        Task<IReplaceLogoutRedirectURLsApiResponse> ReplaceLogoutRedirectURLsAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace logout redirect URls
        /// </summary>
        /// <remarks>
        /// Replace all logout redirect URLs.  &lt;div&gt;   &lt;code&gt;update:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceLogoutRedirectURLsApiResponse"/>?&gt;</returns>
        Task<IReplaceLogoutRedirectURLsApiResponse?> ReplaceLogoutRedirectURLsOrDefaultAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace Redirect Callback URLs
        /// </summary>
        /// <remarks>
        /// Replace all redirect callback URLs.  &lt;div&gt;   &lt;code&gt;update:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceRedirectCallbackURLsApiResponse"/>&gt;</returns>
        Task<IReplaceRedirectCallbackURLsApiResponse> ReplaceRedirectCallbackURLsAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace Redirect Callback URLs
        /// </summary>
        /// <remarks>
        /// Replace all redirect callback URLs.  &lt;div&gt;   &lt;code&gt;update:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceRedirectCallbackURLsApiResponse"/>?&gt;</returns>
        Task<IReplaceRedirectCallbackURLsApiResponse?> ReplaceRedirectCallbackURLsOrDefaultAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddLogoutRedirectURLsApiResponse"/>
    /// </summary>
    public interface IAddLogoutRedirectURLsApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IAddRedirectCallbackURLsApiResponse"/>
    /// </summary>
    public interface IAddRedirectCallbackURLsApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteCallbackURLsApiResponse"/>
    /// </summary>
    public interface IDeleteCallbackURLsApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteLogoutURLsApiResponse"/>
    /// </summary>
    public interface IDeleteLogoutURLsApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetCallbackURLsApiResponse"/>
    /// </summary>
    public interface IGetCallbackURLsApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.RedirectCallbackUrls?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetLogoutURLsApiResponse"/>
    /// </summary>
    public interface IGetLogoutURLsApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.LogoutRedirectUrls?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IReplaceLogoutRedirectURLsApiResponse"/>
    /// </summary>
    public interface IReplaceLogoutRedirectURLsApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IReplaceRedirectCallbackURLsApiResponse"/>
    /// </summary>
    public interface IReplaceRedirectCallbackURLsApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CallbacksApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddLogoutRedirectURLs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddLogoutRedirectURLs;

        internal void ExecuteOnAddLogoutRedirectURLs(CallbacksApi.AddLogoutRedirectURLsApiResponse apiResponse)
        {
            OnAddLogoutRedirectURLs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddLogoutRedirectURLs(Exception exception)
        {
            OnErrorAddLogoutRedirectURLs?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddRedirectCallbackURLs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddRedirectCallbackURLs;

        internal void ExecuteOnAddRedirectCallbackURLs(CallbacksApi.AddRedirectCallbackURLsApiResponse apiResponse)
        {
            OnAddRedirectCallbackURLs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddRedirectCallbackURLs(Exception exception)
        {
            OnErrorAddRedirectCallbackURLs?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteCallbackURLs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteCallbackURLs;

        internal void ExecuteOnDeleteCallbackURLs(CallbacksApi.DeleteCallbackURLsApiResponse apiResponse)
        {
            OnDeleteCallbackURLs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteCallbackURLs(Exception exception)
        {
            OnErrorDeleteCallbackURLs?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteLogoutURLs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteLogoutURLs;

        internal void ExecuteOnDeleteLogoutURLs(CallbacksApi.DeleteLogoutURLsApiResponse apiResponse)
        {
            OnDeleteLogoutURLs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteLogoutURLs(Exception exception)
        {
            OnErrorDeleteLogoutURLs?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCallbackURLs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCallbackURLs;

        internal void ExecuteOnGetCallbackURLs(CallbacksApi.GetCallbackURLsApiResponse apiResponse)
        {
            OnGetCallbackURLs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCallbackURLs(Exception exception)
        {
            OnErrorGetCallbackURLs?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetLogoutURLs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetLogoutURLs;

        internal void ExecuteOnGetLogoutURLs(CallbacksApi.GetLogoutURLsApiResponse apiResponse)
        {
            OnGetLogoutURLs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetLogoutURLs(Exception exception)
        {
            OnErrorGetLogoutURLs?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnReplaceLogoutRedirectURLs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorReplaceLogoutRedirectURLs;

        internal void ExecuteOnReplaceLogoutRedirectURLs(CallbacksApi.ReplaceLogoutRedirectURLsApiResponse apiResponse)
        {
            OnReplaceLogoutRedirectURLs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReplaceLogoutRedirectURLs(Exception exception)
        {
            OnErrorReplaceLogoutRedirectURLs?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnReplaceRedirectCallbackURLs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorReplaceRedirectCallbackURLs;

        internal void ExecuteOnReplaceRedirectCallbackURLs(CallbacksApi.ReplaceRedirectCallbackURLsApiResponse apiResponse)
        {
            OnReplaceRedirectCallbackURLs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReplaceRedirectCallbackURLs(Exception exception)
        {
            OnErrorReplaceRedirectCallbackURLs?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CallbacksApi : ICallbacksApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CallbacksApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CallbacksApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallbacksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallbacksApi(ILogger<CallbacksApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CallbacksApiEvents callbacksApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CallbacksApi>();
            HttpClient = httpClient;
            Events = callbacksApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatAddLogoutRedirectURLs(ref string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appId"></param>
        /// <param name="replaceLogoutRedirectURLsRequest"></param>
        /// <returns></returns>
        private void ValidateAddLogoutRedirectURLs(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest)
        {
            if (appId == null)
                throw new ArgumentNullException(nameof(appId));

            if (replaceLogoutRedirectURLsRequest == null)
                throw new ArgumentNullException(nameof(replaceLogoutRedirectURLsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceLogoutRedirectURLsRequest"></param>
        private void AfterAddLogoutRedirectURLsDefaultImplementation(IAddLogoutRedirectURLsApiResponse apiResponseLocalVar, string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddLogoutRedirectURLs(ref suppressDefaultLog, apiResponseLocalVar, appId, replaceLogoutRedirectURLsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceLogoutRedirectURLsRequest"></param>
        partial void AfterAddLogoutRedirectURLs(ref bool suppressDefaultLog, IAddLogoutRedirectURLsApiResponse apiResponseLocalVar, string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceLogoutRedirectURLsRequest"></param>
        private void OnErrorAddLogoutRedirectURLsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddLogoutRedirectURLs(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appId, replaceLogoutRedirectURLsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceLogoutRedirectURLsRequest"></param>
        partial void OnErrorAddLogoutRedirectURLs(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest);

        /// <summary>
        /// Add logout redirect URLs Add additional logout redirect URLs.  &lt;div&gt;   &lt;code&gt;create:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddLogoutRedirectURLsApiResponse"/>&gt;</returns>
        public async Task<IAddLogoutRedirectURLsApiResponse?> AddLogoutRedirectURLsOrDefaultAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddLogoutRedirectURLsAsync(appId, replaceLogoutRedirectURLsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add logout redirect URLs Add additional logout redirect URLs.  &lt;div&gt;   &lt;code&gt;create:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddLogoutRedirectURLsApiResponse"/>&gt;</returns>
        public async Task<IAddLogoutRedirectURLsApiResponse> AddLogoutRedirectURLsAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddLogoutRedirectURLs(appId, replaceLogoutRedirectURLsRequest);

                FormatAddLogoutRedirectURLs(ref appId, replaceLogoutRedirectURLsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/applications/{app_id}/auth_logout_urls"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/applications/{app_id}/auth_logout_urls");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bapp_id%7D", Uri.EscapeDataString(appId.ToString()));

                    httpRequestMessageLocalVar.Content = (replaceLogoutRedirectURLsRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(replaceLogoutRedirectURLsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddLogoutRedirectURLsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddLogoutRedirectURLsApiResponse>();
                        AddLogoutRedirectURLsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/applications/{app_id}/auth_logout_urls", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddLogoutRedirectURLsDefaultImplementation(apiResponseLocalVar, appId, replaceLogoutRedirectURLsRequest);

                        Events.ExecuteOnAddLogoutRedirectURLs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddLogoutRedirectURLsDefaultImplementation(e, "/api/v1/applications/{app_id}/auth_logout_urls", uriBuilderLocalVar.Path, appId, replaceLogoutRedirectURLsRequest);
                Events.ExecuteOnErrorAddLogoutRedirectURLs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddLogoutRedirectURLsApiResponse"/>
        /// </summary>
        public partial class AddLogoutRedirectURLsApiResponse : Kinde.Api.Client.ApiResponse, IAddLogoutRedirectURLsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddLogoutRedirectURLsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddLogoutRedirectURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddLogoutRedirectURLsApiResponse(ILogger<AddLogoutRedirectURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddLogoutRedirectURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddLogoutRedirectURLsApiResponse(ILogger<AddLogoutRedirectURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddRedirectCallbackURLs(ref string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appId"></param>
        /// <param name="replaceRedirectCallbackURLsRequest"></param>
        /// <returns></returns>
        private void ValidateAddRedirectCallbackURLs(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest)
        {
            if (appId == null)
                throw new ArgumentNullException(nameof(appId));

            if (replaceRedirectCallbackURLsRequest == null)
                throw new ArgumentNullException(nameof(replaceRedirectCallbackURLsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceRedirectCallbackURLsRequest"></param>
        private void AfterAddRedirectCallbackURLsDefaultImplementation(IAddRedirectCallbackURLsApiResponse apiResponseLocalVar, string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddRedirectCallbackURLs(ref suppressDefaultLog, apiResponseLocalVar, appId, replaceRedirectCallbackURLsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceRedirectCallbackURLsRequest"></param>
        partial void AfterAddRedirectCallbackURLs(ref bool suppressDefaultLog, IAddRedirectCallbackURLsApiResponse apiResponseLocalVar, string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceRedirectCallbackURLsRequest"></param>
        private void OnErrorAddRedirectCallbackURLsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddRedirectCallbackURLs(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appId, replaceRedirectCallbackURLsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceRedirectCallbackURLsRequest"></param>
        partial void OnErrorAddRedirectCallbackURLs(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest);

        /// <summary>
        /// Add Redirect Callback URLs Add additional redirect callback URLs.  &lt;div&gt;   &lt;code&gt;create:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddRedirectCallbackURLsApiResponse"/>&gt;</returns>
        public async Task<IAddRedirectCallbackURLsApiResponse?> AddRedirectCallbackURLsOrDefaultAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddRedirectCallbackURLsAsync(appId, replaceRedirectCallbackURLsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Redirect Callback URLs Add additional redirect callback URLs.  &lt;div&gt;   &lt;code&gt;create:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddRedirectCallbackURLsApiResponse"/>&gt;</returns>
        public async Task<IAddRedirectCallbackURLsApiResponse> AddRedirectCallbackURLsAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddRedirectCallbackURLs(appId, replaceRedirectCallbackURLsRequest);

                FormatAddRedirectCallbackURLs(ref appId, replaceRedirectCallbackURLsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/applications/{app_id}/auth_redirect_urls"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/applications/{app_id}/auth_redirect_urls");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bapp_id%7D", Uri.EscapeDataString(appId.ToString()));

                    httpRequestMessageLocalVar.Content = (replaceRedirectCallbackURLsRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(replaceRedirectCallbackURLsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddRedirectCallbackURLsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddRedirectCallbackURLsApiResponse>();
                        AddRedirectCallbackURLsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/applications/{app_id}/auth_redirect_urls", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddRedirectCallbackURLsDefaultImplementation(apiResponseLocalVar, appId, replaceRedirectCallbackURLsRequest);

                        Events.ExecuteOnAddRedirectCallbackURLs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddRedirectCallbackURLsDefaultImplementation(e, "/api/v1/applications/{app_id}/auth_redirect_urls", uriBuilderLocalVar.Path, appId, replaceRedirectCallbackURLsRequest);
                Events.ExecuteOnErrorAddRedirectCallbackURLs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddRedirectCallbackURLsApiResponse"/>
        /// </summary>
        public partial class AddRedirectCallbackURLsApiResponse : Kinde.Api.Client.ApiResponse, IAddRedirectCallbackURLsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddRedirectCallbackURLsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddRedirectCallbackURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddRedirectCallbackURLsApiResponse(ILogger<AddRedirectCallbackURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddRedirectCallbackURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddRedirectCallbackURLsApiResponse(ILogger<AddRedirectCallbackURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteCallbackURLs(ref string appId, ref string urls);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appId"></param>
        /// <param name="urls"></param>
        /// <returns></returns>
        private void ValidateDeleteCallbackURLs(string appId, string urls)
        {
            if (appId == null)
                throw new ArgumentNullException(nameof(appId));

            if (urls == null)
                throw new ArgumentNullException(nameof(urls));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="urls"></param>
        private void AfterDeleteCallbackURLsDefaultImplementation(IDeleteCallbackURLsApiResponse apiResponseLocalVar, string appId, string urls)
        {
            bool suppressDefaultLog = false;
            AfterDeleteCallbackURLs(ref suppressDefaultLog, apiResponseLocalVar, appId, urls);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="urls"></param>
        partial void AfterDeleteCallbackURLs(ref bool suppressDefaultLog, IDeleteCallbackURLsApiResponse apiResponseLocalVar, string appId, string urls);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="urls"></param>
        private void OnErrorDeleteCallbackURLsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId, string urls)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteCallbackURLs(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appId, urls);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="urls"></param>
        partial void OnErrorDeleteCallbackURLs(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId, string urls);

        /// <summary>
        /// Delete Callback URLs Delete callback URLs.  &lt;div&gt;   &lt;code&gt;delete:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCallbackURLsApiResponse"/>&gt;</returns>
        public async Task<IDeleteCallbackURLsApiResponse?> DeleteCallbackURLsOrDefaultAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteCallbackURLsAsync(appId, urls, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Callback URLs Delete callback URLs.  &lt;div&gt;   &lt;code&gt;delete:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteCallbackURLsApiResponse"/>&gt;</returns>
        public async Task<IDeleteCallbackURLsApiResponse> DeleteCallbackURLsAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteCallbackURLs(appId, urls);

                FormatDeleteCallbackURLs(ref appId, ref urls);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/applications/{app_id}/auth_redirect_urls"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/applications/{app_id}/auth_redirect_urls");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bapp_id%7D", Uri.EscapeDataString(appId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["urls"] = ClientUtils.ParameterToString(urls);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteCallbackURLsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteCallbackURLsApiResponse>();
                        DeleteCallbackURLsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/applications/{app_id}/auth_redirect_urls", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteCallbackURLsDefaultImplementation(apiResponseLocalVar, appId, urls);

                        Events.ExecuteOnDeleteCallbackURLs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteCallbackURLsDefaultImplementation(e, "/api/v1/applications/{app_id}/auth_redirect_urls", uriBuilderLocalVar.Path, appId, urls);
                Events.ExecuteOnErrorDeleteCallbackURLs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteCallbackURLsApiResponse"/>
        /// </summary>
        public partial class DeleteCallbackURLsApiResponse : Kinde.Api.Client.ApiResponse, IDeleteCallbackURLsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteCallbackURLsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteCallbackURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteCallbackURLsApiResponse(ILogger<DeleteCallbackURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteCallbackURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteCallbackURLsApiResponse(ILogger<DeleteCallbackURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteLogoutURLs(ref string appId, ref string urls);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appId"></param>
        /// <param name="urls"></param>
        /// <returns></returns>
        private void ValidateDeleteLogoutURLs(string appId, string urls)
        {
            if (appId == null)
                throw new ArgumentNullException(nameof(appId));

            if (urls == null)
                throw new ArgumentNullException(nameof(urls));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="urls"></param>
        private void AfterDeleteLogoutURLsDefaultImplementation(IDeleteLogoutURLsApiResponse apiResponseLocalVar, string appId, string urls)
        {
            bool suppressDefaultLog = false;
            AfterDeleteLogoutURLs(ref suppressDefaultLog, apiResponseLocalVar, appId, urls);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="urls"></param>
        partial void AfterDeleteLogoutURLs(ref bool suppressDefaultLog, IDeleteLogoutURLsApiResponse apiResponseLocalVar, string appId, string urls);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="urls"></param>
        private void OnErrorDeleteLogoutURLsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId, string urls)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteLogoutURLs(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appId, urls);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="urls"></param>
        partial void OnErrorDeleteLogoutURLs(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId, string urls);

        /// <summary>
        /// Delete Logout URLs Delete logout URLs.  &lt;div&gt;   &lt;code&gt;delete:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteLogoutURLsApiResponse"/>&gt;</returns>
        public async Task<IDeleteLogoutURLsApiResponse?> DeleteLogoutURLsOrDefaultAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteLogoutURLsAsync(appId, urls, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Logout URLs Delete logout URLs.  &lt;div&gt;   &lt;code&gt;delete:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteLogoutURLsApiResponse"/>&gt;</returns>
        public async Task<IDeleteLogoutURLsApiResponse> DeleteLogoutURLsAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteLogoutURLs(appId, urls);

                FormatDeleteLogoutURLs(ref appId, ref urls);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/applications/{app_id}/auth_logout_urls"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/applications/{app_id}/auth_logout_urls");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bapp_id%7D", Uri.EscapeDataString(appId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["urls"] = ClientUtils.ParameterToString(urls);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteLogoutURLsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteLogoutURLsApiResponse>();
                        DeleteLogoutURLsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/applications/{app_id}/auth_logout_urls", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteLogoutURLsDefaultImplementation(apiResponseLocalVar, appId, urls);

                        Events.ExecuteOnDeleteLogoutURLs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteLogoutURLsDefaultImplementation(e, "/api/v1/applications/{app_id}/auth_logout_urls", uriBuilderLocalVar.Path, appId, urls);
                Events.ExecuteOnErrorDeleteLogoutURLs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteLogoutURLsApiResponse"/>
        /// </summary>
        public partial class DeleteLogoutURLsApiResponse : Kinde.Api.Client.ApiResponse, IDeleteLogoutURLsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteLogoutURLsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteLogoutURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteLogoutURLsApiResponse(ILogger<DeleteLogoutURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteLogoutURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteLogoutURLsApiResponse(ILogger<DeleteLogoutURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCallbackURLs(ref string appId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appId"></param>
        /// <returns></returns>
        private void ValidateGetCallbackURLs(string appId)
        {
            if (appId == null)
                throw new ArgumentNullException(nameof(appId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        private void AfterGetCallbackURLsDefaultImplementation(IGetCallbackURLsApiResponse apiResponseLocalVar, string appId)
        {
            bool suppressDefaultLog = false;
            AfterGetCallbackURLs(ref suppressDefaultLog, apiResponseLocalVar, appId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        partial void AfterGetCallbackURLs(ref bool suppressDefaultLog, IGetCallbackURLsApiResponse apiResponseLocalVar, string appId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        private void OnErrorGetCallbackURLsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCallbackURLs(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        partial void OnErrorGetCallbackURLs(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId);

        /// <summary>
        /// List Callback URLs Returns an application&#39;s redirect callback URLs.  &lt;div&gt;   &lt;code&gt;read:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCallbackURLsApiResponse"/>&gt;</returns>
        public async Task<IGetCallbackURLsApiResponse?> GetCallbackURLsOrDefaultAsync(string appId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCallbackURLsAsync(appId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Callback URLs Returns an application&#39;s redirect callback URLs.  &lt;div&gt;   &lt;code&gt;read:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCallbackURLsApiResponse"/>&gt;</returns>
        public async Task<IGetCallbackURLsApiResponse> GetCallbackURLsAsync(string appId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCallbackURLs(appId);

                FormatGetCallbackURLs(ref appId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/applications/{app_id}/auth_redirect_urls"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/applications/{app_id}/auth_redirect_urls");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bapp_id%7D", Uri.EscapeDataString(appId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetCallbackURLsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCallbackURLsApiResponse>();
                        GetCallbackURLsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/applications/{app_id}/auth_redirect_urls", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetCallbackURLsDefaultImplementation(apiResponseLocalVar, appId);

                        Events.ExecuteOnGetCallbackURLs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCallbackURLsDefaultImplementation(e, "/api/v1/applications/{app_id}/auth_redirect_urls", uriBuilderLocalVar.Path, appId);
                Events.ExecuteOnErrorGetCallbackURLs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCallbackURLsApiResponse"/>
        /// </summary>
        public partial class GetCallbackURLsApiResponse : Kinde.Api.Client.ApiResponse, IGetCallbackURLsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCallbackURLsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCallbackURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCallbackURLsApiResponse(ILogger<GetCallbackURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetCallbackURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCallbackURLsApiResponse(ILogger<GetCallbackURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.RedirectCallbackUrls? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.RedirectCallbackUrls>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.RedirectCallbackUrls? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetLogoutURLs(ref string appId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appId"></param>
        /// <returns></returns>
        private void ValidateGetLogoutURLs(string appId)
        {
            if (appId == null)
                throw new ArgumentNullException(nameof(appId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        private void AfterGetLogoutURLsDefaultImplementation(IGetLogoutURLsApiResponse apiResponseLocalVar, string appId)
        {
            bool suppressDefaultLog = false;
            AfterGetLogoutURLs(ref suppressDefaultLog, apiResponseLocalVar, appId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        partial void AfterGetLogoutURLs(ref bool suppressDefaultLog, IGetLogoutURLsApiResponse apiResponseLocalVar, string appId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        private void OnErrorGetLogoutURLsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetLogoutURLs(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        partial void OnErrorGetLogoutURLs(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId);

        /// <summary>
        /// List logout URLs Returns an application&#39;s logout redirect URLs.  &lt;div&gt;   &lt;code&gt;read:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLogoutURLsApiResponse"/>&gt;</returns>
        public async Task<IGetLogoutURLsApiResponse?> GetLogoutURLsOrDefaultAsync(string appId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetLogoutURLsAsync(appId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List logout URLs Returns an application&#39;s logout redirect URLs.  &lt;div&gt;   &lt;code&gt;read:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLogoutURLsApiResponse"/>&gt;</returns>
        public async Task<IGetLogoutURLsApiResponse> GetLogoutURLsAsync(string appId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetLogoutURLs(appId);

                FormatGetLogoutURLs(ref appId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/applications/{app_id}/auth_logout_urls"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/applications/{app_id}/auth_logout_urls");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bapp_id%7D", Uri.EscapeDataString(appId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetLogoutURLsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetLogoutURLsApiResponse>();
                        GetLogoutURLsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/applications/{app_id}/auth_logout_urls", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetLogoutURLsDefaultImplementation(apiResponseLocalVar, appId);

                        Events.ExecuteOnGetLogoutURLs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetLogoutURLsDefaultImplementation(e, "/api/v1/applications/{app_id}/auth_logout_urls", uriBuilderLocalVar.Path, appId);
                Events.ExecuteOnErrorGetLogoutURLs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetLogoutURLsApiResponse"/>
        /// </summary>
        public partial class GetLogoutURLsApiResponse : Kinde.Api.Client.ApiResponse, IGetLogoutURLsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetLogoutURLsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetLogoutURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetLogoutURLsApiResponse(ILogger<GetLogoutURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetLogoutURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetLogoutURLsApiResponse(ILogger<GetLogoutURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.LogoutRedirectUrls? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.LogoutRedirectUrls>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.LogoutRedirectUrls? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReplaceLogoutRedirectURLs(ref string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appId"></param>
        /// <param name="replaceLogoutRedirectURLsRequest"></param>
        /// <returns></returns>
        private void ValidateReplaceLogoutRedirectURLs(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest)
        {
            if (appId == null)
                throw new ArgumentNullException(nameof(appId));

            if (replaceLogoutRedirectURLsRequest == null)
                throw new ArgumentNullException(nameof(replaceLogoutRedirectURLsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceLogoutRedirectURLsRequest"></param>
        private void AfterReplaceLogoutRedirectURLsDefaultImplementation(IReplaceLogoutRedirectURLsApiResponse apiResponseLocalVar, string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest)
        {
            bool suppressDefaultLog = false;
            AfterReplaceLogoutRedirectURLs(ref suppressDefaultLog, apiResponseLocalVar, appId, replaceLogoutRedirectURLsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceLogoutRedirectURLsRequest"></param>
        partial void AfterReplaceLogoutRedirectURLs(ref bool suppressDefaultLog, IReplaceLogoutRedirectURLsApiResponse apiResponseLocalVar, string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceLogoutRedirectURLsRequest"></param>
        private void OnErrorReplaceLogoutRedirectURLsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReplaceLogoutRedirectURLs(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appId, replaceLogoutRedirectURLsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceLogoutRedirectURLsRequest"></param>
        partial void OnErrorReplaceLogoutRedirectURLs(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest);

        /// <summary>
        /// Replace logout redirect URls Replace all logout redirect URLs.  &lt;div&gt;   &lt;code&gt;update:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceLogoutRedirectURLsApiResponse"/>&gt;</returns>
        public async Task<IReplaceLogoutRedirectURLsApiResponse?> ReplaceLogoutRedirectURLsOrDefaultAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReplaceLogoutRedirectURLsAsync(appId, replaceLogoutRedirectURLsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Replace logout redirect URls Replace all logout redirect URLs.  &lt;div&gt;   &lt;code&gt;update:application_logout_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceLogoutRedirectURLsApiResponse"/>&gt;</returns>
        public async Task<IReplaceLogoutRedirectURLsApiResponse> ReplaceLogoutRedirectURLsAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateReplaceLogoutRedirectURLs(appId, replaceLogoutRedirectURLsRequest);

                FormatReplaceLogoutRedirectURLs(ref appId, replaceLogoutRedirectURLsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/applications/{app_id}/auth_logout_urls"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/applications/{app_id}/auth_logout_urls");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bapp_id%7D", Uri.EscapeDataString(appId.ToString()));

                    httpRequestMessageLocalVar.Content = (replaceLogoutRedirectURLsRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(replaceLogoutRedirectURLsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ReplaceLogoutRedirectURLsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReplaceLogoutRedirectURLsApiResponse>();
                        ReplaceLogoutRedirectURLsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/applications/{app_id}/auth_logout_urls", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterReplaceLogoutRedirectURLsDefaultImplementation(apiResponseLocalVar, appId, replaceLogoutRedirectURLsRequest);

                        Events.ExecuteOnReplaceLogoutRedirectURLs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReplaceLogoutRedirectURLsDefaultImplementation(e, "/api/v1/applications/{app_id}/auth_logout_urls", uriBuilderLocalVar.Path, appId, replaceLogoutRedirectURLsRequest);
                Events.ExecuteOnErrorReplaceLogoutRedirectURLs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReplaceLogoutRedirectURLsApiResponse"/>
        /// </summary>
        public partial class ReplaceLogoutRedirectURLsApiResponse : Kinde.Api.Client.ApiResponse, IReplaceLogoutRedirectURLsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReplaceLogoutRedirectURLsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReplaceLogoutRedirectURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReplaceLogoutRedirectURLsApiResponse(ILogger<ReplaceLogoutRedirectURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ReplaceLogoutRedirectURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReplaceLogoutRedirectURLsApiResponse(ILogger<ReplaceLogoutRedirectURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReplaceRedirectCallbackURLs(ref string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appId"></param>
        /// <param name="replaceRedirectCallbackURLsRequest"></param>
        /// <returns></returns>
        private void ValidateReplaceRedirectCallbackURLs(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest)
        {
            if (appId == null)
                throw new ArgumentNullException(nameof(appId));

            if (replaceRedirectCallbackURLsRequest == null)
                throw new ArgumentNullException(nameof(replaceRedirectCallbackURLsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceRedirectCallbackURLsRequest"></param>
        private void AfterReplaceRedirectCallbackURLsDefaultImplementation(IReplaceRedirectCallbackURLsApiResponse apiResponseLocalVar, string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest)
        {
            bool suppressDefaultLog = false;
            AfterReplaceRedirectCallbackURLs(ref suppressDefaultLog, apiResponseLocalVar, appId, replaceRedirectCallbackURLsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceRedirectCallbackURLsRequest"></param>
        partial void AfterReplaceRedirectCallbackURLs(ref bool suppressDefaultLog, IReplaceRedirectCallbackURLsApiResponse apiResponseLocalVar, string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceRedirectCallbackURLsRequest"></param>
        private void OnErrorReplaceRedirectCallbackURLsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReplaceRedirectCallbackURLs(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appId, replaceRedirectCallbackURLsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appId"></param>
        /// <param name="replaceRedirectCallbackURLsRequest"></param>
        partial void OnErrorReplaceRedirectCallbackURLs(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest);

        /// <summary>
        /// Replace Redirect Callback URLs Replace all redirect callback URLs.  &lt;div&gt;   &lt;code&gt;update:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceRedirectCallbackURLsApiResponse"/>&gt;</returns>
        public async Task<IReplaceRedirectCallbackURLsApiResponse?> ReplaceRedirectCallbackURLsOrDefaultAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReplaceRedirectCallbackURLsAsync(appId, replaceRedirectCallbackURLsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Replace Redirect Callback URLs Replace all redirect callback URLs.  &lt;div&gt;   &lt;code&gt;update:applications_redirect_uris&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceRedirectCallbackURLsApiResponse"/>&gt;</returns>
        public async Task<IReplaceRedirectCallbackURLsApiResponse> ReplaceRedirectCallbackURLsAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateReplaceRedirectCallbackURLs(appId, replaceRedirectCallbackURLsRequest);

                FormatReplaceRedirectCallbackURLs(ref appId, replaceRedirectCallbackURLsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/applications/{app_id}/auth_redirect_urls"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/applications/{app_id}/auth_redirect_urls");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bapp_id%7D", Uri.EscapeDataString(appId.ToString()));

                    httpRequestMessageLocalVar.Content = (replaceRedirectCallbackURLsRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(replaceRedirectCallbackURLsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ReplaceRedirectCallbackURLsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReplaceRedirectCallbackURLsApiResponse>();
                        ReplaceRedirectCallbackURLsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/applications/{app_id}/auth_redirect_urls", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterReplaceRedirectCallbackURLsDefaultImplementation(apiResponseLocalVar, appId, replaceRedirectCallbackURLsRequest);

                        Events.ExecuteOnReplaceRedirectCallbackURLs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReplaceRedirectCallbackURLsDefaultImplementation(e, "/api/v1/applications/{app_id}/auth_redirect_urls", uriBuilderLocalVar.Path, appId, replaceRedirectCallbackURLsRequest);
                Events.ExecuteOnErrorReplaceRedirectCallbackURLs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReplaceRedirectCallbackURLsApiResponse"/>
        /// </summary>
        public partial class ReplaceRedirectCallbackURLsApiResponse : Kinde.Api.Client.ApiResponse, IReplaceRedirectCallbackURLsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReplaceRedirectCallbackURLsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReplaceRedirectCallbackURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReplaceRedirectCallbackURLsApiResponse(ILogger<ReplaceRedirectCallbackURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ReplaceRedirectCallbackURLsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReplaceRedirectCallbackURLsApiResponse(ILogger<ReplaceRedirectCallbackURLsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
