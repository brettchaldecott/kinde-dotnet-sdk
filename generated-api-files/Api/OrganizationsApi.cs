// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Kinde.Api.Client;
using Kinde.Api.Model;

namespace Kinde.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOrganizationsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OrganizationsApiEvents Events { get; }

        /// <summary>
        /// Add organization logo
        /// </summary>
        /// <remarks>
        /// Add organization logo  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="type">The type of logo to add.</param>
        /// <param name="logo">The logo file to upload.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrganizationLogoApiResponse"/>&gt;</returns>
        Task<IAddOrganizationLogoApiResponse> AddOrganizationLogoAsync(string orgCode, string type, System.IO.Stream logo, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add organization logo
        /// </summary>
        /// <remarks>
        /// Add organization logo  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="type">The type of logo to add.</param>
        /// <param name="logo">The logo file to upload.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrganizationLogoApiResponse"/>?&gt;</returns>
        Task<IAddOrganizationLogoApiResponse?> AddOrganizationLogoOrDefaultAsync(string orgCode, string type, System.IO.Stream logo, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add scope to organization user api
        /// </summary>
        /// <remarks>
        /// Add a scope to an organization user api.  &lt;div&gt;   &lt;code&gt;create:organization_user_api_scopes&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">User ID</param>
        /// <param name="apiId">API ID</param>
        /// <param name="scopeId">Scope ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrganizationUserAPIScopeApiResponse"/>&gt;</returns>
        Task<IAddOrganizationUserAPIScopeApiResponse> AddOrganizationUserAPIScopeAsync(string orgCode, string userId, string apiId, string scopeId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add scope to organization user api
        /// </summary>
        /// <remarks>
        /// Add a scope to an organization user api.  &lt;div&gt;   &lt;code&gt;create:organization_user_api_scopes&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">User ID</param>
        /// <param name="apiId">API ID</param>
        /// <param name="scopeId">Scope ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrganizationUserAPIScopeApiResponse"/>?&gt;</returns>
        Task<IAddOrganizationUserAPIScopeApiResponse?> AddOrganizationUserAPIScopeOrDefaultAsync(string orgCode, string userId, string apiId, string scopeId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Organization Users
        /// </summary>
        /// <remarks>
        /// Add existing users to an organization.  &lt;div&gt;   &lt;code&gt;create:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="addOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrganizationUsersApiResponse"/>&gt;</returns>
        Task<IAddOrganizationUsersApiResponse> AddOrganizationUsersAsync(string orgCode, Option<AddOrganizationUsersRequest> addOrganizationUsersRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Organization Users
        /// </summary>
        /// <remarks>
        /// Add existing users to an organization.  &lt;div&gt;   &lt;code&gt;create:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="addOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrganizationUsersApiResponse"/>?&gt;</returns>
        Task<IAddOrganizationUsersApiResponse?> AddOrganizationUsersOrDefaultAsync(string orgCode, Option<AddOrganizationUsersRequest> addOrganizationUsersRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create organization
        /// </summary>
        /// <remarks>
        /// Create a new organization. To learn more read about [multi tenancy using organizations](https://docs.kinde.com/build/organizations/multi-tenancy-using-organizations/)  &lt;div&gt;   &lt;code&gt;create:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationRequest">Organization details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationApiResponse"/>&gt;</returns>
        Task<ICreateOrganizationApiResponse> CreateOrganizationAsync(CreateOrganizationRequest createOrganizationRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create organization
        /// </summary>
        /// <remarks>
        /// Create a new organization. To learn more read about [multi tenancy using organizations](https://docs.kinde.com/build/organizations/multi-tenancy-using-organizations/)  &lt;div&gt;   &lt;code&gt;create:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="createOrganizationRequest">Organization details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationApiResponse"/>?&gt;</returns>
        Task<ICreateOrganizationApiResponse?> CreateOrganizationOrDefaultAsync(CreateOrganizationRequest createOrganizationRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Organization User Permission
        /// </summary>
        /// <remarks>
        /// Add permission to an organization user.  &lt;div&gt;   &lt;code&gt;create:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="createOrganizationUserPermissionRequest">Permission details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationUserPermissionApiResponse"/>&gt;</returns>
        Task<ICreateOrganizationUserPermissionApiResponse> CreateOrganizationUserPermissionAsync(string orgCode, string userId, CreateOrganizationUserPermissionRequest createOrganizationUserPermissionRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Organization User Permission
        /// </summary>
        /// <remarks>
        /// Add permission to an organization user.  &lt;div&gt;   &lt;code&gt;create:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="createOrganizationUserPermissionRequest">Permission details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationUserPermissionApiResponse"/>?&gt;</returns>
        Task<ICreateOrganizationUserPermissionApiResponse?> CreateOrganizationUserPermissionOrDefaultAsync(string orgCode, string userId, CreateOrganizationUserPermissionRequest createOrganizationUserPermissionRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Organization User Role
        /// </summary>
        /// <remarks>
        /// Add role to an organization user.  &lt;div&gt;   &lt;code&gt;create:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="createOrganizationUserRoleRequest">Role details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationUserRoleApiResponse"/>&gt;</returns>
        Task<ICreateOrganizationUserRoleApiResponse> CreateOrganizationUserRoleAsync(string orgCode, string userId, CreateOrganizationUserRoleRequest createOrganizationUserRoleRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Organization User Role
        /// </summary>
        /// <remarks>
        /// Add role to an organization user.  &lt;div&gt;   &lt;code&gt;create:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="createOrganizationUserRoleRequest">Role details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationUserRoleApiResponse"/>?&gt;</returns>
        Task<ICreateOrganizationUserRoleApiResponse?> CreateOrganizationUserRoleOrDefaultAsync(string orgCode, string userId, CreateOrganizationUserRoleRequest createOrganizationUserRoleRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Organization
        /// </summary>
        /// <remarks>
        /// Delete an organization.  &lt;div&gt;   &lt;code&gt;delete:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationApiResponse"/>&gt;</returns>
        Task<IDeleteOrganizationApiResponse> DeleteOrganizationAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Organization
        /// </summary>
        /// <remarks>
        /// Delete an organization.  &lt;div&gt;   &lt;code&gt;delete:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationApiResponse"/>?&gt;</returns>
        Task<IDeleteOrganizationApiResponse?> DeleteOrganizationOrDefaultAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Organization Feature Flag Override
        /// </summary>
        /// <remarks>
        /// Delete organization feature flag override.  &lt;div&gt;   &lt;code&gt;delete:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationFeatureFlagOverrideApiResponse"/>&gt;</returns>
        Task<IDeleteOrganizationFeatureFlagOverrideApiResponse> DeleteOrganizationFeatureFlagOverrideAsync(string orgCode, string featureFlagKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Organization Feature Flag Override
        /// </summary>
        /// <remarks>
        /// Delete organization feature flag override.  &lt;div&gt;   &lt;code&gt;delete:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationFeatureFlagOverrideApiResponse"/>?&gt;</returns>
        Task<IDeleteOrganizationFeatureFlagOverrideApiResponse?> DeleteOrganizationFeatureFlagOverrideOrDefaultAsync(string orgCode, string featureFlagKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Organization Feature Flag Overrides
        /// </summary>
        /// <remarks>
        /// Delete all organization feature flag overrides.  &lt;div&gt;   &lt;code&gt;delete:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationFeatureFlagOverridesApiResponse"/>&gt;</returns>
        Task<IDeleteOrganizationFeatureFlagOverridesApiResponse> DeleteOrganizationFeatureFlagOverridesAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Organization Feature Flag Overrides
        /// </summary>
        /// <remarks>
        /// Delete all organization feature flag overrides.  &lt;div&gt;   &lt;code&gt;delete:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationFeatureFlagOverridesApiResponse"/>?&gt;</returns>
        Task<IDeleteOrganizationFeatureFlagOverridesApiResponse?> DeleteOrganizationFeatureFlagOverridesOrDefaultAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete organization handle
        /// </summary>
        /// <remarks>
        /// Delete organization handle  &lt;div&gt;   &lt;code&gt;delete:organization_handles&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationHandleApiResponse"/>&gt;</returns>
        Task<IDeleteOrganizationHandleApiResponse> DeleteOrganizationHandleAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete organization handle
        /// </summary>
        /// <remarks>
        /// Delete organization handle  &lt;div&gt;   &lt;code&gt;delete:organization_handles&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationHandleApiResponse"/>?&gt;</returns>
        Task<IDeleteOrganizationHandleApiResponse?> DeleteOrganizationHandleOrDefaultAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete organization logo
        /// </summary>
        /// <remarks>
        /// Delete organization logo  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="type">The type of logo to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationLogoApiResponse"/>&gt;</returns>
        Task<IDeleteOrganizationLogoApiResponse> DeleteOrganizationLogoAsync(string orgCode, string type, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete organization logo
        /// </summary>
        /// <remarks>
        /// Delete organization logo  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="type">The type of logo to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationLogoApiResponse"/>?&gt;</returns>
        Task<IDeleteOrganizationLogoApiResponse?> DeleteOrganizationLogoOrDefaultAsync(string orgCode, string type, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete scope from organization user API
        /// </summary>
        /// <remarks>
        /// Delete a scope from an organization user api you previously created.  &lt;div&gt;   &lt;code&gt;delete:organization_user_api_scopes&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">User ID</param>
        /// <param name="apiId">API ID</param>
        /// <param name="scopeId">Scope ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationUserAPIScopeApiResponse"/>&gt;</returns>
        Task<IDeleteOrganizationUserAPIScopeApiResponse> DeleteOrganizationUserAPIScopeAsync(string orgCode, string userId, string apiId, string scopeId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete scope from organization user API
        /// </summary>
        /// <remarks>
        /// Delete a scope from an organization user api you previously created.  &lt;div&gt;   &lt;code&gt;delete:organization_user_api_scopes&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">User ID</param>
        /// <param name="apiId">API ID</param>
        /// <param name="scopeId">Scope ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationUserAPIScopeApiResponse"/>?&gt;</returns>
        Task<IDeleteOrganizationUserAPIScopeApiResponse?> DeleteOrganizationUserAPIScopeOrDefaultAsync(string orgCode, string userId, string apiId, string scopeId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Organization User Permission
        /// </summary>
        /// <remarks>
        /// Delete permission for an organization user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="permissionId">The permission id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationUserPermissionApiResponse"/>&gt;</returns>
        Task<IDeleteOrganizationUserPermissionApiResponse> DeleteOrganizationUserPermissionAsync(string orgCode, string userId, string permissionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Organization User Permission
        /// </summary>
        /// <remarks>
        /// Delete permission for an organization user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="permissionId">The permission id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationUserPermissionApiResponse"/>?&gt;</returns>
        Task<IDeleteOrganizationUserPermissionApiResponse?> DeleteOrganizationUserPermissionOrDefaultAsync(string orgCode, string userId, string permissionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Organization User Role
        /// </summary>
        /// <remarks>
        /// Delete role for an organization user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="roleId">The role id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationUserRoleApiResponse"/>&gt;</returns>
        Task<IDeleteOrganizationUserRoleApiResponse> DeleteOrganizationUserRoleAsync(string orgCode, string userId, string roleId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Organization User Role
        /// </summary>
        /// <remarks>
        /// Delete role for an organization user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="roleId">The role id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationUserRoleApiResponse"/>?&gt;</returns>
        Task<IDeleteOrganizationUserRoleApiResponse?> DeleteOrganizationUserRoleOrDefaultAsync(string orgCode, string userId, string roleId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Enable connection
        /// </summary>
        /// <remarks>
        /// Enable an auth connection for an organization.  &lt;div&gt;   &lt;code&gt;create:organization_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationCode">The unique code for the organization.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEnableOrgConnectionApiResponse"/>&gt;</returns>
        Task<IEnableOrgConnectionApiResponse> EnableOrgConnectionAsync(string organizationCode, string connectionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Enable connection
        /// </summary>
        /// <remarks>
        /// Enable an auth connection for an organization.  &lt;div&gt;   &lt;code&gt;create:organization_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="organizationCode">The unique code for the organization.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEnableOrgConnectionApiResponse"/>?&gt;</returns>
        Task<IEnableOrgConnectionApiResponse?> EnableOrgConnectionOrDefaultAsync(string organizationCode, string connectionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an organization user&#39;s MFA configuration
        /// </summary>
        /// <remarks>
        /// Get an organization user’s MFA configuration.  &lt;div&gt;   &lt;code&gt;read:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">The identifier for the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrgUserMFAApiResponse"/>&gt;</returns>
        Task<IGetOrgUserMFAApiResponse> GetOrgUserMFAAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an organization user&#39;s MFA configuration
        /// </summary>
        /// <remarks>
        /// Get an organization user’s MFA configuration.  &lt;div&gt;   &lt;code&gt;read:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">The identifier for the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrgUserMFAApiResponse"/>?&gt;</returns>
        Task<IGetOrgUserMFAApiResponse?> GetOrgUserMFAOrDefaultAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get organization
        /// </summary>
        /// <remarks>
        /// Retrieve organization details by code.  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="expand">Specify additional data to retrieve. Use \&quot;billing\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationApiResponse"/>&gt;</returns>
        Task<IGetOrganizationApiResponse> GetOrganizationAsync(Option<string> code = default, Option<string> expand = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get organization
        /// </summary>
        /// <remarks>
        /// Retrieve organization details by code.  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="expand">Specify additional data to retrieve. Use \&quot;billing\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationApiResponse"/>?&gt;</returns>
        Task<IGetOrganizationApiResponse?> GetOrganizationOrDefaultAsync(Option<string> code = default, Option<string> expand = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get connections
        /// </summary>
        /// <remarks>
        /// Gets all connections for an organization.  &lt;div&gt;   &lt;code&gt;read:organization_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationCode">The organization code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationConnectionsApiResponse"/>&gt;</returns>
        Task<IGetOrganizationConnectionsApiResponse> GetOrganizationConnectionsAsync(string organizationCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get connections
        /// </summary>
        /// <remarks>
        /// Gets all connections for an organization.  &lt;div&gt;   &lt;code&gt;read:organization_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="organizationCode">The organization code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationConnectionsApiResponse"/>?&gt;</returns>
        Task<IGetOrganizationConnectionsApiResponse?> GetOrganizationConnectionsOrDefaultAsync(string organizationCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Organization Feature Flags
        /// </summary>
        /// <remarks>
        /// Get all organization feature flags.  &lt;div&gt;   &lt;code&gt;read:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationFeatureFlagsApiResponse"/>&gt;</returns>
        Task<IGetOrganizationFeatureFlagsApiResponse> GetOrganizationFeatureFlagsAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Organization Feature Flags
        /// </summary>
        /// <remarks>
        /// Get all organization feature flags.  &lt;div&gt;   &lt;code&gt;read:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationFeatureFlagsApiResponse"/>?&gt;</returns>
        Task<IGetOrganizationFeatureFlagsApiResponse?> GetOrganizationFeatureFlagsOrDefaultAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Organization Property Values
        /// </summary>
        /// <remarks>
        /// Gets properties for an organization by org code.  &lt;div&gt;   &lt;code&gt;read:organization_properties&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationPropertyValuesApiResponse"/>&gt;</returns>
        Task<IGetOrganizationPropertyValuesApiResponse> GetOrganizationPropertyValuesAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Organization Property Values
        /// </summary>
        /// <remarks>
        /// Gets properties for an organization by org code.  &lt;div&gt;   &lt;code&gt;read:organization_properties&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationPropertyValuesApiResponse"/>?&gt;</returns>
        Task<IGetOrganizationPropertyValuesApiResponse?> GetOrganizationPropertyValuesOrDefaultAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Organization User Permissions
        /// </summary>
        /// <remarks>
        /// Get permissions for an organization user.  &lt;div&gt;   &lt;code&gt;read:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="expand">Specify additional data to retrieve. Use \&quot;roles\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationUserPermissionsApiResponse"/>&gt;</returns>
        Task<IGetOrganizationUserPermissionsApiResponse> GetOrganizationUserPermissionsAsync(string orgCode, string userId, Option<string?> expand = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Organization User Permissions
        /// </summary>
        /// <remarks>
        /// Get permissions for an organization user.  &lt;div&gt;   &lt;code&gt;read:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="expand">Specify additional data to retrieve. Use \&quot;roles\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationUserPermissionsApiResponse"/>?&gt;</returns>
        Task<IGetOrganizationUserPermissionsApiResponse?> GetOrganizationUserPermissionsOrDefaultAsync(string orgCode, string userId, Option<string?> expand = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Organization User Roles
        /// </summary>
        /// <remarks>
        /// Get roles for an organization user.  &lt;div&gt;   &lt;code&gt;read:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationUserRolesApiResponse"/>&gt;</returns>
        Task<IGetOrganizationUserRolesApiResponse> GetOrganizationUserRolesAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Organization User Roles
        /// </summary>
        /// <remarks>
        /// Get roles for an organization user.  &lt;div&gt;   &lt;code&gt;read:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationUserRolesApiResponse"/>?&gt;</returns>
        Task<IGetOrganizationUserRolesApiResponse?> GetOrganizationUserRolesOrDefaultAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get organization users
        /// </summary>
        /// <remarks>
        /// Get user details for all members of an organization.  &lt;div&gt;   &lt;code&gt;read:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="permissions">Filter by user permissions comma separated (where all match) (optional)</param>
        /// <param name="roles">Filter by user roles comma separated (where all match) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationUsersApiResponse"/>&gt;</returns>
        Task<IGetOrganizationUsersApiResponse> GetOrganizationUsersAsync(string orgCode, Option<string?> sort = default, Option<int?> pageSize = default, Option<string?> nextToken = default, Option<string> permissions = default, Option<string> roles = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get organization users
        /// </summary>
        /// <remarks>
        /// Get user details for all members of an organization.  &lt;div&gt;   &lt;code&gt;read:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="permissions">Filter by user permissions comma separated (where all match) (optional)</param>
        /// <param name="roles">Filter by user roles comma separated (where all match) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationUsersApiResponse"/>?&gt;</returns>
        Task<IGetOrganizationUsersApiResponse?> GetOrganizationUsersOrDefaultAsync(string orgCode, Option<string?> sort = default, Option<int?> pageSize = default, Option<string?> nextToken = default, Option<string> permissions = default, Option<string> roles = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get organizations
        /// </summary>
        /// <remarks>
        /// Get a list of organizations.  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationsApiResponse"/>&gt;</returns>
        Task<IGetOrganizationsApiResponse> GetOrganizationsAsync(Option<string?> sort = default, Option<int?> pageSize = default, Option<string?> nextToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get organizations
        /// </summary>
        /// <remarks>
        /// Get a list of organizations.  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationsApiResponse"/>?&gt;</returns>
        Task<IGetOrganizationsApiResponse?> GetOrganizationsOrDefaultAsync(Option<string?> sort = default, Option<int?> pageSize = default, Option<string?> nextToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Read organization logo details
        /// </summary>
        /// <remarks>
        /// Read organization logo details  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReadOrganizationLogoApiResponse"/>&gt;</returns>
        Task<IReadOrganizationLogoApiResponse> ReadOrganizationLogoAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Read organization logo details
        /// </summary>
        /// <remarks>
        /// Read organization logo details  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReadOrganizationLogoApiResponse"/>?&gt;</returns>
        Task<IReadOrganizationLogoApiResponse?> ReadOrganizationLogoOrDefaultAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove connection
        /// </summary>
        /// <remarks>
        /// Turn off an auth connection for an organization  &lt;div&gt;   &lt;code&gt;delete:organization_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationCode">The unique code for the organization.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveOrgConnectionApiResponse"/>&gt;</returns>
        Task<IRemoveOrgConnectionApiResponse> RemoveOrgConnectionAsync(string organizationCode, string connectionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove connection
        /// </summary>
        /// <remarks>
        /// Turn off an auth connection for an organization  &lt;div&gt;   &lt;code&gt;delete:organization_connections&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="organizationCode">The unique code for the organization.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveOrgConnectionApiResponse"/>?&gt;</returns>
        Task<IRemoveOrgConnectionApiResponse?> RemoveOrgConnectionOrDefaultAsync(string organizationCode, string connectionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove Organization User
        /// </summary>
        /// <remarks>
        /// Remove user from an organization.  &lt;div&gt;   &lt;code&gt;delete:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveOrganizationUserApiResponse"/>&gt;</returns>
        Task<IRemoveOrganizationUserApiResponse> RemoveOrganizationUserAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove Organization User
        /// </summary>
        /// <remarks>
        /// Remove user from an organization.  &lt;div&gt;   &lt;code&gt;delete:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveOrganizationUserApiResponse"/>?&gt;</returns>
        Task<IRemoveOrganizationUserApiResponse?> RemoveOrganizationUserOrDefaultAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace Organization MFA Configuration
        /// </summary>
        /// <remarks>
        /// Replace Organization MFA Configuration.  &lt;div&gt;   &lt;code&gt;update:organization_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="replaceOrganizationMFARequest">MFA details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceOrganizationMFAApiResponse"/>&gt;</returns>
        Task<IReplaceOrganizationMFAApiResponse> ReplaceOrganizationMFAAsync(string orgCode, ReplaceOrganizationMFARequest replaceOrganizationMFARequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace Organization MFA Configuration
        /// </summary>
        /// <remarks>
        /// Replace Organization MFA Configuration.  &lt;div&gt;   &lt;code&gt;update:organization_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="replaceOrganizationMFARequest">MFA details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceOrganizationMFAApiResponse"/>?&gt;</returns>
        Task<IReplaceOrganizationMFAApiResponse?> ReplaceOrganizationMFAOrDefaultAsync(string orgCode, ReplaceOrganizationMFARequest replaceOrganizationMFARequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset specific organization MFA for a user
        /// </summary>
        /// <remarks>
        /// Reset a specific organization MFA factor for a user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">The identifier for the user</param>
        /// <param name="factorId">The identifier for the MFA factor</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetOrgUserMFAApiResponse"/>&gt;</returns>
        Task<IResetOrgUserMFAApiResponse> ResetOrgUserMFAAsync(string orgCode, string userId, string factorId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset specific organization MFA for a user
        /// </summary>
        /// <remarks>
        /// Reset a specific organization MFA factor for a user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">The identifier for the user</param>
        /// <param name="factorId">The identifier for the MFA factor</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetOrgUserMFAApiResponse"/>?&gt;</returns>
        Task<IResetOrgUserMFAApiResponse?> ResetOrgUserMFAOrDefaultAsync(string orgCode, string userId, string factorId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset all organization MFA for a user
        /// </summary>
        /// <remarks>
        /// Reset all organization MFA factors for a user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">The identifier for the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetOrgUserMFAAllApiResponse"/>&gt;</returns>
        Task<IResetOrgUserMFAAllApiResponse> ResetOrgUserMFAAllAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset all organization MFA for a user
        /// </summary>
        /// <remarks>
        /// Reset all organization MFA factors for a user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">The identifier for the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetOrgUserMFAAllApiResponse"/>?&gt;</returns>
        Task<IResetOrgUserMFAAllApiResponse?> ResetOrgUserMFAAllOrDefaultAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Organization
        /// </summary>
        /// <remarks>
        /// Update an organization.  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="expand">Specify additional data to retrieve. Use \&quot;billing\&quot;. (optional)</param>
        /// <param name="updateOrganizationRequest">Organization details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationApiResponse"/>&gt;</returns>
        Task<IUpdateOrganizationApiResponse> UpdateOrganizationAsync(string orgCode, Option<string?> expand = default, Option<UpdateOrganizationRequest> updateOrganizationRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Organization
        /// </summary>
        /// <remarks>
        /// Update an organization.  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="expand">Specify additional data to retrieve. Use \&quot;billing\&quot;. (optional)</param>
        /// <param name="updateOrganizationRequest">Organization details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationApiResponse"/>?&gt;</returns>
        Task<IUpdateOrganizationApiResponse?> UpdateOrganizationOrDefaultAsync(string orgCode, Option<string?> expand = default, Option<UpdateOrganizationRequest> updateOrganizationRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Organization Feature Flag Override
        /// </summary>
        /// <remarks>
        /// Update organization feature flag override.  &lt;div&gt;   &lt;code&gt;update:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="featureFlagKey">The identifier for the feature flag</param>
        /// <param name="value">Override value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationFeatureFlagOverrideApiResponse"/>&gt;</returns>
        Task<IUpdateOrganizationFeatureFlagOverrideApiResponse> UpdateOrganizationFeatureFlagOverrideAsync(string orgCode, string featureFlagKey, string value, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Organization Feature Flag Override
        /// </summary>
        /// <remarks>
        /// Update organization feature flag override.  &lt;div&gt;   &lt;code&gt;update:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="featureFlagKey">The identifier for the feature flag</param>
        /// <param name="value">Override value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationFeatureFlagOverrideApiResponse"/>?&gt;</returns>
        Task<IUpdateOrganizationFeatureFlagOverrideApiResponse?> UpdateOrganizationFeatureFlagOverrideOrDefaultAsync(string orgCode, string featureFlagKey, string value, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Organization Property values
        /// </summary>
        /// <remarks>
        /// Update organization property values.  &lt;div&gt;   &lt;code&gt;update:organization_properties&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="updateOrganizationPropertiesRequest">Properties to update.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationPropertiesApiResponse"/>&gt;</returns>
        Task<IUpdateOrganizationPropertiesApiResponse> UpdateOrganizationPropertiesAsync(string orgCode, UpdateOrganizationPropertiesRequest updateOrganizationPropertiesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Organization Property values
        /// </summary>
        /// <remarks>
        /// Update organization property values.  &lt;div&gt;   &lt;code&gt;update:organization_properties&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="updateOrganizationPropertiesRequest">Properties to update.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationPropertiesApiResponse"/>?&gt;</returns>
        Task<IUpdateOrganizationPropertiesApiResponse?> UpdateOrganizationPropertiesOrDefaultAsync(string orgCode, UpdateOrganizationPropertiesRequest updateOrganizationPropertiesRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Organization Property value
        /// </summary>
        /// <remarks>
        /// Update organization property value.  &lt;div&gt;   &lt;code&gt;update:organization_properties&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="propertyKey">The identifier for the property</param>
        /// <param name="value">The new property value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationPropertyApiResponse"/>&gt;</returns>
        Task<IUpdateOrganizationPropertyApiResponse> UpdateOrganizationPropertyAsync(string orgCode, string propertyKey, string value, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Organization Property value
        /// </summary>
        /// <remarks>
        /// Update organization property value.  &lt;div&gt;   &lt;code&gt;update:organization_properties&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="propertyKey">The identifier for the property</param>
        /// <param name="value">The new property value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationPropertyApiResponse"/>?&gt;</returns>
        Task<IUpdateOrganizationPropertyApiResponse?> UpdateOrganizationPropertyOrDefaultAsync(string orgCode, string propertyKey, string value, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update organization session configuration
        /// </summary>
        /// <remarks>
        /// Update the organization&#39;s session configuration.  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="updateOrganizationSessionsRequest">Organization session configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationSessionsApiResponse"/>&gt;</returns>
        Task<IUpdateOrganizationSessionsApiResponse> UpdateOrganizationSessionsAsync(string orgCode, UpdateOrganizationSessionsRequest updateOrganizationSessionsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update organization session configuration
        /// </summary>
        /// <remarks>
        /// Update the organization&#39;s session configuration.  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="updateOrganizationSessionsRequest">Organization session configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationSessionsApiResponse"/>?&gt;</returns>
        Task<IUpdateOrganizationSessionsApiResponse?> UpdateOrganizationSessionsOrDefaultAsync(string orgCode, UpdateOrganizationSessionsRequest updateOrganizationSessionsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Organization Users
        /// </summary>
        /// <remarks>
        /// Update users that belong to an organization.  &lt;div&gt;   &lt;code&gt;update:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="updateOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationUsersApiResponse"/>&gt;</returns>
        Task<IUpdateOrganizationUsersApiResponse> UpdateOrganizationUsersAsync(string orgCode, Option<UpdateOrganizationUsersRequest> updateOrganizationUsersRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Organization Users
        /// </summary>
        /// <remarks>
        /// Update users that belong to an organization.  &lt;div&gt;   &lt;code&gt;update:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="updateOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationUsersApiResponse"/>?&gt;</returns>
        Task<IUpdateOrganizationUsersApiResponse?> UpdateOrganizationUsersOrDefaultAsync(string orgCode, Option<UpdateOrganizationUsersRequest> updateOrganizationUsersRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddOrganizationLogoApiResponse"/>
    /// </summary>
    public interface IAddOrganizationLogoApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IAddOrganizationUserAPIScopeApiResponse"/>
    /// </summary>
    public interface IAddOrganizationUserAPIScopeApiResponse : Kinde.Api.Client.IApiResponse, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IAddOrganizationUsersApiResponse"/>
    /// </summary>
    public interface IAddOrganizationUsersApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.AddOrganizationUsersResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="ICreateOrganizationApiResponse"/>
    /// </summary>
    public interface ICreateOrganizationApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.CreateOrganizationResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="ICreateOrganizationUserPermissionApiResponse"/>
    /// </summary>
    public interface ICreateOrganizationUserPermissionApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="ICreateOrganizationUserRoleApiResponse"/>
    /// </summary>
    public interface ICreateOrganizationUserRoleApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteOrganizationApiResponse"/>
    /// </summary>
    public interface IDeleteOrganizationApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, INotFound<Kinde.Api.Model.NotFoundResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteOrganizationFeatureFlagOverrideApiResponse"/>
    /// </summary>
    public interface IDeleteOrganizationFeatureFlagOverrideApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteOrganizationFeatureFlagOverridesApiResponse"/>
    /// </summary>
    public interface IDeleteOrganizationFeatureFlagOverridesApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteOrganizationHandleApiResponse"/>
    /// </summary>
    public interface IDeleteOrganizationHandleApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteOrganizationLogoApiResponse"/>
    /// </summary>
    public interface IDeleteOrganizationLogoApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteOrganizationUserAPIScopeApiResponse"/>
    /// </summary>
    public interface IDeleteOrganizationUserAPIScopeApiResponse : Kinde.Api.Client.IApiResponse, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteOrganizationUserPermissionApiResponse"/>
    /// </summary>
    public interface IDeleteOrganizationUserPermissionApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteOrganizationUserRoleApiResponse"/>
    /// </summary>
    public interface IDeleteOrganizationUserRoleApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IEnableOrgConnectionApiResponse"/>
    /// </summary>
    public interface IEnableOrgConnectionApiResponse : Kinde.Api.Client.IApiResponse, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetOrgUserMFAApiResponse"/>
    /// </summary>
    public interface IGetOrgUserMFAApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.GetUserMfaResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, INotFound<Kinde.Api.Model.NotFoundResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetOrganizationApiResponse"/>
    /// </summary>
    public interface IGetOrganizationApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.GetOrganizationResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetOrganizationConnectionsApiResponse"/>
    /// </summary>
    public interface IGetOrganizationConnectionsApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.GetConnectionsResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetOrganizationFeatureFlagsApiResponse"/>
    /// </summary>
    public interface IGetOrganizationFeatureFlagsApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.GetOrganizationFeatureFlagsResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetOrganizationPropertyValuesApiResponse"/>
    /// </summary>
    public interface IGetOrganizationPropertyValuesApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.GetPropertyValuesResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetOrganizationUserPermissionsApiResponse"/>
    /// </summary>
    public interface IGetOrganizationUserPermissionsApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.GetOrganizationsUserPermissionsResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetOrganizationUserRolesApiResponse"/>
    /// </summary>
    public interface IGetOrganizationUserRolesApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.GetOrganizationsUserRolesResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetOrganizationUsersApiResponse"/>
    /// </summary>
    public interface IGetOrganizationUsersApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.GetOrganizationUsersResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetOrganizationsApiResponse"/>
    /// </summary>
    public interface IGetOrganizationsApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.GetOrganizationsResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IReadOrganizationLogoApiResponse"/>
    /// </summary>
    public interface IReadOrganizationLogoApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.ReadLogoResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IRemoveOrgConnectionApiResponse"/>
    /// </summary>
    public interface IRemoveOrgConnectionApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IRemoveOrganizationUserApiResponse"/>
    /// </summary>
    public interface IRemoveOrganizationUserApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IReplaceOrganizationMFAApiResponse"/>
    /// </summary>
    public interface IReplaceOrganizationMFAApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IResetOrgUserMFAApiResponse"/>
    /// </summary>
    public interface IResetOrgUserMFAApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, INotFound<Kinde.Api.Model.NotFoundResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IResetOrgUserMFAAllApiResponse"/>
    /// </summary>
    public interface IResetOrgUserMFAAllApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, INotFound<Kinde.Api.Model.NotFoundResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateOrganizationApiResponse"/>
    /// </summary>
    public interface IUpdateOrganizationApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateOrganizationFeatureFlagOverrideApiResponse"/>
    /// </summary>
    public interface IUpdateOrganizationFeatureFlagOverrideApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateOrganizationPropertiesApiResponse"/>
    /// </summary>
    public interface IUpdateOrganizationPropertiesApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateOrganizationPropertyApiResponse"/>
    /// </summary>
    public interface IUpdateOrganizationPropertyApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateOrganizationSessionsApiResponse"/>
    /// </summary>
    public interface IUpdateOrganizationSessionsApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateOrganizationUsersApiResponse"/>
    /// </summary>
    public interface IUpdateOrganizationUsersApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.UpdateOrganizationUsersResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>, ITooManyRequests<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OrganizationsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddOrganizationLogo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddOrganizationLogo;

        internal void ExecuteOnAddOrganizationLogo(OrganizationsApi.AddOrganizationLogoApiResponse apiResponse)
        {
            OnAddOrganizationLogo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddOrganizationLogo(Exception exception)
        {
            OnErrorAddOrganizationLogo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddOrganizationUserAPIScope;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddOrganizationUserAPIScope;

        internal void ExecuteOnAddOrganizationUserAPIScope(OrganizationsApi.AddOrganizationUserAPIScopeApiResponse apiResponse)
        {
            OnAddOrganizationUserAPIScope?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddOrganizationUserAPIScope(Exception exception)
        {
            OnErrorAddOrganizationUserAPIScope?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddOrganizationUsers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddOrganizationUsers;

        internal void ExecuteOnAddOrganizationUsers(OrganizationsApi.AddOrganizationUsersApiResponse apiResponse)
        {
            OnAddOrganizationUsers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddOrganizationUsers(Exception exception)
        {
            OnErrorAddOrganizationUsers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateOrganization;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateOrganization;

        internal void ExecuteOnCreateOrganization(OrganizationsApi.CreateOrganizationApiResponse apiResponse)
        {
            OnCreateOrganization?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateOrganization(Exception exception)
        {
            OnErrorCreateOrganization?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateOrganizationUserPermission;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateOrganizationUserPermission;

        internal void ExecuteOnCreateOrganizationUserPermission(OrganizationsApi.CreateOrganizationUserPermissionApiResponse apiResponse)
        {
            OnCreateOrganizationUserPermission?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateOrganizationUserPermission(Exception exception)
        {
            OnErrorCreateOrganizationUserPermission?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateOrganizationUserRole;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateOrganizationUserRole;

        internal void ExecuteOnCreateOrganizationUserRole(OrganizationsApi.CreateOrganizationUserRoleApiResponse apiResponse)
        {
            OnCreateOrganizationUserRole?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateOrganizationUserRole(Exception exception)
        {
            OnErrorCreateOrganizationUserRole?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteOrganization;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteOrganization;

        internal void ExecuteOnDeleteOrganization(OrganizationsApi.DeleteOrganizationApiResponse apiResponse)
        {
            OnDeleteOrganization?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteOrganization(Exception exception)
        {
            OnErrorDeleteOrganization?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteOrganizationFeatureFlagOverride;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteOrganizationFeatureFlagOverride;

        internal void ExecuteOnDeleteOrganizationFeatureFlagOverride(OrganizationsApi.DeleteOrganizationFeatureFlagOverrideApiResponse apiResponse)
        {
            OnDeleteOrganizationFeatureFlagOverride?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteOrganizationFeatureFlagOverride(Exception exception)
        {
            OnErrorDeleteOrganizationFeatureFlagOverride?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteOrganizationFeatureFlagOverrides;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteOrganizationFeatureFlagOverrides;

        internal void ExecuteOnDeleteOrganizationFeatureFlagOverrides(OrganizationsApi.DeleteOrganizationFeatureFlagOverridesApiResponse apiResponse)
        {
            OnDeleteOrganizationFeatureFlagOverrides?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteOrganizationFeatureFlagOverrides(Exception exception)
        {
            OnErrorDeleteOrganizationFeatureFlagOverrides?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteOrganizationHandle;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteOrganizationHandle;

        internal void ExecuteOnDeleteOrganizationHandle(OrganizationsApi.DeleteOrganizationHandleApiResponse apiResponse)
        {
            OnDeleteOrganizationHandle?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteOrganizationHandle(Exception exception)
        {
            OnErrorDeleteOrganizationHandle?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteOrganizationLogo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteOrganizationLogo;

        internal void ExecuteOnDeleteOrganizationLogo(OrganizationsApi.DeleteOrganizationLogoApiResponse apiResponse)
        {
            OnDeleteOrganizationLogo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteOrganizationLogo(Exception exception)
        {
            OnErrorDeleteOrganizationLogo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteOrganizationUserAPIScope;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteOrganizationUserAPIScope;

        internal void ExecuteOnDeleteOrganizationUserAPIScope(OrganizationsApi.DeleteOrganizationUserAPIScopeApiResponse apiResponse)
        {
            OnDeleteOrganizationUserAPIScope?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteOrganizationUserAPIScope(Exception exception)
        {
            OnErrorDeleteOrganizationUserAPIScope?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteOrganizationUserPermission;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteOrganizationUserPermission;

        internal void ExecuteOnDeleteOrganizationUserPermission(OrganizationsApi.DeleteOrganizationUserPermissionApiResponse apiResponse)
        {
            OnDeleteOrganizationUserPermission?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteOrganizationUserPermission(Exception exception)
        {
            OnErrorDeleteOrganizationUserPermission?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteOrganizationUserRole;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteOrganizationUserRole;

        internal void ExecuteOnDeleteOrganizationUserRole(OrganizationsApi.DeleteOrganizationUserRoleApiResponse apiResponse)
        {
            OnDeleteOrganizationUserRole?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteOrganizationUserRole(Exception exception)
        {
            OnErrorDeleteOrganizationUserRole?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEnableOrgConnection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEnableOrgConnection;

        internal void ExecuteOnEnableOrgConnection(OrganizationsApi.EnableOrgConnectionApiResponse apiResponse)
        {
            OnEnableOrgConnection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEnableOrgConnection(Exception exception)
        {
            OnErrorEnableOrgConnection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOrgUserMFA;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOrgUserMFA;

        internal void ExecuteOnGetOrgUserMFA(OrganizationsApi.GetOrgUserMFAApiResponse apiResponse)
        {
            OnGetOrgUserMFA?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOrgUserMFA(Exception exception)
        {
            OnErrorGetOrgUserMFA?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOrganization;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOrganization;

        internal void ExecuteOnGetOrganization(OrganizationsApi.GetOrganizationApiResponse apiResponse)
        {
            OnGetOrganization?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOrganization(Exception exception)
        {
            OnErrorGetOrganization?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOrganizationConnections;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOrganizationConnections;

        internal void ExecuteOnGetOrganizationConnections(OrganizationsApi.GetOrganizationConnectionsApiResponse apiResponse)
        {
            OnGetOrganizationConnections?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOrganizationConnections(Exception exception)
        {
            OnErrorGetOrganizationConnections?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOrganizationFeatureFlags;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOrganizationFeatureFlags;

        internal void ExecuteOnGetOrganizationFeatureFlags(OrganizationsApi.GetOrganizationFeatureFlagsApiResponse apiResponse)
        {
            OnGetOrganizationFeatureFlags?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOrganizationFeatureFlags(Exception exception)
        {
            OnErrorGetOrganizationFeatureFlags?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOrganizationPropertyValues;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOrganizationPropertyValues;

        internal void ExecuteOnGetOrganizationPropertyValues(OrganizationsApi.GetOrganizationPropertyValuesApiResponse apiResponse)
        {
            OnGetOrganizationPropertyValues?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOrganizationPropertyValues(Exception exception)
        {
            OnErrorGetOrganizationPropertyValues?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOrganizationUserPermissions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOrganizationUserPermissions;

        internal void ExecuteOnGetOrganizationUserPermissions(OrganizationsApi.GetOrganizationUserPermissionsApiResponse apiResponse)
        {
            OnGetOrganizationUserPermissions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOrganizationUserPermissions(Exception exception)
        {
            OnErrorGetOrganizationUserPermissions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOrganizationUserRoles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOrganizationUserRoles;

        internal void ExecuteOnGetOrganizationUserRoles(OrganizationsApi.GetOrganizationUserRolesApiResponse apiResponse)
        {
            OnGetOrganizationUserRoles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOrganizationUserRoles(Exception exception)
        {
            OnErrorGetOrganizationUserRoles?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOrganizationUsers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOrganizationUsers;

        internal void ExecuteOnGetOrganizationUsers(OrganizationsApi.GetOrganizationUsersApiResponse apiResponse)
        {
            OnGetOrganizationUsers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOrganizationUsers(Exception exception)
        {
            OnErrorGetOrganizationUsers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOrganizations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOrganizations;

        internal void ExecuteOnGetOrganizations(OrganizationsApi.GetOrganizationsApiResponse apiResponse)
        {
            OnGetOrganizations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOrganizations(Exception exception)
        {
            OnErrorGetOrganizations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnReadOrganizationLogo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorReadOrganizationLogo;

        internal void ExecuteOnReadOrganizationLogo(OrganizationsApi.ReadOrganizationLogoApiResponse apiResponse)
        {
            OnReadOrganizationLogo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReadOrganizationLogo(Exception exception)
        {
            OnErrorReadOrganizationLogo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRemoveOrgConnection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveOrgConnection;

        internal void ExecuteOnRemoveOrgConnection(OrganizationsApi.RemoveOrgConnectionApiResponse apiResponse)
        {
            OnRemoveOrgConnection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRemoveOrgConnection(Exception exception)
        {
            OnErrorRemoveOrgConnection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRemoveOrganizationUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveOrganizationUser;

        internal void ExecuteOnRemoveOrganizationUser(OrganizationsApi.RemoveOrganizationUserApiResponse apiResponse)
        {
            OnRemoveOrganizationUser?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRemoveOrganizationUser(Exception exception)
        {
            OnErrorRemoveOrganizationUser?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnReplaceOrganizationMFA;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorReplaceOrganizationMFA;

        internal void ExecuteOnReplaceOrganizationMFA(OrganizationsApi.ReplaceOrganizationMFAApiResponse apiResponse)
        {
            OnReplaceOrganizationMFA?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReplaceOrganizationMFA(Exception exception)
        {
            OnErrorReplaceOrganizationMFA?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResetOrgUserMFA;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResetOrgUserMFA;

        internal void ExecuteOnResetOrgUserMFA(OrganizationsApi.ResetOrgUserMFAApiResponse apiResponse)
        {
            OnResetOrgUserMFA?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResetOrgUserMFA(Exception exception)
        {
            OnErrorResetOrgUserMFA?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResetOrgUserMFAAll;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResetOrgUserMFAAll;

        internal void ExecuteOnResetOrgUserMFAAll(OrganizationsApi.ResetOrgUserMFAAllApiResponse apiResponse)
        {
            OnResetOrgUserMFAAll?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResetOrgUserMFAAll(Exception exception)
        {
            OnErrorResetOrgUserMFAAll?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateOrganization;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateOrganization;

        internal void ExecuteOnUpdateOrganization(OrganizationsApi.UpdateOrganizationApiResponse apiResponse)
        {
            OnUpdateOrganization?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateOrganization(Exception exception)
        {
            OnErrorUpdateOrganization?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateOrganizationFeatureFlagOverride;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateOrganizationFeatureFlagOverride;

        internal void ExecuteOnUpdateOrganizationFeatureFlagOverride(OrganizationsApi.UpdateOrganizationFeatureFlagOverrideApiResponse apiResponse)
        {
            OnUpdateOrganizationFeatureFlagOverride?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateOrganizationFeatureFlagOverride(Exception exception)
        {
            OnErrorUpdateOrganizationFeatureFlagOverride?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateOrganizationProperties;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateOrganizationProperties;

        internal void ExecuteOnUpdateOrganizationProperties(OrganizationsApi.UpdateOrganizationPropertiesApiResponse apiResponse)
        {
            OnUpdateOrganizationProperties?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateOrganizationProperties(Exception exception)
        {
            OnErrorUpdateOrganizationProperties?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateOrganizationProperty;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateOrganizationProperty;

        internal void ExecuteOnUpdateOrganizationProperty(OrganizationsApi.UpdateOrganizationPropertyApiResponse apiResponse)
        {
            OnUpdateOrganizationProperty?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateOrganizationProperty(Exception exception)
        {
            OnErrorUpdateOrganizationProperty?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateOrganizationSessions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateOrganizationSessions;

        internal void ExecuteOnUpdateOrganizationSessions(OrganizationsApi.UpdateOrganizationSessionsApiResponse apiResponse)
        {
            OnUpdateOrganizationSessions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateOrganizationSessions(Exception exception)
        {
            OnErrorUpdateOrganizationSessions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateOrganizationUsers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateOrganizationUsers;

        internal void ExecuteOnUpdateOrganizationUsers(OrganizationsApi.UpdateOrganizationUsersApiResponse apiResponse)
        {
            OnUpdateOrganizationUsers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateOrganizationUsers(Exception exception)
        {
            OnErrorUpdateOrganizationUsers?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OrganizationsApi : IOrganizationsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OrganizationsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OrganizationsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationsApi(ILogger<OrganizationsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OrganizationsApiEvents organizationsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OrganizationsApi>();
            HttpClient = httpClient;
            Events = organizationsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatAddOrganizationLogo(ref string orgCode, ref string type, ref System.IO.Stream logo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="type"></param>
        /// <param name="logo"></param>
        /// <returns></returns>
        private void ValidateAddOrganizationLogo(string orgCode, string type, System.IO.Stream logo)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (logo == null)
                throw new ArgumentNullException(nameof(logo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="type"></param>
        /// <param name="logo"></param>
        private void AfterAddOrganizationLogoDefaultImplementation(IAddOrganizationLogoApiResponse apiResponseLocalVar, string orgCode, string type, System.IO.Stream logo)
        {
            bool suppressDefaultLog = false;
            AfterAddOrganizationLogo(ref suppressDefaultLog, apiResponseLocalVar, orgCode, type, logo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="type"></param>
        /// <param name="logo"></param>
        partial void AfterAddOrganizationLogo(ref bool suppressDefaultLog, IAddOrganizationLogoApiResponse apiResponseLocalVar, string orgCode, string type, System.IO.Stream logo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="type"></param>
        /// <param name="logo"></param>
        private void OnErrorAddOrganizationLogoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string type, System.IO.Stream logo)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddOrganizationLogo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, type, logo);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="type"></param>
        /// <param name="logo"></param>
        partial void OnErrorAddOrganizationLogo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string type, System.IO.Stream logo);

        /// <summary>
        /// Add organization logo Add organization logo  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="type">The type of logo to add.</param>
        /// <param name="logo">The logo file to upload.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrganizationLogoApiResponse"/>&gt;</returns>
        public async Task<IAddOrganizationLogoApiResponse?> AddOrganizationLogoOrDefaultAsync(string orgCode, string type, System.IO.Stream logo, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddOrganizationLogoAsync(orgCode, type, logo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add organization logo Add organization logo  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="type">The type of logo to add.</param>
        /// <param name="logo">The logo file to upload.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrganizationLogoApiResponse"/>&gt;</returns>
        public async Task<IAddOrganizationLogoApiResponse> AddOrganizationLogoAsync(string orgCode, string type, System.IO.Stream logo, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddOrganizationLogo(orgCode, type, logo);

                FormatAddOrganizationLogo(ref orgCode, ref type, ref logo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/logos/{type}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/logos/{type}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btype%7D", Uri.EscapeDataString(type.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(logo));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddOrganizationLogoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddOrganizationLogoApiResponse>();
                        AddOrganizationLogoApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new AddOrganizationLogoApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/logos/{type}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddOrganizationLogoDefaultImplementation(apiResponseLocalVar, orgCode, type, logo);

                        Events.ExecuteOnAddOrganizationLogo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddOrganizationLogoDefaultImplementation(e, "/api/v1/organizations/{org_code}/logos/{type}", uriBuilderLocalVar.Path, orgCode, type, logo);
                Events.ExecuteOnErrorAddOrganizationLogo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddOrganizationLogoApiResponse"/>
        /// </summary>
        public partial class AddOrganizationLogoApiResponse : Kinde.Api.Client.ApiResponse, IAddOrganizationLogoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddOrganizationLogoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddOrganizationLogoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddOrganizationLogoApiResponse(ILogger<AddOrganizationLogoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddOrganizationLogoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddOrganizationLogoApiResponse(ILogger<AddOrganizationLogoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddOrganizationUserAPIScope(ref string orgCode, ref string userId, ref string apiId, ref string scopeId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="apiId"></param>
        /// <param name="scopeId"></param>
        /// <returns></returns>
        private void ValidateAddOrganizationUserAPIScope(string orgCode, string userId, string apiId, string scopeId)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (userId == null)
                throw new ArgumentNullException(nameof(userId));

            if (apiId == null)
                throw new ArgumentNullException(nameof(apiId));

            if (scopeId == null)
                throw new ArgumentNullException(nameof(scopeId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="apiId"></param>
        /// <param name="scopeId"></param>
        private void AfterAddOrganizationUserAPIScopeDefaultImplementation(IAddOrganizationUserAPIScopeApiResponse apiResponseLocalVar, string orgCode, string userId, string apiId, string scopeId)
        {
            bool suppressDefaultLog = false;
            AfterAddOrganizationUserAPIScope(ref suppressDefaultLog, apiResponseLocalVar, orgCode, userId, apiId, scopeId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="apiId"></param>
        /// <param name="scopeId"></param>
        partial void AfterAddOrganizationUserAPIScope(ref bool suppressDefaultLog, IAddOrganizationUserAPIScopeApiResponse apiResponseLocalVar, string orgCode, string userId, string apiId, string scopeId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="apiId"></param>
        /// <param name="scopeId"></param>
        private void OnErrorAddOrganizationUserAPIScopeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, string apiId, string scopeId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddOrganizationUserAPIScope(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, userId, apiId, scopeId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="apiId"></param>
        /// <param name="scopeId"></param>
        partial void OnErrorAddOrganizationUserAPIScope(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, string apiId, string scopeId);

        /// <summary>
        /// Add scope to organization user api Add a scope to an organization user api.  &lt;div&gt;   &lt;code&gt;create:organization_user_api_scopes&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">User ID</param>
        /// <param name="apiId">API ID</param>
        /// <param name="scopeId">Scope ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrganizationUserAPIScopeApiResponse"/>&gt;</returns>
        public async Task<IAddOrganizationUserAPIScopeApiResponse?> AddOrganizationUserAPIScopeOrDefaultAsync(string orgCode, string userId, string apiId, string scopeId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddOrganizationUserAPIScopeAsync(orgCode, userId, apiId, scopeId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add scope to organization user api Add a scope to an organization user api.  &lt;div&gt;   &lt;code&gt;create:organization_user_api_scopes&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">User ID</param>
        /// <param name="apiId">API ID</param>
        /// <param name="scopeId">Scope ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrganizationUserAPIScopeApiResponse"/>&gt;</returns>
        public async Task<IAddOrganizationUserAPIScopeApiResponse> AddOrganizationUserAPIScopeAsync(string orgCode, string userId, string apiId, string scopeId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddOrganizationUserAPIScope(orgCode, userId, apiId, scopeId);

                FormatAddOrganizationUserAPIScope(ref orgCode, ref userId, ref apiId, ref scopeId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users/{user_id}/apis/{api_id}/scopes/{scope_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users/{user_id}/apis/{api_id}/scopes/{scope_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bapi_id%7D", Uri.EscapeDataString(apiId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bscope_id%7D", Uri.EscapeDataString(scopeId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddOrganizationUserAPIScopeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddOrganizationUserAPIScopeApiResponse>();
                        AddOrganizationUserAPIScopeApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new AddOrganizationUserAPIScopeApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users/{user_id}/apis/{api_id}/scopes/{scope_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddOrganizationUserAPIScopeDefaultImplementation(apiResponseLocalVar, orgCode, userId, apiId, scopeId);

                        Events.ExecuteOnAddOrganizationUserAPIScope(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddOrganizationUserAPIScopeDefaultImplementation(e, "/api/v1/organizations/{org_code}/users/{user_id}/apis/{api_id}/scopes/{scope_id}", uriBuilderLocalVar.Path, orgCode, userId, apiId, scopeId);
                Events.ExecuteOnErrorAddOrganizationUserAPIScope(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddOrganizationUserAPIScopeApiResponse"/>
        /// </summary>
        public partial class AddOrganizationUserAPIScopeApiResponse : Kinde.Api.Client.ApiResponse, IAddOrganizationUserAPIScopeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddOrganizationUserAPIScopeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddOrganizationUserAPIScopeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddOrganizationUserAPIScopeApiResponse(ILogger<AddOrganizationUserAPIScopeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddOrganizationUserAPIScopeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddOrganizationUserAPIScopeApiResponse(ILogger<AddOrganizationUserAPIScopeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddOrganizationUsers(ref string orgCode, Option<AddOrganizationUsersRequest> addOrganizationUsersRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="addOrganizationUsersRequest"></param>
        /// <returns></returns>
        private void ValidateAddOrganizationUsers(string orgCode, Option<AddOrganizationUsersRequest> addOrganizationUsersRequest)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (addOrganizationUsersRequest.IsSet && addOrganizationUsersRequest.Value == null)
                throw new ArgumentNullException(nameof(addOrganizationUsersRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="addOrganizationUsersRequest"></param>
        private void AfterAddOrganizationUsersDefaultImplementation(IAddOrganizationUsersApiResponse apiResponseLocalVar, string orgCode, Option<AddOrganizationUsersRequest> addOrganizationUsersRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddOrganizationUsers(ref suppressDefaultLog, apiResponseLocalVar, orgCode, addOrganizationUsersRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="addOrganizationUsersRequest"></param>
        partial void AfterAddOrganizationUsers(ref bool suppressDefaultLog, IAddOrganizationUsersApiResponse apiResponseLocalVar, string orgCode, Option<AddOrganizationUsersRequest> addOrganizationUsersRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="addOrganizationUsersRequest"></param>
        private void OnErrorAddOrganizationUsersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, Option<AddOrganizationUsersRequest> addOrganizationUsersRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddOrganizationUsers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, addOrganizationUsersRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="addOrganizationUsersRequest"></param>
        partial void OnErrorAddOrganizationUsers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, Option<AddOrganizationUsersRequest> addOrganizationUsersRequest);

        /// <summary>
        /// Add Organization Users Add existing users to an organization.  &lt;div&gt;   &lt;code&gt;create:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="addOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrganizationUsersApiResponse"/>&gt;</returns>
        public async Task<IAddOrganizationUsersApiResponse?> AddOrganizationUsersOrDefaultAsync(string orgCode, Option<AddOrganizationUsersRequest> addOrganizationUsersRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddOrganizationUsersAsync(orgCode, addOrganizationUsersRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Organization Users Add existing users to an organization.  &lt;div&gt;   &lt;code&gt;create:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="addOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrganizationUsersApiResponse"/>&gt;</returns>
        public async Task<IAddOrganizationUsersApiResponse> AddOrganizationUsersAsync(string orgCode, Option<AddOrganizationUsersRequest> addOrganizationUsersRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddOrganizationUsers(orgCode, addOrganizationUsersRequest);

                FormatAddOrganizationUsers(ref orgCode, addOrganizationUsersRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));

                    if (addOrganizationUsersRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (addOrganizationUsersRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addOrganizationUsersRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<AddOrganizationUsersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddOrganizationUsersApiResponse>();
                        AddOrganizationUsersApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new AddOrganizationUsersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterAddOrganizationUsersDefaultImplementation(apiResponseLocalVar, orgCode, addOrganizationUsersRequest);

                        Events.ExecuteOnAddOrganizationUsers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddOrganizationUsersDefaultImplementation(e, "/api/v1/organizations/{org_code}/users", uriBuilderLocalVar.Path, orgCode, addOrganizationUsersRequest);
                Events.ExecuteOnErrorAddOrganizationUsers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddOrganizationUsersApiResponse"/>
        /// </summary>
        public partial class AddOrganizationUsersApiResponse : Kinde.Api.Client.ApiResponse, IAddOrganizationUsersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddOrganizationUsersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddOrganizationUsersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddOrganizationUsersApiResponse(ILogger<AddOrganizationUsersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="AddOrganizationUsersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddOrganizationUsersApiResponse(ILogger<AddOrganizationUsersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.AddOrganizationUsersResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.AddOrganizationUsersResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.AddOrganizationUsersResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateOrganization(CreateOrganizationRequest createOrganizationRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createOrganizationRequest"></param>
        /// <returns></returns>
        private void ValidateCreateOrganization(CreateOrganizationRequest createOrganizationRequest)
        {
            if (createOrganizationRequest == null)
                throw new ArgumentNullException(nameof(createOrganizationRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createOrganizationRequest"></param>
        private void AfterCreateOrganizationDefaultImplementation(ICreateOrganizationApiResponse apiResponseLocalVar, CreateOrganizationRequest createOrganizationRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateOrganization(ref suppressDefaultLog, apiResponseLocalVar, createOrganizationRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createOrganizationRequest"></param>
        partial void AfterCreateOrganization(ref bool suppressDefaultLog, ICreateOrganizationApiResponse apiResponseLocalVar, CreateOrganizationRequest createOrganizationRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createOrganizationRequest"></param>
        private void OnErrorCreateOrganizationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateOrganizationRequest createOrganizationRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateOrganization(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createOrganizationRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createOrganizationRequest"></param>
        partial void OnErrorCreateOrganization(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateOrganizationRequest createOrganizationRequest);

        /// <summary>
        /// Create organization Create a new organization. To learn more read about [multi tenancy using organizations](https://docs.kinde.com/build/organizations/multi-tenancy-using-organizations/)  &lt;div&gt;   &lt;code&gt;create:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="createOrganizationRequest">Organization details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationApiResponse"/>&gt;</returns>
        public async Task<ICreateOrganizationApiResponse?> CreateOrganizationOrDefaultAsync(CreateOrganizationRequest createOrganizationRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateOrganizationAsync(createOrganizationRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create organization Create a new organization. To learn more read about [multi tenancy using organizations](https://docs.kinde.com/build/organizations/multi-tenancy-using-organizations/)  &lt;div&gt;   &lt;code&gt;create:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrganizationRequest">Organization details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationApiResponse"/>&gt;</returns>
        public async Task<ICreateOrganizationApiResponse> CreateOrganizationAsync(CreateOrganizationRequest createOrganizationRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateOrganization(createOrganizationRequest);

                FormatCreateOrganization(createOrganizationRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organization"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organization");

                    httpRequestMessageLocalVar.Content = (createOrganizationRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createOrganizationRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreateOrganizationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateOrganizationApiResponse>();
                        CreateOrganizationApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new CreateOrganizationApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organization", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreateOrganizationDefaultImplementation(apiResponseLocalVar, createOrganizationRequest);

                        Events.ExecuteOnCreateOrganization(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateOrganizationDefaultImplementation(e, "/api/v1/organization", uriBuilderLocalVar.Path, createOrganizationRequest);
                Events.ExecuteOnErrorCreateOrganization(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateOrganizationApiResponse"/>
        /// </summary>
        public partial class CreateOrganizationApiResponse : Kinde.Api.Client.ApiResponse, ICreateOrganizationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateOrganizationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateOrganizationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOrganizationApiResponse(ILogger<CreateOrganizationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreateOrganizationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOrganizationApiResponse(ILogger<CreateOrganizationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.CreateOrganizationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.CreateOrganizationResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.CreateOrganizationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateOrganizationUserPermission(ref string orgCode, ref string userId, CreateOrganizationUserPermissionRequest createOrganizationUserPermissionRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="createOrganizationUserPermissionRequest"></param>
        /// <returns></returns>
        private void ValidateCreateOrganizationUserPermission(string orgCode, string userId, CreateOrganizationUserPermissionRequest createOrganizationUserPermissionRequest)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (userId == null)
                throw new ArgumentNullException(nameof(userId));

            if (createOrganizationUserPermissionRequest == null)
                throw new ArgumentNullException(nameof(createOrganizationUserPermissionRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="createOrganizationUserPermissionRequest"></param>
        private void AfterCreateOrganizationUserPermissionDefaultImplementation(ICreateOrganizationUserPermissionApiResponse apiResponseLocalVar, string orgCode, string userId, CreateOrganizationUserPermissionRequest createOrganizationUserPermissionRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateOrganizationUserPermission(ref suppressDefaultLog, apiResponseLocalVar, orgCode, userId, createOrganizationUserPermissionRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="createOrganizationUserPermissionRequest"></param>
        partial void AfterCreateOrganizationUserPermission(ref bool suppressDefaultLog, ICreateOrganizationUserPermissionApiResponse apiResponseLocalVar, string orgCode, string userId, CreateOrganizationUserPermissionRequest createOrganizationUserPermissionRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="createOrganizationUserPermissionRequest"></param>
        private void OnErrorCreateOrganizationUserPermissionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, CreateOrganizationUserPermissionRequest createOrganizationUserPermissionRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateOrganizationUserPermission(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, userId, createOrganizationUserPermissionRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="createOrganizationUserPermissionRequest"></param>
        partial void OnErrorCreateOrganizationUserPermission(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, CreateOrganizationUserPermissionRequest createOrganizationUserPermissionRequest);

        /// <summary>
        /// Add Organization User Permission Add permission to an organization user.  &lt;div&gt;   &lt;code&gt;create:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="createOrganizationUserPermissionRequest">Permission details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationUserPermissionApiResponse"/>&gt;</returns>
        public async Task<ICreateOrganizationUserPermissionApiResponse?> CreateOrganizationUserPermissionOrDefaultAsync(string orgCode, string userId, CreateOrganizationUserPermissionRequest createOrganizationUserPermissionRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateOrganizationUserPermissionAsync(orgCode, userId, createOrganizationUserPermissionRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Organization User Permission Add permission to an organization user.  &lt;div&gt;   &lt;code&gt;create:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="createOrganizationUserPermissionRequest">Permission details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationUserPermissionApiResponse"/>&gt;</returns>
        public async Task<ICreateOrganizationUserPermissionApiResponse> CreateOrganizationUserPermissionAsync(string orgCode, string userId, CreateOrganizationUserPermissionRequest createOrganizationUserPermissionRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateOrganizationUserPermission(orgCode, userId, createOrganizationUserPermissionRequest);

                FormatCreateOrganizationUserPermission(ref orgCode, ref userId, createOrganizationUserPermissionRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users/{user_id}/permissions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users/{user_id}/permissions");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));

                    httpRequestMessageLocalVar.Content = (createOrganizationUserPermissionRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createOrganizationUserPermissionRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreateOrganizationUserPermissionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateOrganizationUserPermissionApiResponse>();
                        CreateOrganizationUserPermissionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new CreateOrganizationUserPermissionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users/{user_id}/permissions", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreateOrganizationUserPermissionDefaultImplementation(apiResponseLocalVar, orgCode, userId, createOrganizationUserPermissionRequest);

                        Events.ExecuteOnCreateOrganizationUserPermission(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateOrganizationUserPermissionDefaultImplementation(e, "/api/v1/organizations/{org_code}/users/{user_id}/permissions", uriBuilderLocalVar.Path, orgCode, userId, createOrganizationUserPermissionRequest);
                Events.ExecuteOnErrorCreateOrganizationUserPermission(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateOrganizationUserPermissionApiResponse"/>
        /// </summary>
        public partial class CreateOrganizationUserPermissionApiResponse : Kinde.Api.Client.ApiResponse, ICreateOrganizationUserPermissionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateOrganizationUserPermissionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateOrganizationUserPermissionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOrganizationUserPermissionApiResponse(ILogger<CreateOrganizationUserPermissionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreateOrganizationUserPermissionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOrganizationUserPermissionApiResponse(ILogger<CreateOrganizationUserPermissionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateOrganizationUserRole(ref string orgCode, ref string userId, CreateOrganizationUserRoleRequest createOrganizationUserRoleRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="createOrganizationUserRoleRequest"></param>
        /// <returns></returns>
        private void ValidateCreateOrganizationUserRole(string orgCode, string userId, CreateOrganizationUserRoleRequest createOrganizationUserRoleRequest)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (userId == null)
                throw new ArgumentNullException(nameof(userId));

            if (createOrganizationUserRoleRequest == null)
                throw new ArgumentNullException(nameof(createOrganizationUserRoleRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="createOrganizationUserRoleRequest"></param>
        private void AfterCreateOrganizationUserRoleDefaultImplementation(ICreateOrganizationUserRoleApiResponse apiResponseLocalVar, string orgCode, string userId, CreateOrganizationUserRoleRequest createOrganizationUserRoleRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateOrganizationUserRole(ref suppressDefaultLog, apiResponseLocalVar, orgCode, userId, createOrganizationUserRoleRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="createOrganizationUserRoleRequest"></param>
        partial void AfterCreateOrganizationUserRole(ref bool suppressDefaultLog, ICreateOrganizationUserRoleApiResponse apiResponseLocalVar, string orgCode, string userId, CreateOrganizationUserRoleRequest createOrganizationUserRoleRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="createOrganizationUserRoleRequest"></param>
        private void OnErrorCreateOrganizationUserRoleDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, CreateOrganizationUserRoleRequest createOrganizationUserRoleRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateOrganizationUserRole(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, userId, createOrganizationUserRoleRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="createOrganizationUserRoleRequest"></param>
        partial void OnErrorCreateOrganizationUserRole(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, CreateOrganizationUserRoleRequest createOrganizationUserRoleRequest);

        /// <summary>
        /// Add Organization User Role Add role to an organization user.  &lt;div&gt;   &lt;code&gt;create:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="createOrganizationUserRoleRequest">Role details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationUserRoleApiResponse"/>&gt;</returns>
        public async Task<ICreateOrganizationUserRoleApiResponse?> CreateOrganizationUserRoleOrDefaultAsync(string orgCode, string userId, CreateOrganizationUserRoleRequest createOrganizationUserRoleRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateOrganizationUserRoleAsync(orgCode, userId, createOrganizationUserRoleRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Organization User Role Add role to an organization user.  &lt;div&gt;   &lt;code&gt;create:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="createOrganizationUserRoleRequest">Role details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOrganizationUserRoleApiResponse"/>&gt;</returns>
        public async Task<ICreateOrganizationUserRoleApiResponse> CreateOrganizationUserRoleAsync(string orgCode, string userId, CreateOrganizationUserRoleRequest createOrganizationUserRoleRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateOrganizationUserRole(orgCode, userId, createOrganizationUserRoleRequest);

                FormatCreateOrganizationUserRole(ref orgCode, ref userId, createOrganizationUserRoleRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users/{user_id}/roles"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users/{user_id}/roles");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));

                    httpRequestMessageLocalVar.Content = (createOrganizationUserRoleRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createOrganizationUserRoleRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreateOrganizationUserRoleApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateOrganizationUserRoleApiResponse>();
                        CreateOrganizationUserRoleApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new CreateOrganizationUserRoleApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users/{user_id}/roles", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreateOrganizationUserRoleDefaultImplementation(apiResponseLocalVar, orgCode, userId, createOrganizationUserRoleRequest);

                        Events.ExecuteOnCreateOrganizationUserRole(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateOrganizationUserRoleDefaultImplementation(e, "/api/v1/organizations/{org_code}/users/{user_id}/roles", uriBuilderLocalVar.Path, orgCode, userId, createOrganizationUserRoleRequest);
                Events.ExecuteOnErrorCreateOrganizationUserRole(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateOrganizationUserRoleApiResponse"/>
        /// </summary>
        public partial class CreateOrganizationUserRoleApiResponse : Kinde.Api.Client.ApiResponse, ICreateOrganizationUserRoleApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateOrganizationUserRoleApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateOrganizationUserRoleApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOrganizationUserRoleApiResponse(ILogger<CreateOrganizationUserRoleApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreateOrganizationUserRoleApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOrganizationUserRoleApiResponse(ILogger<CreateOrganizationUserRoleApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteOrganization(ref string orgCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <returns></returns>
        private void ValidateDeleteOrganization(string orgCode)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        private void AfterDeleteOrganizationDefaultImplementation(IDeleteOrganizationApiResponse apiResponseLocalVar, string orgCode)
        {
            bool suppressDefaultLog = false;
            AfterDeleteOrganization(ref suppressDefaultLog, apiResponseLocalVar, orgCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        partial void AfterDeleteOrganization(ref bool suppressDefaultLog, IDeleteOrganizationApiResponse apiResponseLocalVar, string orgCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        private void OnErrorDeleteOrganizationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteOrganization(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        partial void OnErrorDeleteOrganization(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode);

        /// <summary>
        /// Delete Organization Delete an organization.  &lt;div&gt;   &lt;code&gt;delete:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationApiResponse?> DeleteOrganizationOrDefaultAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteOrganizationAsync(orgCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Organization Delete an organization.  &lt;div&gt;   &lt;code&gt;delete:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationApiResponse> DeleteOrganizationAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteOrganization(orgCode);

                FormatDeleteOrganization(ref orgCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organization/{org_code}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organization/{org_code}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteOrganizationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteOrganizationApiResponse>();
                        DeleteOrganizationApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteOrganizationApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organization/{org_code}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteOrganizationDefaultImplementation(apiResponseLocalVar, orgCode);

                        Events.ExecuteOnDeleteOrganization(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteOrganizationDefaultImplementation(e, "/api/v1/organization/{org_code}", uriBuilderLocalVar.Path, orgCode);
                Events.ExecuteOnErrorDeleteOrganization(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteOrganizationApiResponse"/>
        /// </summary>
        public partial class DeleteOrganizationApiResponse : Kinde.Api.Client.ApiResponse, IDeleteOrganizationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteOrganizationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteOrganizationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationApiResponse(ILogger<DeleteOrganizationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteOrganizationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationApiResponse(ILogger<DeleteOrganizationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.NotFoundResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.NotFoundResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Kinde.Api.Model.NotFoundResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteOrganizationFeatureFlagOverride(ref string orgCode, ref string featureFlagKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="featureFlagKey"></param>
        /// <returns></returns>
        private void ValidateDeleteOrganizationFeatureFlagOverride(string orgCode, string featureFlagKey)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (featureFlagKey == null)
                throw new ArgumentNullException(nameof(featureFlagKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="featureFlagKey"></param>
        private void AfterDeleteOrganizationFeatureFlagOverrideDefaultImplementation(IDeleteOrganizationFeatureFlagOverrideApiResponse apiResponseLocalVar, string orgCode, string featureFlagKey)
        {
            bool suppressDefaultLog = false;
            AfterDeleteOrganizationFeatureFlagOverride(ref suppressDefaultLog, apiResponseLocalVar, orgCode, featureFlagKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="featureFlagKey"></param>
        partial void AfterDeleteOrganizationFeatureFlagOverride(ref bool suppressDefaultLog, IDeleteOrganizationFeatureFlagOverrideApiResponse apiResponseLocalVar, string orgCode, string featureFlagKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="featureFlagKey"></param>
        private void OnErrorDeleteOrganizationFeatureFlagOverrideDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string featureFlagKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteOrganizationFeatureFlagOverride(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, featureFlagKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="featureFlagKey"></param>
        partial void OnErrorDeleteOrganizationFeatureFlagOverride(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string featureFlagKey);

        /// <summary>
        /// Delete Organization Feature Flag Override Delete organization feature flag override.  &lt;div&gt;   &lt;code&gt;delete:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationFeatureFlagOverrideApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationFeatureFlagOverrideApiResponse?> DeleteOrganizationFeatureFlagOverrideOrDefaultAsync(string orgCode, string featureFlagKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteOrganizationFeatureFlagOverrideAsync(orgCode, featureFlagKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Organization Feature Flag Override Delete organization feature flag override.  &lt;div&gt;   &lt;code&gt;delete:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationFeatureFlagOverrideApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationFeatureFlagOverrideApiResponse> DeleteOrganizationFeatureFlagOverrideAsync(string orgCode, string featureFlagKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteOrganizationFeatureFlagOverride(orgCode, featureFlagKey);

                FormatDeleteOrganizationFeatureFlagOverride(ref orgCode, ref featureFlagKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfeature_flag_key%7D", Uri.EscapeDataString(featureFlagKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteOrganizationFeatureFlagOverrideApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteOrganizationFeatureFlagOverrideApiResponse>();
                        DeleteOrganizationFeatureFlagOverrideApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteOrganizationFeatureFlagOverrideApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteOrganizationFeatureFlagOverrideDefaultImplementation(apiResponseLocalVar, orgCode, featureFlagKey);

                        Events.ExecuteOnDeleteOrganizationFeatureFlagOverride(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteOrganizationFeatureFlagOverrideDefaultImplementation(e, "/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}", uriBuilderLocalVar.Path, orgCode, featureFlagKey);
                Events.ExecuteOnErrorDeleteOrganizationFeatureFlagOverride(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteOrganizationFeatureFlagOverrideApiResponse"/>
        /// </summary>
        public partial class DeleteOrganizationFeatureFlagOverrideApiResponse : Kinde.Api.Client.ApiResponse, IDeleteOrganizationFeatureFlagOverrideApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteOrganizationFeatureFlagOverrideApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteOrganizationFeatureFlagOverrideApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationFeatureFlagOverrideApiResponse(ILogger<DeleteOrganizationFeatureFlagOverrideApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteOrganizationFeatureFlagOverrideApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationFeatureFlagOverrideApiResponse(ILogger<DeleteOrganizationFeatureFlagOverrideApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteOrganizationFeatureFlagOverrides(ref string orgCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <returns></returns>
        private void ValidateDeleteOrganizationFeatureFlagOverrides(string orgCode)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        private void AfterDeleteOrganizationFeatureFlagOverridesDefaultImplementation(IDeleteOrganizationFeatureFlagOverridesApiResponse apiResponseLocalVar, string orgCode)
        {
            bool suppressDefaultLog = false;
            AfterDeleteOrganizationFeatureFlagOverrides(ref suppressDefaultLog, apiResponseLocalVar, orgCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        partial void AfterDeleteOrganizationFeatureFlagOverrides(ref bool suppressDefaultLog, IDeleteOrganizationFeatureFlagOverridesApiResponse apiResponseLocalVar, string orgCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        private void OnErrorDeleteOrganizationFeatureFlagOverridesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteOrganizationFeatureFlagOverrides(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        partial void OnErrorDeleteOrganizationFeatureFlagOverrides(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode);

        /// <summary>
        /// Delete Organization Feature Flag Overrides Delete all organization feature flag overrides.  &lt;div&gt;   &lt;code&gt;delete:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationFeatureFlagOverridesApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationFeatureFlagOverridesApiResponse?> DeleteOrganizationFeatureFlagOverridesOrDefaultAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteOrganizationFeatureFlagOverridesAsync(orgCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Organization Feature Flag Overrides Delete all organization feature flag overrides.  &lt;div&gt;   &lt;code&gt;delete:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationFeatureFlagOverridesApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationFeatureFlagOverridesApiResponse> DeleteOrganizationFeatureFlagOverridesAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteOrganizationFeatureFlagOverrides(orgCode);

                FormatDeleteOrganizationFeatureFlagOverrides(ref orgCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/feature_flags"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/feature_flags");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteOrganizationFeatureFlagOverridesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteOrganizationFeatureFlagOverridesApiResponse>();
                        DeleteOrganizationFeatureFlagOverridesApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteOrganizationFeatureFlagOverridesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/feature_flags", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteOrganizationFeatureFlagOverridesDefaultImplementation(apiResponseLocalVar, orgCode);

                        Events.ExecuteOnDeleteOrganizationFeatureFlagOverrides(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteOrganizationFeatureFlagOverridesDefaultImplementation(e, "/api/v1/organizations/{org_code}/feature_flags", uriBuilderLocalVar.Path, orgCode);
                Events.ExecuteOnErrorDeleteOrganizationFeatureFlagOverrides(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteOrganizationFeatureFlagOverridesApiResponse"/>
        /// </summary>
        public partial class DeleteOrganizationFeatureFlagOverridesApiResponse : Kinde.Api.Client.ApiResponse, IDeleteOrganizationFeatureFlagOverridesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteOrganizationFeatureFlagOverridesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteOrganizationFeatureFlagOverridesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationFeatureFlagOverridesApiResponse(ILogger<DeleteOrganizationFeatureFlagOverridesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteOrganizationFeatureFlagOverridesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationFeatureFlagOverridesApiResponse(ILogger<DeleteOrganizationFeatureFlagOverridesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteOrganizationHandle(ref string orgCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <returns></returns>
        private void ValidateDeleteOrganizationHandle(string orgCode)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        private void AfterDeleteOrganizationHandleDefaultImplementation(IDeleteOrganizationHandleApiResponse apiResponseLocalVar, string orgCode)
        {
            bool suppressDefaultLog = false;
            AfterDeleteOrganizationHandle(ref suppressDefaultLog, apiResponseLocalVar, orgCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        partial void AfterDeleteOrganizationHandle(ref bool suppressDefaultLog, IDeleteOrganizationHandleApiResponse apiResponseLocalVar, string orgCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        private void OnErrorDeleteOrganizationHandleDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteOrganizationHandle(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        partial void OnErrorDeleteOrganizationHandle(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode);

        /// <summary>
        /// Delete organization handle Delete organization handle  &lt;div&gt;   &lt;code&gt;delete:organization_handles&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationHandleApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationHandleApiResponse?> DeleteOrganizationHandleOrDefaultAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteOrganizationHandleAsync(orgCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete organization handle Delete organization handle  &lt;div&gt;   &lt;code&gt;delete:organization_handles&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationHandleApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationHandleApiResponse> DeleteOrganizationHandleAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteOrganizationHandle(orgCode);

                FormatDeleteOrganizationHandle(ref orgCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organization/{org_code}/handle"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organization/{org_code}/handle");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteOrganizationHandleApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteOrganizationHandleApiResponse>();
                        DeleteOrganizationHandleApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteOrganizationHandleApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organization/{org_code}/handle", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteOrganizationHandleDefaultImplementation(apiResponseLocalVar, orgCode);

                        Events.ExecuteOnDeleteOrganizationHandle(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteOrganizationHandleDefaultImplementation(e, "/api/v1/organization/{org_code}/handle", uriBuilderLocalVar.Path, orgCode);
                Events.ExecuteOnErrorDeleteOrganizationHandle(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteOrganizationHandleApiResponse"/>
        /// </summary>
        public partial class DeleteOrganizationHandleApiResponse : Kinde.Api.Client.ApiResponse, IDeleteOrganizationHandleApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteOrganizationHandleApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteOrganizationHandleApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationHandleApiResponse(ILogger<DeleteOrganizationHandleApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteOrganizationHandleApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationHandleApiResponse(ILogger<DeleteOrganizationHandleApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteOrganizationLogo(ref string orgCode, ref string type);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        private void ValidateDeleteOrganizationLogo(string orgCode, string type)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (type == null)
                throw new ArgumentNullException(nameof(type));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="type"></param>
        private void AfterDeleteOrganizationLogoDefaultImplementation(IDeleteOrganizationLogoApiResponse apiResponseLocalVar, string orgCode, string type)
        {
            bool suppressDefaultLog = false;
            AfterDeleteOrganizationLogo(ref suppressDefaultLog, apiResponseLocalVar, orgCode, type);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="type"></param>
        partial void AfterDeleteOrganizationLogo(ref bool suppressDefaultLog, IDeleteOrganizationLogoApiResponse apiResponseLocalVar, string orgCode, string type);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="type"></param>
        private void OnErrorDeleteOrganizationLogoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string type)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteOrganizationLogo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, type);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="type"></param>
        partial void OnErrorDeleteOrganizationLogo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string type);

        /// <summary>
        /// Delete organization logo Delete organization logo  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="type">The type of logo to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationLogoApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationLogoApiResponse?> DeleteOrganizationLogoOrDefaultAsync(string orgCode, string type, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteOrganizationLogoAsync(orgCode, type, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete organization logo Delete organization logo  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="type">The type of logo to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationLogoApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationLogoApiResponse> DeleteOrganizationLogoAsync(string orgCode, string type, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteOrganizationLogo(orgCode, type);

                FormatDeleteOrganizationLogo(ref orgCode, ref type);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/logos/{type}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/logos/{type}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btype%7D", Uri.EscapeDataString(type.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteOrganizationLogoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteOrganizationLogoApiResponse>();
                        DeleteOrganizationLogoApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteOrganizationLogoApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/logos/{type}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteOrganizationLogoDefaultImplementation(apiResponseLocalVar, orgCode, type);

                        Events.ExecuteOnDeleteOrganizationLogo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteOrganizationLogoDefaultImplementation(e, "/api/v1/organizations/{org_code}/logos/{type}", uriBuilderLocalVar.Path, orgCode, type);
                Events.ExecuteOnErrorDeleteOrganizationLogo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteOrganizationLogoApiResponse"/>
        /// </summary>
        public partial class DeleteOrganizationLogoApiResponse : Kinde.Api.Client.ApiResponse, IDeleteOrganizationLogoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteOrganizationLogoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteOrganizationLogoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationLogoApiResponse(ILogger<DeleteOrganizationLogoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteOrganizationLogoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationLogoApiResponse(ILogger<DeleteOrganizationLogoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteOrganizationUserAPIScope(ref string orgCode, ref string userId, ref string apiId, ref string scopeId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="apiId"></param>
        /// <param name="scopeId"></param>
        /// <returns></returns>
        private void ValidateDeleteOrganizationUserAPIScope(string orgCode, string userId, string apiId, string scopeId)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (userId == null)
                throw new ArgumentNullException(nameof(userId));

            if (apiId == null)
                throw new ArgumentNullException(nameof(apiId));

            if (scopeId == null)
                throw new ArgumentNullException(nameof(scopeId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="apiId"></param>
        /// <param name="scopeId"></param>
        private void AfterDeleteOrganizationUserAPIScopeDefaultImplementation(IDeleteOrganizationUserAPIScopeApiResponse apiResponseLocalVar, string orgCode, string userId, string apiId, string scopeId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteOrganizationUserAPIScope(ref suppressDefaultLog, apiResponseLocalVar, orgCode, userId, apiId, scopeId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="apiId"></param>
        /// <param name="scopeId"></param>
        partial void AfterDeleteOrganizationUserAPIScope(ref bool suppressDefaultLog, IDeleteOrganizationUserAPIScopeApiResponse apiResponseLocalVar, string orgCode, string userId, string apiId, string scopeId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="apiId"></param>
        /// <param name="scopeId"></param>
        private void OnErrorDeleteOrganizationUserAPIScopeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, string apiId, string scopeId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteOrganizationUserAPIScope(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, userId, apiId, scopeId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="apiId"></param>
        /// <param name="scopeId"></param>
        partial void OnErrorDeleteOrganizationUserAPIScope(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, string apiId, string scopeId);

        /// <summary>
        /// Delete scope from organization user API Delete a scope from an organization user api you previously created.  &lt;div&gt;   &lt;code&gt;delete:organization_user_api_scopes&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">User ID</param>
        /// <param name="apiId">API ID</param>
        /// <param name="scopeId">Scope ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationUserAPIScopeApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationUserAPIScopeApiResponse?> DeleteOrganizationUserAPIScopeOrDefaultAsync(string orgCode, string userId, string apiId, string scopeId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteOrganizationUserAPIScopeAsync(orgCode, userId, apiId, scopeId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete scope from organization user API Delete a scope from an organization user api you previously created.  &lt;div&gt;   &lt;code&gt;delete:organization_user_api_scopes&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">User ID</param>
        /// <param name="apiId">API ID</param>
        /// <param name="scopeId">Scope ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationUserAPIScopeApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationUserAPIScopeApiResponse> DeleteOrganizationUserAPIScopeAsync(string orgCode, string userId, string apiId, string scopeId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteOrganizationUserAPIScope(orgCode, userId, apiId, scopeId);

                FormatDeleteOrganizationUserAPIScope(ref orgCode, ref userId, ref apiId, ref scopeId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users/{user_id}/apis/{api_id}/scopes/{scope_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users/{user_id}/apis/{api_id}/scopes/{scope_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bapi_id%7D", Uri.EscapeDataString(apiId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bscope_id%7D", Uri.EscapeDataString(scopeId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteOrganizationUserAPIScopeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteOrganizationUserAPIScopeApiResponse>();
                        DeleteOrganizationUserAPIScopeApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteOrganizationUserAPIScopeApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users/{user_id}/apis/{api_id}/scopes/{scope_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteOrganizationUserAPIScopeDefaultImplementation(apiResponseLocalVar, orgCode, userId, apiId, scopeId);

                        Events.ExecuteOnDeleteOrganizationUserAPIScope(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteOrganizationUserAPIScopeDefaultImplementation(e, "/api/v1/organizations/{org_code}/users/{user_id}/apis/{api_id}/scopes/{scope_id}", uriBuilderLocalVar.Path, orgCode, userId, apiId, scopeId);
                Events.ExecuteOnErrorDeleteOrganizationUserAPIScope(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteOrganizationUserAPIScopeApiResponse"/>
        /// </summary>
        public partial class DeleteOrganizationUserAPIScopeApiResponse : Kinde.Api.Client.ApiResponse, IDeleteOrganizationUserAPIScopeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteOrganizationUserAPIScopeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteOrganizationUserAPIScopeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationUserAPIScopeApiResponse(ILogger<DeleteOrganizationUserAPIScopeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteOrganizationUserAPIScopeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationUserAPIScopeApiResponse(ILogger<DeleteOrganizationUserAPIScopeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteOrganizationUserPermission(ref string orgCode, ref string userId, ref string permissionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="permissionId"></param>
        /// <returns></returns>
        private void ValidateDeleteOrganizationUserPermission(string orgCode, string userId, string permissionId)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (userId == null)
                throw new ArgumentNullException(nameof(userId));

            if (permissionId == null)
                throw new ArgumentNullException(nameof(permissionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="permissionId"></param>
        private void AfterDeleteOrganizationUserPermissionDefaultImplementation(IDeleteOrganizationUserPermissionApiResponse apiResponseLocalVar, string orgCode, string userId, string permissionId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteOrganizationUserPermission(ref suppressDefaultLog, apiResponseLocalVar, orgCode, userId, permissionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="permissionId"></param>
        partial void AfterDeleteOrganizationUserPermission(ref bool suppressDefaultLog, IDeleteOrganizationUserPermissionApiResponse apiResponseLocalVar, string orgCode, string userId, string permissionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="permissionId"></param>
        private void OnErrorDeleteOrganizationUserPermissionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, string permissionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteOrganizationUserPermission(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, userId, permissionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="permissionId"></param>
        partial void OnErrorDeleteOrganizationUserPermission(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, string permissionId);

        /// <summary>
        /// Delete Organization User Permission Delete permission for an organization user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="permissionId">The permission id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationUserPermissionApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationUserPermissionApiResponse?> DeleteOrganizationUserPermissionOrDefaultAsync(string orgCode, string userId, string permissionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteOrganizationUserPermissionAsync(orgCode, userId, permissionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Organization User Permission Delete permission for an organization user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="permissionId">The permission id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationUserPermissionApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationUserPermissionApiResponse> DeleteOrganizationUserPermissionAsync(string orgCode, string userId, string permissionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteOrganizationUserPermission(orgCode, userId, permissionId);

                FormatDeleteOrganizationUserPermission(ref orgCode, ref userId, ref permissionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users/{user_id}/permissions/{permission_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users/{user_id}/permissions/{permission_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpermission_id%7D", Uri.EscapeDataString(permissionId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteOrganizationUserPermissionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteOrganizationUserPermissionApiResponse>();
                        DeleteOrganizationUserPermissionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteOrganizationUserPermissionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users/{user_id}/permissions/{permission_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteOrganizationUserPermissionDefaultImplementation(apiResponseLocalVar, orgCode, userId, permissionId);

                        Events.ExecuteOnDeleteOrganizationUserPermission(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteOrganizationUserPermissionDefaultImplementation(e, "/api/v1/organizations/{org_code}/users/{user_id}/permissions/{permission_id}", uriBuilderLocalVar.Path, orgCode, userId, permissionId);
                Events.ExecuteOnErrorDeleteOrganizationUserPermission(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteOrganizationUserPermissionApiResponse"/>
        /// </summary>
        public partial class DeleteOrganizationUserPermissionApiResponse : Kinde.Api.Client.ApiResponse, IDeleteOrganizationUserPermissionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteOrganizationUserPermissionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteOrganizationUserPermissionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationUserPermissionApiResponse(ILogger<DeleteOrganizationUserPermissionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteOrganizationUserPermissionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationUserPermissionApiResponse(ILogger<DeleteOrganizationUserPermissionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteOrganizationUserRole(ref string orgCode, ref string userId, ref string roleId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="roleId"></param>
        /// <returns></returns>
        private void ValidateDeleteOrganizationUserRole(string orgCode, string userId, string roleId)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (userId == null)
                throw new ArgumentNullException(nameof(userId));

            if (roleId == null)
                throw new ArgumentNullException(nameof(roleId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="roleId"></param>
        private void AfterDeleteOrganizationUserRoleDefaultImplementation(IDeleteOrganizationUserRoleApiResponse apiResponseLocalVar, string orgCode, string userId, string roleId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteOrganizationUserRole(ref suppressDefaultLog, apiResponseLocalVar, orgCode, userId, roleId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="roleId"></param>
        partial void AfterDeleteOrganizationUserRole(ref bool suppressDefaultLog, IDeleteOrganizationUserRoleApiResponse apiResponseLocalVar, string orgCode, string userId, string roleId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="roleId"></param>
        private void OnErrorDeleteOrganizationUserRoleDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, string roleId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteOrganizationUserRole(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, userId, roleId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="roleId"></param>
        partial void OnErrorDeleteOrganizationUserRole(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, string roleId);

        /// <summary>
        /// Delete Organization User Role Delete role for an organization user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="roleId">The role id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationUserRoleApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationUserRoleApiResponse?> DeleteOrganizationUserRoleOrDefaultAsync(string orgCode, string userId, string roleId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteOrganizationUserRoleAsync(orgCode, userId, roleId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Organization User Role Delete role for an organization user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="roleId">The role id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOrganizationUserRoleApiResponse"/>&gt;</returns>
        public async Task<IDeleteOrganizationUserRoleApiResponse> DeleteOrganizationUserRoleAsync(string orgCode, string userId, string roleId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteOrganizationUserRole(orgCode, userId, roleId);

                FormatDeleteOrganizationUserRole(ref orgCode, ref userId, ref roleId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brole_id%7D", Uri.EscapeDataString(roleId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteOrganizationUserRoleApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteOrganizationUserRoleApiResponse>();
                        DeleteOrganizationUserRoleApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new DeleteOrganizationUserRoleApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteOrganizationUserRoleDefaultImplementation(apiResponseLocalVar, orgCode, userId, roleId);

                        Events.ExecuteOnDeleteOrganizationUserRole(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteOrganizationUserRoleDefaultImplementation(e, "/api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id}", uriBuilderLocalVar.Path, orgCode, userId, roleId);
                Events.ExecuteOnErrorDeleteOrganizationUserRole(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteOrganizationUserRoleApiResponse"/>
        /// </summary>
        public partial class DeleteOrganizationUserRoleApiResponse : Kinde.Api.Client.ApiResponse, IDeleteOrganizationUserRoleApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteOrganizationUserRoleApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteOrganizationUserRoleApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationUserRoleApiResponse(ILogger<DeleteOrganizationUserRoleApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteOrganizationUserRoleApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOrganizationUserRoleApiResponse(ILogger<DeleteOrganizationUserRoleApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEnableOrgConnection(ref string organizationCode, ref string connectionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organizationCode"></param>
        /// <param name="connectionId"></param>
        /// <returns></returns>
        private void ValidateEnableOrgConnection(string organizationCode, string connectionId)
        {
            if (organizationCode == null)
                throw new ArgumentNullException(nameof(organizationCode));

            if (connectionId == null)
                throw new ArgumentNullException(nameof(connectionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organizationCode"></param>
        /// <param name="connectionId"></param>
        private void AfterEnableOrgConnectionDefaultImplementation(IEnableOrgConnectionApiResponse apiResponseLocalVar, string organizationCode, string connectionId)
        {
            bool suppressDefaultLog = false;
            AfterEnableOrgConnection(ref suppressDefaultLog, apiResponseLocalVar, organizationCode, connectionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organizationCode"></param>
        /// <param name="connectionId"></param>
        partial void AfterEnableOrgConnection(ref bool suppressDefaultLog, IEnableOrgConnectionApiResponse apiResponseLocalVar, string organizationCode, string connectionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organizationCode"></param>
        /// <param name="connectionId"></param>
        private void OnErrorEnableOrgConnectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organizationCode, string connectionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEnableOrgConnection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organizationCode, connectionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organizationCode"></param>
        /// <param name="connectionId"></param>
        partial void OnErrorEnableOrgConnection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organizationCode, string connectionId);

        /// <summary>
        /// Enable connection Enable an auth connection for an organization.  &lt;div&gt;   &lt;code&gt;create:organization_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="organizationCode">The unique code for the organization.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEnableOrgConnectionApiResponse"/>&gt;</returns>
        public async Task<IEnableOrgConnectionApiResponse?> EnableOrgConnectionOrDefaultAsync(string organizationCode, string connectionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EnableOrgConnectionAsync(organizationCode, connectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Enable connection Enable an auth connection for an organization.  &lt;div&gt;   &lt;code&gt;create:organization_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationCode">The unique code for the organization.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEnableOrgConnectionApiResponse"/>&gt;</returns>
        public async Task<IEnableOrgConnectionApiResponse> EnableOrgConnectionAsync(string organizationCode, string connectionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEnableOrgConnection(organizationCode, connectionId);

                FormatEnableOrgConnection(ref organizationCode, ref connectionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{organization_code}/connections/{connection_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{organization_code}/connections/{connection_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization_code%7D", Uri.EscapeDataString(organizationCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bconnection_id%7D", Uri.EscapeDataString(connectionId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<EnableOrgConnectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EnableOrgConnectionApiResponse>();
                        EnableOrgConnectionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new EnableOrgConnectionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{organization_code}/connections/{connection_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterEnableOrgConnectionDefaultImplementation(apiResponseLocalVar, organizationCode, connectionId);

                        Events.ExecuteOnEnableOrgConnection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEnableOrgConnectionDefaultImplementation(e, "/api/v1/organizations/{organization_code}/connections/{connection_id}", uriBuilderLocalVar.Path, organizationCode, connectionId);
                Events.ExecuteOnErrorEnableOrgConnection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EnableOrgConnectionApiResponse"/>
        /// </summary>
        public partial class EnableOrgConnectionApiResponse : Kinde.Api.Client.ApiResponse, IEnableOrgConnectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EnableOrgConnectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EnableOrgConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EnableOrgConnectionApiResponse(ILogger<EnableOrgConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="EnableOrgConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EnableOrgConnectionApiResponse(ILogger<EnableOrgConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOrgUserMFA(ref string orgCode, ref string userId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        private void ValidateGetOrgUserMFA(string orgCode, string userId)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (userId == null)
                throw new ArgumentNullException(nameof(userId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        private void AfterGetOrgUserMFADefaultImplementation(IGetOrgUserMFAApiResponse apiResponseLocalVar, string orgCode, string userId)
        {
            bool suppressDefaultLog = false;
            AfterGetOrgUserMFA(ref suppressDefaultLog, apiResponseLocalVar, orgCode, userId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        partial void AfterGetOrgUserMFA(ref bool suppressDefaultLog, IGetOrgUserMFAApiResponse apiResponseLocalVar, string orgCode, string userId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        private void OnErrorGetOrgUserMFADefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOrgUserMFA(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, userId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        partial void OnErrorGetOrgUserMFA(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId);

        /// <summary>
        /// Get an organization user&#39;s MFA configuration Get an organization user’s MFA configuration.  &lt;div&gt;   &lt;code&gt;read:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">The identifier for the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrgUserMFAApiResponse"/>&gt;</returns>
        public async Task<IGetOrgUserMFAApiResponse?> GetOrgUserMFAOrDefaultAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOrgUserMFAAsync(orgCode, userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an organization user&#39;s MFA configuration Get an organization user’s MFA configuration.  &lt;div&gt;   &lt;code&gt;read:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">The identifier for the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrgUserMFAApiResponse"/>&gt;</returns>
        public async Task<IGetOrgUserMFAApiResponse> GetOrgUserMFAAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOrgUserMFA(orgCode, userId);

                FormatGetOrgUserMFA(ref orgCode, ref userId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users/{user_id}/mfa"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users/{user_id}/mfa");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetOrgUserMFAApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOrgUserMFAApiResponse>();
                        GetOrgUserMFAApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetOrgUserMFAApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users/{user_id}/mfa", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetOrgUserMFADefaultImplementation(apiResponseLocalVar, orgCode, userId);

                        Events.ExecuteOnGetOrgUserMFA(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOrgUserMFADefaultImplementation(e, "/api/v1/organizations/{org_code}/users/{user_id}/mfa", uriBuilderLocalVar.Path, orgCode, userId);
                Events.ExecuteOnErrorGetOrgUserMFA(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOrgUserMFAApiResponse"/>
        /// </summary>
        public partial class GetOrgUserMFAApiResponse : Kinde.Api.Client.ApiResponse, IGetOrgUserMFAApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOrgUserMFAApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOrgUserMFAApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrgUserMFAApiResponse(ILogger<GetOrgUserMFAApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetOrgUserMFAApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrgUserMFAApiResponse(ILogger<GetOrgUserMFAApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.GetUserMfaResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.GetUserMfaResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.GetUserMfaResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.NotFoundResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.NotFoundResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Kinde.Api.Model.NotFoundResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOrganization(ref Option<string> code, ref Option<string> expand);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="code"></param>
        /// <param name="expand"></param>
        /// <returns></returns>
        private void ValidateGetOrganization(Option<string> code, Option<string> expand)
        {
            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code));

            if (expand.IsSet && expand.Value == null)
                throw new ArgumentNullException(nameof(expand));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="expand"></param>
        private void AfterGetOrganizationDefaultImplementation(IGetOrganizationApiResponse apiResponseLocalVar, Option<string> code, Option<string> expand)
        {
            bool suppressDefaultLog = false;
            AfterGetOrganization(ref suppressDefaultLog, apiResponseLocalVar, code, expand);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="expand"></param>
        partial void AfterGetOrganization(ref bool suppressDefaultLog, IGetOrganizationApiResponse apiResponseLocalVar, Option<string> code, Option<string> expand);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="expand"></param>
        private void OnErrorGetOrganizationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> code, Option<string> expand)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOrganization(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, code, expand);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="code"></param>
        /// <param name="expand"></param>
        partial void OnErrorGetOrganization(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> code, Option<string> expand);

        /// <summary>
        /// Get organization Retrieve organization details by code.  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="expand">Specify additional data to retrieve. Use \&quot;billing\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationApiResponse?> GetOrganizationOrDefaultAsync(Option<string> code = default, Option<string> expand = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOrganizationAsync(code, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get organization Retrieve organization details by code.  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The organization&#39;s code. (optional)</param>
        /// <param name="expand">Specify additional data to retrieve. Use \&quot;billing\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationApiResponse> GetOrganizationAsync(Option<string> code = default, Option<string> expand = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOrganization(code, expand);

                FormatGetOrganization(ref code, ref expand);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organization"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organization");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (code.IsSet)
                        parseQueryStringLocalVar["code"] = ClientUtils.ParameterToString(code.Value);

                    if (expand.IsSet)
                        parseQueryStringLocalVar["expand"] = ClientUtils.ParameterToString(expand.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetOrganizationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOrganizationApiResponse>();
                        GetOrganizationApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetOrganizationApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organization", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetOrganizationDefaultImplementation(apiResponseLocalVar, code, expand);

                        Events.ExecuteOnGetOrganization(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOrganizationDefaultImplementation(e, "/api/v1/organization", uriBuilderLocalVar.Path, code, expand);
                Events.ExecuteOnErrorGetOrganization(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOrganizationApiResponse"/>
        /// </summary>
        public partial class GetOrganizationApiResponse : Kinde.Api.Client.ApiResponse, IGetOrganizationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOrganizationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOrganizationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationApiResponse(ILogger<GetOrganizationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetOrganizationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationApiResponse(ILogger<GetOrganizationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.GetOrganizationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.GetOrganizationResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.GetOrganizationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOrganizationConnections(ref string organizationCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organizationCode"></param>
        /// <returns></returns>
        private void ValidateGetOrganizationConnections(string organizationCode)
        {
            if (organizationCode == null)
                throw new ArgumentNullException(nameof(organizationCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organizationCode"></param>
        private void AfterGetOrganizationConnectionsDefaultImplementation(IGetOrganizationConnectionsApiResponse apiResponseLocalVar, string organizationCode)
        {
            bool suppressDefaultLog = false;
            AfterGetOrganizationConnections(ref suppressDefaultLog, apiResponseLocalVar, organizationCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organizationCode"></param>
        partial void AfterGetOrganizationConnections(ref bool suppressDefaultLog, IGetOrganizationConnectionsApiResponse apiResponseLocalVar, string organizationCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organizationCode"></param>
        private void OnErrorGetOrganizationConnectionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organizationCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOrganizationConnections(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organizationCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organizationCode"></param>
        partial void OnErrorGetOrganizationConnections(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organizationCode);

        /// <summary>
        /// Get connections Gets all connections for an organization.  &lt;div&gt;   &lt;code&gt;read:organization_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="organizationCode">The organization code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationConnectionsApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationConnectionsApiResponse?> GetOrganizationConnectionsOrDefaultAsync(string organizationCode, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOrganizationConnectionsAsync(organizationCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get connections Gets all connections for an organization.  &lt;div&gt;   &lt;code&gt;read:organization_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationCode">The organization code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationConnectionsApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationConnectionsApiResponse> GetOrganizationConnectionsAsync(string organizationCode, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOrganizationConnections(organizationCode);

                FormatGetOrganizationConnections(ref organizationCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{organization_code}/connections"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{organization_code}/connections");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization_code%7D", Uri.EscapeDataString(organizationCode.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetOrganizationConnectionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOrganizationConnectionsApiResponse>();
                        GetOrganizationConnectionsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetOrganizationConnectionsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{organization_code}/connections", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetOrganizationConnectionsDefaultImplementation(apiResponseLocalVar, organizationCode);

                        Events.ExecuteOnGetOrganizationConnections(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOrganizationConnectionsDefaultImplementation(e, "/api/v1/organizations/{organization_code}/connections", uriBuilderLocalVar.Path, organizationCode);
                Events.ExecuteOnErrorGetOrganizationConnections(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOrganizationConnectionsApiResponse"/>
        /// </summary>
        public partial class GetOrganizationConnectionsApiResponse : Kinde.Api.Client.ApiResponse, IGetOrganizationConnectionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOrganizationConnectionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOrganizationConnectionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationConnectionsApiResponse(ILogger<GetOrganizationConnectionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetOrganizationConnectionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationConnectionsApiResponse(ILogger<GetOrganizationConnectionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.GetConnectionsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.GetConnectionsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.GetConnectionsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOrganizationFeatureFlags(ref string orgCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <returns></returns>
        private void ValidateGetOrganizationFeatureFlags(string orgCode)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        private void AfterGetOrganizationFeatureFlagsDefaultImplementation(IGetOrganizationFeatureFlagsApiResponse apiResponseLocalVar, string orgCode)
        {
            bool suppressDefaultLog = false;
            AfterGetOrganizationFeatureFlags(ref suppressDefaultLog, apiResponseLocalVar, orgCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        partial void AfterGetOrganizationFeatureFlags(ref bool suppressDefaultLog, IGetOrganizationFeatureFlagsApiResponse apiResponseLocalVar, string orgCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        private void OnErrorGetOrganizationFeatureFlagsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOrganizationFeatureFlags(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        partial void OnErrorGetOrganizationFeatureFlags(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode);

        /// <summary>
        /// List Organization Feature Flags Get all organization feature flags.  &lt;div&gt;   &lt;code&gt;read:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationFeatureFlagsApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationFeatureFlagsApiResponse?> GetOrganizationFeatureFlagsOrDefaultAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOrganizationFeatureFlagsAsync(orgCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Organization Feature Flags Get all organization feature flags.  &lt;div&gt;   &lt;code&gt;read:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationFeatureFlagsApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationFeatureFlagsApiResponse> GetOrganizationFeatureFlagsAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOrganizationFeatureFlags(orgCode);

                FormatGetOrganizationFeatureFlags(ref orgCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/feature_flags"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/feature_flags");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetOrganizationFeatureFlagsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOrganizationFeatureFlagsApiResponse>();
                        GetOrganizationFeatureFlagsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetOrganizationFeatureFlagsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/feature_flags", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetOrganizationFeatureFlagsDefaultImplementation(apiResponseLocalVar, orgCode);

                        Events.ExecuteOnGetOrganizationFeatureFlags(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOrganizationFeatureFlagsDefaultImplementation(e, "/api/v1/organizations/{org_code}/feature_flags", uriBuilderLocalVar.Path, orgCode);
                Events.ExecuteOnErrorGetOrganizationFeatureFlags(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOrganizationFeatureFlagsApiResponse"/>
        /// </summary>
        public partial class GetOrganizationFeatureFlagsApiResponse : Kinde.Api.Client.ApiResponse, IGetOrganizationFeatureFlagsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOrganizationFeatureFlagsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOrganizationFeatureFlagsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationFeatureFlagsApiResponse(ILogger<GetOrganizationFeatureFlagsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetOrganizationFeatureFlagsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationFeatureFlagsApiResponse(ILogger<GetOrganizationFeatureFlagsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.GetOrganizationFeatureFlagsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.GetOrganizationFeatureFlagsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.GetOrganizationFeatureFlagsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOrganizationPropertyValues(ref string orgCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <returns></returns>
        private void ValidateGetOrganizationPropertyValues(string orgCode)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        private void AfterGetOrganizationPropertyValuesDefaultImplementation(IGetOrganizationPropertyValuesApiResponse apiResponseLocalVar, string orgCode)
        {
            bool suppressDefaultLog = false;
            AfterGetOrganizationPropertyValues(ref suppressDefaultLog, apiResponseLocalVar, orgCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        partial void AfterGetOrganizationPropertyValues(ref bool suppressDefaultLog, IGetOrganizationPropertyValuesApiResponse apiResponseLocalVar, string orgCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        private void OnErrorGetOrganizationPropertyValuesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOrganizationPropertyValues(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        partial void OnErrorGetOrganizationPropertyValues(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode);

        /// <summary>
        /// Get Organization Property Values Gets properties for an organization by org code.  &lt;div&gt;   &lt;code&gt;read:organization_properties&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationPropertyValuesApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationPropertyValuesApiResponse?> GetOrganizationPropertyValuesOrDefaultAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOrganizationPropertyValuesAsync(orgCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Organization Property Values Gets properties for an organization by org code.  &lt;div&gt;   &lt;code&gt;read:organization_properties&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationPropertyValuesApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationPropertyValuesApiResponse> GetOrganizationPropertyValuesAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOrganizationPropertyValues(orgCode);

                FormatGetOrganizationPropertyValues(ref orgCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/properties"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/properties");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetOrganizationPropertyValuesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOrganizationPropertyValuesApiResponse>();
                        GetOrganizationPropertyValuesApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetOrganizationPropertyValuesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/properties", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetOrganizationPropertyValuesDefaultImplementation(apiResponseLocalVar, orgCode);

                        Events.ExecuteOnGetOrganizationPropertyValues(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOrganizationPropertyValuesDefaultImplementation(e, "/api/v1/organizations/{org_code}/properties", uriBuilderLocalVar.Path, orgCode);
                Events.ExecuteOnErrorGetOrganizationPropertyValues(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOrganizationPropertyValuesApiResponse"/>
        /// </summary>
        public partial class GetOrganizationPropertyValuesApiResponse : Kinde.Api.Client.ApiResponse, IGetOrganizationPropertyValuesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOrganizationPropertyValuesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOrganizationPropertyValuesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationPropertyValuesApiResponse(ILogger<GetOrganizationPropertyValuesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetOrganizationPropertyValuesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationPropertyValuesApiResponse(ILogger<GetOrganizationPropertyValuesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.GetPropertyValuesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.GetPropertyValuesResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.GetPropertyValuesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOrganizationUserPermissions(ref string orgCode, ref string userId, ref Option<string?> expand);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        private void ValidateGetOrganizationUserPermissions(string orgCode, string userId)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (userId == null)
                throw new ArgumentNullException(nameof(userId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="expand"></param>
        private void AfterGetOrganizationUserPermissionsDefaultImplementation(IGetOrganizationUserPermissionsApiResponse apiResponseLocalVar, string orgCode, string userId, Option<string?> expand)
        {
            bool suppressDefaultLog = false;
            AfterGetOrganizationUserPermissions(ref suppressDefaultLog, apiResponseLocalVar, orgCode, userId, expand);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="expand"></param>
        partial void AfterGetOrganizationUserPermissions(ref bool suppressDefaultLog, IGetOrganizationUserPermissionsApiResponse apiResponseLocalVar, string orgCode, string userId, Option<string?> expand);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="expand"></param>
        private void OnErrorGetOrganizationUserPermissionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, Option<string?> expand)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOrganizationUserPermissions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, userId, expand);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="expand"></param>
        partial void OnErrorGetOrganizationUserPermissions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, Option<string?> expand);

        /// <summary>
        /// List Organization User Permissions Get permissions for an organization user.  &lt;div&gt;   &lt;code&gt;read:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="expand">Specify additional data to retrieve. Use \&quot;roles\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationUserPermissionsApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationUserPermissionsApiResponse?> GetOrganizationUserPermissionsOrDefaultAsync(string orgCode, string userId, Option<string?> expand = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOrganizationUserPermissionsAsync(orgCode, userId, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Organization User Permissions Get permissions for an organization user.  &lt;div&gt;   &lt;code&gt;read:organization_user_permissions&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="expand">Specify additional data to retrieve. Use \&quot;roles\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationUserPermissionsApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationUserPermissionsApiResponse> GetOrganizationUserPermissionsAsync(string orgCode, string userId, Option<string?> expand = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOrganizationUserPermissions(orgCode, userId);

                FormatGetOrganizationUserPermissions(ref orgCode, ref userId, ref expand);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users/{user_id}/permissions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users/{user_id}/permissions");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (expand.IsSet)
                        parseQueryStringLocalVar["expand"] = ClientUtils.ParameterToString(expand.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetOrganizationUserPermissionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOrganizationUserPermissionsApiResponse>();
                        GetOrganizationUserPermissionsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetOrganizationUserPermissionsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users/{user_id}/permissions", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetOrganizationUserPermissionsDefaultImplementation(apiResponseLocalVar, orgCode, userId, expand);

                        Events.ExecuteOnGetOrganizationUserPermissions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOrganizationUserPermissionsDefaultImplementation(e, "/api/v1/organizations/{org_code}/users/{user_id}/permissions", uriBuilderLocalVar.Path, orgCode, userId, expand);
                Events.ExecuteOnErrorGetOrganizationUserPermissions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOrganizationUserPermissionsApiResponse"/>
        /// </summary>
        public partial class GetOrganizationUserPermissionsApiResponse : Kinde.Api.Client.ApiResponse, IGetOrganizationUserPermissionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOrganizationUserPermissionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOrganizationUserPermissionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationUserPermissionsApiResponse(ILogger<GetOrganizationUserPermissionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetOrganizationUserPermissionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationUserPermissionsApiResponse(ILogger<GetOrganizationUserPermissionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.GetOrganizationsUserPermissionsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.GetOrganizationsUserPermissionsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.GetOrganizationsUserPermissionsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOrganizationUserRoles(ref string orgCode, ref string userId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        private void ValidateGetOrganizationUserRoles(string orgCode, string userId)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (userId == null)
                throw new ArgumentNullException(nameof(userId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        private void AfterGetOrganizationUserRolesDefaultImplementation(IGetOrganizationUserRolesApiResponse apiResponseLocalVar, string orgCode, string userId)
        {
            bool suppressDefaultLog = false;
            AfterGetOrganizationUserRoles(ref suppressDefaultLog, apiResponseLocalVar, orgCode, userId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        partial void AfterGetOrganizationUserRoles(ref bool suppressDefaultLog, IGetOrganizationUserRolesApiResponse apiResponseLocalVar, string orgCode, string userId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        private void OnErrorGetOrganizationUserRolesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOrganizationUserRoles(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, userId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        partial void OnErrorGetOrganizationUserRoles(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId);

        /// <summary>
        /// List Organization User Roles Get roles for an organization user.  &lt;div&gt;   &lt;code&gt;read:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationUserRolesApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationUserRolesApiResponse?> GetOrganizationUserRolesOrDefaultAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOrganizationUserRolesAsync(orgCode, userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Organization User Roles Get roles for an organization user.  &lt;div&gt;   &lt;code&gt;read:organization_user_roles&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationUserRolesApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationUserRolesApiResponse> GetOrganizationUserRolesAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOrganizationUserRoles(orgCode, userId);

                FormatGetOrganizationUserRoles(ref orgCode, ref userId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users/{user_id}/roles"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users/{user_id}/roles");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetOrganizationUserRolesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOrganizationUserRolesApiResponse>();
                        GetOrganizationUserRolesApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetOrganizationUserRolesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users/{user_id}/roles", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetOrganizationUserRolesDefaultImplementation(apiResponseLocalVar, orgCode, userId);

                        Events.ExecuteOnGetOrganizationUserRoles(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOrganizationUserRolesDefaultImplementation(e, "/api/v1/organizations/{org_code}/users/{user_id}/roles", uriBuilderLocalVar.Path, orgCode, userId);
                Events.ExecuteOnErrorGetOrganizationUserRoles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOrganizationUserRolesApiResponse"/>
        /// </summary>
        public partial class GetOrganizationUserRolesApiResponse : Kinde.Api.Client.ApiResponse, IGetOrganizationUserRolesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOrganizationUserRolesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOrganizationUserRolesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationUserRolesApiResponse(ILogger<GetOrganizationUserRolesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetOrganizationUserRolesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationUserRolesApiResponse(ILogger<GetOrganizationUserRolesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.GetOrganizationsUserRolesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.GetOrganizationsUserRolesResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.GetOrganizationsUserRolesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOrganizationUsers(ref string orgCode, ref Option<string?> sort, ref Option<int?> pageSize, ref Option<string?> nextToken, ref Option<string> permissions, ref Option<string> roles);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="permissions"></param>
        /// <param name="roles"></param>
        /// <returns></returns>
        private void ValidateGetOrganizationUsers(string orgCode, Option<string> permissions, Option<string> roles)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (permissions.IsSet && permissions.Value == null)
                throw new ArgumentNullException(nameof(permissions));

            if (roles.IsSet && roles.Value == null)
                throw new ArgumentNullException(nameof(roles));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="sort"></param>
        /// <param name="pageSize"></param>
        /// <param name="nextToken"></param>
        /// <param name="permissions"></param>
        /// <param name="roles"></param>
        private void AfterGetOrganizationUsersDefaultImplementation(IGetOrganizationUsersApiResponse apiResponseLocalVar, string orgCode, Option<string?> sort, Option<int?> pageSize, Option<string?> nextToken, Option<string> permissions, Option<string> roles)
        {
            bool suppressDefaultLog = false;
            AfterGetOrganizationUsers(ref suppressDefaultLog, apiResponseLocalVar, orgCode, sort, pageSize, nextToken, permissions, roles);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="sort"></param>
        /// <param name="pageSize"></param>
        /// <param name="nextToken"></param>
        /// <param name="permissions"></param>
        /// <param name="roles"></param>
        partial void AfterGetOrganizationUsers(ref bool suppressDefaultLog, IGetOrganizationUsersApiResponse apiResponseLocalVar, string orgCode, Option<string?> sort, Option<int?> pageSize, Option<string?> nextToken, Option<string> permissions, Option<string> roles);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="sort"></param>
        /// <param name="pageSize"></param>
        /// <param name="nextToken"></param>
        /// <param name="permissions"></param>
        /// <param name="roles"></param>
        private void OnErrorGetOrganizationUsersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, Option<string?> sort, Option<int?> pageSize, Option<string?> nextToken, Option<string> permissions, Option<string> roles)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOrganizationUsers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, sort, pageSize, nextToken, permissions, roles);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="sort"></param>
        /// <param name="pageSize"></param>
        /// <param name="nextToken"></param>
        /// <param name="permissions"></param>
        /// <param name="roles"></param>
        partial void OnErrorGetOrganizationUsers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, Option<string?> sort, Option<int?> pageSize, Option<string?> nextToken, Option<string> permissions, Option<string> roles);

        /// <summary>
        /// Get organization users Get user details for all members of an organization.  &lt;div&gt;   &lt;code&gt;read:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="permissions">Filter by user permissions comma separated (where all match) (optional)</param>
        /// <param name="roles">Filter by user roles comma separated (where all match) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationUsersApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationUsersApiResponse?> GetOrganizationUsersOrDefaultAsync(string orgCode, Option<string?> sort = default, Option<int?> pageSize = default, Option<string?> nextToken = default, Option<string> permissions = default, Option<string> roles = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOrganizationUsersAsync(orgCode, sort, pageSize, nextToken, permissions, roles, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get organization users Get user details for all members of an organization.  &lt;div&gt;   &lt;code&gt;read:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="permissions">Filter by user permissions comma separated (where all match) (optional)</param>
        /// <param name="roles">Filter by user roles comma separated (where all match) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationUsersApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationUsersApiResponse> GetOrganizationUsersAsync(string orgCode, Option<string?> sort = default, Option<int?> pageSize = default, Option<string?> nextToken = default, Option<string> permissions = default, Option<string> roles = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOrganizationUsers(orgCode, permissions, roles);

                FormatGetOrganizationUsers(ref orgCode, ref sort, ref pageSize, ref nextToken, ref permissions, ref roles);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (nextToken.IsSet)
                        parseQueryStringLocalVar["next_token"] = ClientUtils.ParameterToString(nextToken.Value);

                    if (permissions.IsSet)
                        parseQueryStringLocalVar["permissions"] = ClientUtils.ParameterToString(permissions.Value);

                    if (roles.IsSet)
                        parseQueryStringLocalVar["roles"] = ClientUtils.ParameterToString(roles.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetOrganizationUsersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOrganizationUsersApiResponse>();
                        GetOrganizationUsersApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetOrganizationUsersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetOrganizationUsersDefaultImplementation(apiResponseLocalVar, orgCode, sort, pageSize, nextToken, permissions, roles);

                        Events.ExecuteOnGetOrganizationUsers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOrganizationUsersDefaultImplementation(e, "/api/v1/organizations/{org_code}/users", uriBuilderLocalVar.Path, orgCode, sort, pageSize, nextToken, permissions, roles);
                Events.ExecuteOnErrorGetOrganizationUsers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOrganizationUsersApiResponse"/>
        /// </summary>
        public partial class GetOrganizationUsersApiResponse : Kinde.Api.Client.ApiResponse, IGetOrganizationUsersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOrganizationUsersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOrganizationUsersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationUsersApiResponse(ILogger<GetOrganizationUsersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetOrganizationUsersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationUsersApiResponse(ILogger<GetOrganizationUsersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.GetOrganizationUsersResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.GetOrganizationUsersResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.GetOrganizationUsersResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOrganizations(ref Option<string?> sort, ref Option<int?> pageSize, ref Option<string?> nextToken);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sort"></param>
        /// <param name="pageSize"></param>
        /// <param name="nextToken"></param>
        private void AfterGetOrganizationsDefaultImplementation(IGetOrganizationsApiResponse apiResponseLocalVar, Option<string?> sort, Option<int?> pageSize, Option<string?> nextToken)
        {
            bool suppressDefaultLog = false;
            AfterGetOrganizations(ref suppressDefaultLog, apiResponseLocalVar, sort, pageSize, nextToken);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sort"></param>
        /// <param name="pageSize"></param>
        /// <param name="nextToken"></param>
        partial void AfterGetOrganizations(ref bool suppressDefaultLog, IGetOrganizationsApiResponse apiResponseLocalVar, Option<string?> sort, Option<int?> pageSize, Option<string?> nextToken);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sort"></param>
        /// <param name="pageSize"></param>
        /// <param name="nextToken"></param>
        private void OnErrorGetOrganizationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> sort, Option<int?> pageSize, Option<string?> nextToken)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOrganizations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sort, pageSize, nextToken);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sort"></param>
        /// <param name="pageSize"></param>
        /// <param name="nextToken"></param>
        partial void OnErrorGetOrganizations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> sort, Option<int?> pageSize, Option<string?> nextToken);

        /// <summary>
        /// Get organizations Get a list of organizations.  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationsApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationsApiResponse?> GetOrganizationsOrDefaultAsync(Option<string?> sort = default, Option<int?> pageSize = default, Option<string?> nextToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOrganizationsAsync(sort, pageSize, nextToken, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get organizations Get a list of organizations.  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Field and order to sort the result by. (optional)</param>
        /// <param name="pageSize">Number of results per page. Defaults to 10 if parameter not sent. (optional)</param>
        /// <param name="nextToken">A string to get the next page of results if there are more results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganizationsApiResponse"/>&gt;</returns>
        public async Task<IGetOrganizationsApiResponse> GetOrganizationsAsync(Option<string?> sort = default, Option<int?> pageSize = default, Option<string?> nextToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetOrganizations(ref sort, ref pageSize, ref nextToken);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (nextToken.IsSet)
                        parseQueryStringLocalVar["next_token"] = ClientUtils.ParameterToString(nextToken.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetOrganizationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOrganizationsApiResponse>();
                        GetOrganizationsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new GetOrganizationsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetOrganizationsDefaultImplementation(apiResponseLocalVar, sort, pageSize, nextToken);

                        Events.ExecuteOnGetOrganizations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOrganizationsDefaultImplementation(e, "/api/v1/organizations", uriBuilderLocalVar.Path, sort, pageSize, nextToken);
                Events.ExecuteOnErrorGetOrganizations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOrganizationsApiResponse"/>
        /// </summary>
        public partial class GetOrganizationsApiResponse : Kinde.Api.Client.ApiResponse, IGetOrganizationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOrganizationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOrganizationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationsApiResponse(ILogger<GetOrganizationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetOrganizationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganizationsApiResponse(ILogger<GetOrganizationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.GetOrganizationsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.GetOrganizationsResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.GetOrganizationsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReadOrganizationLogo(ref string orgCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <returns></returns>
        private void ValidateReadOrganizationLogo(string orgCode)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        private void AfterReadOrganizationLogoDefaultImplementation(IReadOrganizationLogoApiResponse apiResponseLocalVar, string orgCode)
        {
            bool suppressDefaultLog = false;
            AfterReadOrganizationLogo(ref suppressDefaultLog, apiResponseLocalVar, orgCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        partial void AfterReadOrganizationLogo(ref bool suppressDefaultLog, IReadOrganizationLogoApiResponse apiResponseLocalVar, string orgCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        private void OnErrorReadOrganizationLogoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReadOrganizationLogo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        partial void OnErrorReadOrganizationLogo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode);

        /// <summary>
        /// Read organization logo details Read organization logo details  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReadOrganizationLogoApiResponse"/>&gt;</returns>
        public async Task<IReadOrganizationLogoApiResponse?> ReadOrganizationLogoOrDefaultAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReadOrganizationLogoAsync(orgCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Read organization logo details Read organization logo details  &lt;div&gt;   &lt;code&gt;read:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReadOrganizationLogoApiResponse"/>&gt;</returns>
        public async Task<IReadOrganizationLogoApiResponse> ReadOrganizationLogoAsync(string orgCode, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateReadOrganizationLogo(orgCode);

                FormatReadOrganizationLogo(ref orgCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/logos"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/logos");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ReadOrganizationLogoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReadOrganizationLogoApiResponse>();
                        ReadOrganizationLogoApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ReadOrganizationLogoApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/logos", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterReadOrganizationLogoDefaultImplementation(apiResponseLocalVar, orgCode);

                        Events.ExecuteOnReadOrganizationLogo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReadOrganizationLogoDefaultImplementation(e, "/api/v1/organizations/{org_code}/logos", uriBuilderLocalVar.Path, orgCode);
                Events.ExecuteOnErrorReadOrganizationLogo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReadOrganizationLogoApiResponse"/>
        /// </summary>
        public partial class ReadOrganizationLogoApiResponse : Kinde.Api.Client.ApiResponse, IReadOrganizationLogoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReadOrganizationLogoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReadOrganizationLogoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReadOrganizationLogoApiResponse(ILogger<ReadOrganizationLogoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ReadOrganizationLogoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReadOrganizationLogoApiResponse(ILogger<ReadOrganizationLogoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ReadLogoResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ReadLogoResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.ReadLogoResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRemoveOrgConnection(ref string organizationCode, ref string connectionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organizationCode"></param>
        /// <param name="connectionId"></param>
        /// <returns></returns>
        private void ValidateRemoveOrgConnection(string organizationCode, string connectionId)
        {
            if (organizationCode == null)
                throw new ArgumentNullException(nameof(organizationCode));

            if (connectionId == null)
                throw new ArgumentNullException(nameof(connectionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organizationCode"></param>
        /// <param name="connectionId"></param>
        private void AfterRemoveOrgConnectionDefaultImplementation(IRemoveOrgConnectionApiResponse apiResponseLocalVar, string organizationCode, string connectionId)
        {
            bool suppressDefaultLog = false;
            AfterRemoveOrgConnection(ref suppressDefaultLog, apiResponseLocalVar, organizationCode, connectionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organizationCode"></param>
        /// <param name="connectionId"></param>
        partial void AfterRemoveOrgConnection(ref bool suppressDefaultLog, IRemoveOrgConnectionApiResponse apiResponseLocalVar, string organizationCode, string connectionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organizationCode"></param>
        /// <param name="connectionId"></param>
        private void OnErrorRemoveOrgConnectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organizationCode, string connectionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRemoveOrgConnection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organizationCode, connectionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organizationCode"></param>
        /// <param name="connectionId"></param>
        partial void OnErrorRemoveOrgConnection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organizationCode, string connectionId);

        /// <summary>
        /// Remove connection Turn off an auth connection for an organization  &lt;div&gt;   &lt;code&gt;delete:organization_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="organizationCode">The unique code for the organization.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveOrgConnectionApiResponse"/>&gt;</returns>
        public async Task<IRemoveOrgConnectionApiResponse?> RemoveOrgConnectionOrDefaultAsync(string organizationCode, string connectionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveOrgConnectionAsync(organizationCode, connectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Remove connection Turn off an auth connection for an organization  &lt;div&gt;   &lt;code&gt;delete:organization_connections&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationCode">The unique code for the organization.</param>
        /// <param name="connectionId">The identifier for the connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveOrgConnectionApiResponse"/>&gt;</returns>
        public async Task<IRemoveOrgConnectionApiResponse> RemoveOrgConnectionAsync(string organizationCode, string connectionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRemoveOrgConnection(organizationCode, connectionId);

                FormatRemoveOrgConnection(ref organizationCode, ref connectionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{organization_code}/connections/{connection_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{organization_code}/connections/{connection_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization_code%7D", Uri.EscapeDataString(organizationCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bconnection_id%7D", Uri.EscapeDataString(connectionId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<RemoveOrgConnectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RemoveOrgConnectionApiResponse>();
                        RemoveOrgConnectionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new RemoveOrgConnectionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{organization_code}/connections/{connection_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterRemoveOrgConnectionDefaultImplementation(apiResponseLocalVar, organizationCode, connectionId);

                        Events.ExecuteOnRemoveOrgConnection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveOrgConnectionDefaultImplementation(e, "/api/v1/organizations/{organization_code}/connections/{connection_id}", uriBuilderLocalVar.Path, organizationCode, connectionId);
                Events.ExecuteOnErrorRemoveOrgConnection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RemoveOrgConnectionApiResponse"/>
        /// </summary>
        public partial class RemoveOrgConnectionApiResponse : Kinde.Api.Client.ApiResponse, IRemoveOrgConnectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RemoveOrgConnectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RemoveOrgConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RemoveOrgConnectionApiResponse(ILogger<RemoveOrgConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="RemoveOrgConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RemoveOrgConnectionApiResponse(ILogger<RemoveOrgConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRemoveOrganizationUser(ref string orgCode, ref string userId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        private void ValidateRemoveOrganizationUser(string orgCode, string userId)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (userId == null)
                throw new ArgumentNullException(nameof(userId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        private void AfterRemoveOrganizationUserDefaultImplementation(IRemoveOrganizationUserApiResponse apiResponseLocalVar, string orgCode, string userId)
        {
            bool suppressDefaultLog = false;
            AfterRemoveOrganizationUser(ref suppressDefaultLog, apiResponseLocalVar, orgCode, userId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        partial void AfterRemoveOrganizationUser(ref bool suppressDefaultLog, IRemoveOrganizationUserApiResponse apiResponseLocalVar, string orgCode, string userId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        private void OnErrorRemoveOrganizationUserDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRemoveOrganizationUser(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, userId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        partial void OnErrorRemoveOrganizationUser(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId);

        /// <summary>
        /// Remove Organization User Remove user from an organization.  &lt;div&gt;   &lt;code&gt;delete:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveOrganizationUserApiResponse"/>&gt;</returns>
        public async Task<IRemoveOrganizationUserApiResponse?> RemoveOrganizationUserOrDefaultAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveOrganizationUserAsync(orgCode, userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Remove Organization User Remove user from an organization.  &lt;div&gt;   &lt;code&gt;delete:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="userId">The user&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveOrganizationUserApiResponse"/>&gt;</returns>
        public async Task<IRemoveOrganizationUserApiResponse> RemoveOrganizationUserAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRemoveOrganizationUser(orgCode, userId);

                FormatRemoveOrganizationUser(ref orgCode, ref userId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users/{user_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users/{user_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<RemoveOrganizationUserApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RemoveOrganizationUserApiResponse>();
                        RemoveOrganizationUserApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new RemoveOrganizationUserApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users/{user_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterRemoveOrganizationUserDefaultImplementation(apiResponseLocalVar, orgCode, userId);

                        Events.ExecuteOnRemoveOrganizationUser(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveOrganizationUserDefaultImplementation(e, "/api/v1/organizations/{org_code}/users/{user_id}", uriBuilderLocalVar.Path, orgCode, userId);
                Events.ExecuteOnErrorRemoveOrganizationUser(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RemoveOrganizationUserApiResponse"/>
        /// </summary>
        public partial class RemoveOrganizationUserApiResponse : Kinde.Api.Client.ApiResponse, IRemoveOrganizationUserApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RemoveOrganizationUserApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RemoveOrganizationUserApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RemoveOrganizationUserApiResponse(ILogger<RemoveOrganizationUserApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="RemoveOrganizationUserApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RemoveOrganizationUserApiResponse(ILogger<RemoveOrganizationUserApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReplaceOrganizationMFA(ref string orgCode, ReplaceOrganizationMFARequest replaceOrganizationMFARequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="replaceOrganizationMFARequest"></param>
        /// <returns></returns>
        private void ValidateReplaceOrganizationMFA(string orgCode, ReplaceOrganizationMFARequest replaceOrganizationMFARequest)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (replaceOrganizationMFARequest == null)
                throw new ArgumentNullException(nameof(replaceOrganizationMFARequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="replaceOrganizationMFARequest"></param>
        private void AfterReplaceOrganizationMFADefaultImplementation(IReplaceOrganizationMFAApiResponse apiResponseLocalVar, string orgCode, ReplaceOrganizationMFARequest replaceOrganizationMFARequest)
        {
            bool suppressDefaultLog = false;
            AfterReplaceOrganizationMFA(ref suppressDefaultLog, apiResponseLocalVar, orgCode, replaceOrganizationMFARequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="replaceOrganizationMFARequest"></param>
        partial void AfterReplaceOrganizationMFA(ref bool suppressDefaultLog, IReplaceOrganizationMFAApiResponse apiResponseLocalVar, string orgCode, ReplaceOrganizationMFARequest replaceOrganizationMFARequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="replaceOrganizationMFARequest"></param>
        private void OnErrorReplaceOrganizationMFADefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, ReplaceOrganizationMFARequest replaceOrganizationMFARequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReplaceOrganizationMFA(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, replaceOrganizationMFARequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="replaceOrganizationMFARequest"></param>
        partial void OnErrorReplaceOrganizationMFA(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, ReplaceOrganizationMFARequest replaceOrganizationMFARequest);

        /// <summary>
        /// Replace Organization MFA Configuration Replace Organization MFA Configuration.  &lt;div&gt;   &lt;code&gt;update:organization_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="replaceOrganizationMFARequest">MFA details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceOrganizationMFAApiResponse"/>&gt;</returns>
        public async Task<IReplaceOrganizationMFAApiResponse?> ReplaceOrganizationMFAOrDefaultAsync(string orgCode, ReplaceOrganizationMFARequest replaceOrganizationMFARequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReplaceOrganizationMFAAsync(orgCode, replaceOrganizationMFARequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Replace Organization MFA Configuration Replace Organization MFA Configuration.  &lt;div&gt;   &lt;code&gt;update:organization_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="replaceOrganizationMFARequest">MFA details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplaceOrganizationMFAApiResponse"/>&gt;</returns>
        public async Task<IReplaceOrganizationMFAApiResponse> ReplaceOrganizationMFAAsync(string orgCode, ReplaceOrganizationMFARequest replaceOrganizationMFARequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateReplaceOrganizationMFA(orgCode, replaceOrganizationMFARequest);

                FormatReplaceOrganizationMFA(ref orgCode, replaceOrganizationMFARequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/mfa"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/mfa");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));

                    httpRequestMessageLocalVar.Content = (replaceOrganizationMFARequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(replaceOrganizationMFARequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ReplaceOrganizationMFAApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReplaceOrganizationMFAApiResponse>();
                        ReplaceOrganizationMFAApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ReplaceOrganizationMFAApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/mfa", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterReplaceOrganizationMFADefaultImplementation(apiResponseLocalVar, orgCode, replaceOrganizationMFARequest);

                        Events.ExecuteOnReplaceOrganizationMFA(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReplaceOrganizationMFADefaultImplementation(e, "/api/v1/organizations/{org_code}/mfa", uriBuilderLocalVar.Path, orgCode, replaceOrganizationMFARequest);
                Events.ExecuteOnErrorReplaceOrganizationMFA(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReplaceOrganizationMFAApiResponse"/>
        /// </summary>
        public partial class ReplaceOrganizationMFAApiResponse : Kinde.Api.Client.ApiResponse, IReplaceOrganizationMFAApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReplaceOrganizationMFAApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReplaceOrganizationMFAApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReplaceOrganizationMFAApiResponse(ILogger<ReplaceOrganizationMFAApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ReplaceOrganizationMFAApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReplaceOrganizationMFAApiResponse(ILogger<ReplaceOrganizationMFAApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatResetOrgUserMFA(ref string orgCode, ref string userId, ref string factorId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns></returns>
        private void ValidateResetOrgUserMFA(string orgCode, string userId, string factorId)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (userId == null)
                throw new ArgumentNullException(nameof(userId));

            if (factorId == null)
                throw new ArgumentNullException(nameof(factorId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        private void AfterResetOrgUserMFADefaultImplementation(IResetOrgUserMFAApiResponse apiResponseLocalVar, string orgCode, string userId, string factorId)
        {
            bool suppressDefaultLog = false;
            AfterResetOrgUserMFA(ref suppressDefaultLog, apiResponseLocalVar, orgCode, userId, factorId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        partial void AfterResetOrgUserMFA(ref bool suppressDefaultLog, IResetOrgUserMFAApiResponse apiResponseLocalVar, string orgCode, string userId, string factorId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        private void OnErrorResetOrgUserMFADefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, string factorId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorResetOrgUserMFA(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, userId, factorId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        partial void OnErrorResetOrgUserMFA(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId, string factorId);

        /// <summary>
        /// Reset specific organization MFA for a user Reset a specific organization MFA factor for a user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">The identifier for the user</param>
        /// <param name="factorId">The identifier for the MFA factor</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetOrgUserMFAApiResponse"/>&gt;</returns>
        public async Task<IResetOrgUserMFAApiResponse?> ResetOrgUserMFAOrDefaultAsync(string orgCode, string userId, string factorId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ResetOrgUserMFAAsync(orgCode, userId, factorId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Reset specific organization MFA for a user Reset a specific organization MFA factor for a user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">The identifier for the user</param>
        /// <param name="factorId">The identifier for the MFA factor</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetOrgUserMFAApiResponse"/>&gt;</returns>
        public async Task<IResetOrgUserMFAApiResponse> ResetOrgUserMFAAsync(string orgCode, string userId, string factorId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateResetOrgUserMFA(orgCode, userId, factorId);

                FormatResetOrgUserMFA(ref orgCode, ref userId, ref factorId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users/{user_id}/mfa/{factor_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users/{user_id}/mfa/{factor_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfactor_id%7D", Uri.EscapeDataString(factorId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ResetOrgUserMFAApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ResetOrgUserMFAApiResponse>();
                        ResetOrgUserMFAApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ResetOrgUserMFAApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users/{user_id}/mfa/{factor_id}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterResetOrgUserMFADefaultImplementation(apiResponseLocalVar, orgCode, userId, factorId);

                        Events.ExecuteOnResetOrgUserMFA(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResetOrgUserMFADefaultImplementation(e, "/api/v1/organizations/{org_code}/users/{user_id}/mfa/{factor_id}", uriBuilderLocalVar.Path, orgCode, userId, factorId);
                Events.ExecuteOnErrorResetOrgUserMFA(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ResetOrgUserMFAApiResponse"/>
        /// </summary>
        public partial class ResetOrgUserMFAApiResponse : Kinde.Api.Client.ApiResponse, IResetOrgUserMFAApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ResetOrgUserMFAApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ResetOrgUserMFAApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResetOrgUserMFAApiResponse(ILogger<ResetOrgUserMFAApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ResetOrgUserMFAApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResetOrgUserMFAApiResponse(ILogger<ResetOrgUserMFAApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.NotFoundResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.NotFoundResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Kinde.Api.Model.NotFoundResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatResetOrgUserMFAAll(ref string orgCode, ref string userId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        private void ValidateResetOrgUserMFAAll(string orgCode, string userId)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (userId == null)
                throw new ArgumentNullException(nameof(userId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        private void AfterResetOrgUserMFAAllDefaultImplementation(IResetOrgUserMFAAllApiResponse apiResponseLocalVar, string orgCode, string userId)
        {
            bool suppressDefaultLog = false;
            AfterResetOrgUserMFAAll(ref suppressDefaultLog, apiResponseLocalVar, orgCode, userId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        partial void AfterResetOrgUserMFAAll(ref bool suppressDefaultLog, IResetOrgUserMFAAllApiResponse apiResponseLocalVar, string orgCode, string userId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        private void OnErrorResetOrgUserMFAAllDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorResetOrgUserMFAAll(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, userId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="userId"></param>
        partial void OnErrorResetOrgUserMFAAll(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string userId);

        /// <summary>
        /// Reset all organization MFA for a user Reset all organization MFA factors for a user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">The identifier for the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetOrgUserMFAAllApiResponse"/>&gt;</returns>
        public async Task<IResetOrgUserMFAAllApiResponse?> ResetOrgUserMFAAllOrDefaultAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ResetOrgUserMFAAllAsync(orgCode, userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Reset all organization MFA for a user Reset all organization MFA factors for a user.  &lt;div&gt;   &lt;code&gt;delete:organization_user_mfa&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="userId">The identifier for the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetOrgUserMFAAllApiResponse"/>&gt;</returns>
        public async Task<IResetOrgUserMFAAllApiResponse> ResetOrgUserMFAAllAsync(string orgCode, string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateResetOrgUserMFAAll(orgCode, userId);

                FormatResetOrgUserMFAAll(ref orgCode, ref userId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users/{user_id}/mfa"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users/{user_id}/mfa");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<ResetOrgUserMFAAllApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ResetOrgUserMFAAllApiResponse>();
                        ResetOrgUserMFAAllApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new ResetOrgUserMFAAllApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users/{user_id}/mfa", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterResetOrgUserMFAAllDefaultImplementation(apiResponseLocalVar, orgCode, userId);

                        Events.ExecuteOnResetOrgUserMFAAll(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResetOrgUserMFAAllDefaultImplementation(e, "/api/v1/organizations/{org_code}/users/{user_id}/mfa", uriBuilderLocalVar.Path, orgCode, userId);
                Events.ExecuteOnErrorResetOrgUserMFAAll(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ResetOrgUserMFAAllApiResponse"/>
        /// </summary>
        public partial class ResetOrgUserMFAAllApiResponse : Kinde.Api.Client.ApiResponse, IResetOrgUserMFAAllApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ResetOrgUserMFAAllApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ResetOrgUserMFAAllApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResetOrgUserMFAAllApiResponse(ILogger<ResetOrgUserMFAAllApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="ResetOrgUserMFAAllApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResetOrgUserMFAAllApiResponse(ILogger<ResetOrgUserMFAAllApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.NotFoundResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.NotFoundResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Kinde.Api.Model.NotFoundResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateOrganization(ref string orgCode, ref Option<string?> expand, Option<UpdateOrganizationRequest> updateOrganizationRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationRequest"></param>
        /// <returns></returns>
        private void ValidateUpdateOrganization(string orgCode, Option<UpdateOrganizationRequest> updateOrganizationRequest)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (updateOrganizationRequest.IsSet && updateOrganizationRequest.Value == null)
                throw new ArgumentNullException(nameof(updateOrganizationRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="expand"></param>
        /// <param name="updateOrganizationRequest"></param>
        private void AfterUpdateOrganizationDefaultImplementation(IUpdateOrganizationApiResponse apiResponseLocalVar, string orgCode, Option<string?> expand, Option<UpdateOrganizationRequest> updateOrganizationRequest)
        {
            bool suppressDefaultLog = false;
            AfterUpdateOrganization(ref suppressDefaultLog, apiResponseLocalVar, orgCode, expand, updateOrganizationRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="expand"></param>
        /// <param name="updateOrganizationRequest"></param>
        partial void AfterUpdateOrganization(ref bool suppressDefaultLog, IUpdateOrganizationApiResponse apiResponseLocalVar, string orgCode, Option<string?> expand, Option<UpdateOrganizationRequest> updateOrganizationRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="expand"></param>
        /// <param name="updateOrganizationRequest"></param>
        private void OnErrorUpdateOrganizationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, Option<string?> expand, Option<UpdateOrganizationRequest> updateOrganizationRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateOrganization(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, expand, updateOrganizationRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="expand"></param>
        /// <param name="updateOrganizationRequest"></param>
        partial void OnErrorUpdateOrganization(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, Option<string?> expand, Option<UpdateOrganizationRequest> updateOrganizationRequest);

        /// <summary>
        /// Update Organization Update an organization.  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="expand">Specify additional data to retrieve. Use \&quot;billing\&quot;. (optional)</param>
        /// <param name="updateOrganizationRequest">Organization details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationApiResponse"/>&gt;</returns>
        public async Task<IUpdateOrganizationApiResponse?> UpdateOrganizationOrDefaultAsync(string orgCode, Option<string?> expand = default, Option<UpdateOrganizationRequest> updateOrganizationRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateOrganizationAsync(orgCode, expand, updateOrganizationRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Organization Update an organization.  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization.</param>
        /// <param name="expand">Specify additional data to retrieve. Use \&quot;billing\&quot;. (optional)</param>
        /// <param name="updateOrganizationRequest">Organization details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationApiResponse"/>&gt;</returns>
        public async Task<IUpdateOrganizationApiResponse> UpdateOrganizationAsync(string orgCode, Option<string?> expand = default, Option<UpdateOrganizationRequest> updateOrganizationRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateOrganization(orgCode, updateOrganizationRequest);

                FormatUpdateOrganization(ref orgCode, ref expand, updateOrganizationRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organization/{org_code}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organization/{org_code}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (expand.IsSet)
                        parseQueryStringLocalVar["expand"] = ClientUtils.ParameterToString(expand.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (updateOrganizationRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (updateOrganizationRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateOrganizationRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<UpdateOrganizationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateOrganizationApiResponse>();
                        UpdateOrganizationApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new UpdateOrganizationApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organization/{org_code}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterUpdateOrganizationDefaultImplementation(apiResponseLocalVar, orgCode, expand, updateOrganizationRequest);

                        Events.ExecuteOnUpdateOrganization(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateOrganizationDefaultImplementation(e, "/api/v1/organization/{org_code}", uriBuilderLocalVar.Path, orgCode, expand, updateOrganizationRequest);
                Events.ExecuteOnErrorUpdateOrganization(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateOrganizationApiResponse"/>
        /// </summary>
        public partial class UpdateOrganizationApiResponse : Kinde.Api.Client.ApiResponse, IUpdateOrganizationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateOrganizationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateOrganizationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOrganizationApiResponse(ILogger<UpdateOrganizationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="UpdateOrganizationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOrganizationApiResponse(ILogger<UpdateOrganizationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateOrganizationFeatureFlagOverride(ref string orgCode, ref string featureFlagKey, ref string value);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="featureFlagKey"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        private void ValidateUpdateOrganizationFeatureFlagOverride(string orgCode, string featureFlagKey, string value)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (featureFlagKey == null)
                throw new ArgumentNullException(nameof(featureFlagKey));

            if (value == null)
                throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="featureFlagKey"></param>
        /// <param name="value"></param>
        private void AfterUpdateOrganizationFeatureFlagOverrideDefaultImplementation(IUpdateOrganizationFeatureFlagOverrideApiResponse apiResponseLocalVar, string orgCode, string featureFlagKey, string value)
        {
            bool suppressDefaultLog = false;
            AfterUpdateOrganizationFeatureFlagOverride(ref suppressDefaultLog, apiResponseLocalVar, orgCode, featureFlagKey, value);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="featureFlagKey"></param>
        /// <param name="value"></param>
        partial void AfterUpdateOrganizationFeatureFlagOverride(ref bool suppressDefaultLog, IUpdateOrganizationFeatureFlagOverrideApiResponse apiResponseLocalVar, string orgCode, string featureFlagKey, string value);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="featureFlagKey"></param>
        /// <param name="value"></param>
        private void OnErrorUpdateOrganizationFeatureFlagOverrideDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string featureFlagKey, string value)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateOrganizationFeatureFlagOverride(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, featureFlagKey, value);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="featureFlagKey"></param>
        /// <param name="value"></param>
        partial void OnErrorUpdateOrganizationFeatureFlagOverride(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string featureFlagKey, string value);

        /// <summary>
        /// Update Organization Feature Flag Override Update organization feature flag override.  &lt;div&gt;   &lt;code&gt;update:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="featureFlagKey">The identifier for the feature flag</param>
        /// <param name="value">Override value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationFeatureFlagOverrideApiResponse"/>&gt;</returns>
        public async Task<IUpdateOrganizationFeatureFlagOverrideApiResponse?> UpdateOrganizationFeatureFlagOverrideOrDefaultAsync(string orgCode, string featureFlagKey, string value, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateOrganizationFeatureFlagOverrideAsync(orgCode, featureFlagKey, value, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Organization Feature Flag Override Update organization feature flag override.  &lt;div&gt;   &lt;code&gt;update:organization_feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="featureFlagKey">The identifier for the feature flag</param>
        /// <param name="value">Override value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationFeatureFlagOverrideApiResponse"/>&gt;</returns>
        public async Task<IUpdateOrganizationFeatureFlagOverrideApiResponse> UpdateOrganizationFeatureFlagOverrideAsync(string orgCode, string featureFlagKey, string value, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateOrganizationFeatureFlagOverride(orgCode, featureFlagKey, value);

                FormatUpdateOrganizationFeatureFlagOverride(ref orgCode, ref featureFlagKey, ref value);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfeature_flag_key%7D", Uri.EscapeDataString(featureFlagKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["value"] = ClientUtils.ParameterToString(value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<UpdateOrganizationFeatureFlagOverrideApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateOrganizationFeatureFlagOverrideApiResponse>();
                        UpdateOrganizationFeatureFlagOverrideApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new UpdateOrganizationFeatureFlagOverrideApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterUpdateOrganizationFeatureFlagOverrideDefaultImplementation(apiResponseLocalVar, orgCode, featureFlagKey, value);

                        Events.ExecuteOnUpdateOrganizationFeatureFlagOverride(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateOrganizationFeatureFlagOverrideDefaultImplementation(e, "/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}", uriBuilderLocalVar.Path, orgCode, featureFlagKey, value);
                Events.ExecuteOnErrorUpdateOrganizationFeatureFlagOverride(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateOrganizationFeatureFlagOverrideApiResponse"/>
        /// </summary>
        public partial class UpdateOrganizationFeatureFlagOverrideApiResponse : Kinde.Api.Client.ApiResponse, IUpdateOrganizationFeatureFlagOverrideApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateOrganizationFeatureFlagOverrideApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateOrganizationFeatureFlagOverrideApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOrganizationFeatureFlagOverrideApiResponse(ILogger<UpdateOrganizationFeatureFlagOverrideApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="UpdateOrganizationFeatureFlagOverrideApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOrganizationFeatureFlagOverrideApiResponse(ILogger<UpdateOrganizationFeatureFlagOverrideApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateOrganizationProperties(ref string orgCode, UpdateOrganizationPropertiesRequest updateOrganizationPropertiesRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationPropertiesRequest"></param>
        /// <returns></returns>
        private void ValidateUpdateOrganizationProperties(string orgCode, UpdateOrganizationPropertiesRequest updateOrganizationPropertiesRequest)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (updateOrganizationPropertiesRequest == null)
                throw new ArgumentNullException(nameof(updateOrganizationPropertiesRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationPropertiesRequest"></param>
        private void AfterUpdateOrganizationPropertiesDefaultImplementation(IUpdateOrganizationPropertiesApiResponse apiResponseLocalVar, string orgCode, UpdateOrganizationPropertiesRequest updateOrganizationPropertiesRequest)
        {
            bool suppressDefaultLog = false;
            AfterUpdateOrganizationProperties(ref suppressDefaultLog, apiResponseLocalVar, orgCode, updateOrganizationPropertiesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationPropertiesRequest"></param>
        partial void AfterUpdateOrganizationProperties(ref bool suppressDefaultLog, IUpdateOrganizationPropertiesApiResponse apiResponseLocalVar, string orgCode, UpdateOrganizationPropertiesRequest updateOrganizationPropertiesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationPropertiesRequest"></param>
        private void OnErrorUpdateOrganizationPropertiesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, UpdateOrganizationPropertiesRequest updateOrganizationPropertiesRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateOrganizationProperties(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, updateOrganizationPropertiesRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationPropertiesRequest"></param>
        partial void OnErrorUpdateOrganizationProperties(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, UpdateOrganizationPropertiesRequest updateOrganizationPropertiesRequest);

        /// <summary>
        /// Update Organization Property values Update organization property values.  &lt;div&gt;   &lt;code&gt;update:organization_properties&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="updateOrganizationPropertiesRequest">Properties to update.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationPropertiesApiResponse"/>&gt;</returns>
        public async Task<IUpdateOrganizationPropertiesApiResponse?> UpdateOrganizationPropertiesOrDefaultAsync(string orgCode, UpdateOrganizationPropertiesRequest updateOrganizationPropertiesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateOrganizationPropertiesAsync(orgCode, updateOrganizationPropertiesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Organization Property values Update organization property values.  &lt;div&gt;   &lt;code&gt;update:organization_properties&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="updateOrganizationPropertiesRequest">Properties to update.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationPropertiesApiResponse"/>&gt;</returns>
        public async Task<IUpdateOrganizationPropertiesApiResponse> UpdateOrganizationPropertiesAsync(string orgCode, UpdateOrganizationPropertiesRequest updateOrganizationPropertiesRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateOrganizationProperties(orgCode, updateOrganizationPropertiesRequest);

                FormatUpdateOrganizationProperties(ref orgCode, updateOrganizationPropertiesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/properties"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/properties");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));

                    httpRequestMessageLocalVar.Content = (updateOrganizationPropertiesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateOrganizationPropertiesRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<UpdateOrganizationPropertiesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateOrganizationPropertiesApiResponse>();
                        UpdateOrganizationPropertiesApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new UpdateOrganizationPropertiesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/properties", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterUpdateOrganizationPropertiesDefaultImplementation(apiResponseLocalVar, orgCode, updateOrganizationPropertiesRequest);

                        Events.ExecuteOnUpdateOrganizationProperties(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateOrganizationPropertiesDefaultImplementation(e, "/api/v1/organizations/{org_code}/properties", uriBuilderLocalVar.Path, orgCode, updateOrganizationPropertiesRequest);
                Events.ExecuteOnErrorUpdateOrganizationProperties(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateOrganizationPropertiesApiResponse"/>
        /// </summary>
        public partial class UpdateOrganizationPropertiesApiResponse : Kinde.Api.Client.ApiResponse, IUpdateOrganizationPropertiesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateOrganizationPropertiesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateOrganizationPropertiesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOrganizationPropertiesApiResponse(ILogger<UpdateOrganizationPropertiesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="UpdateOrganizationPropertiesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOrganizationPropertiesApiResponse(ILogger<UpdateOrganizationPropertiesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateOrganizationProperty(ref string orgCode, ref string propertyKey, ref string value);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="propertyKey"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        private void ValidateUpdateOrganizationProperty(string orgCode, string propertyKey, string value)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (propertyKey == null)
                throw new ArgumentNullException(nameof(propertyKey));

            if (value == null)
                throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="propertyKey"></param>
        /// <param name="value"></param>
        private void AfterUpdateOrganizationPropertyDefaultImplementation(IUpdateOrganizationPropertyApiResponse apiResponseLocalVar, string orgCode, string propertyKey, string value)
        {
            bool suppressDefaultLog = false;
            AfterUpdateOrganizationProperty(ref suppressDefaultLog, apiResponseLocalVar, orgCode, propertyKey, value);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="propertyKey"></param>
        /// <param name="value"></param>
        partial void AfterUpdateOrganizationProperty(ref bool suppressDefaultLog, IUpdateOrganizationPropertyApiResponse apiResponseLocalVar, string orgCode, string propertyKey, string value);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="propertyKey"></param>
        /// <param name="value"></param>
        private void OnErrorUpdateOrganizationPropertyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string propertyKey, string value)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateOrganizationProperty(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, propertyKey, value);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="propertyKey"></param>
        /// <param name="value"></param>
        partial void OnErrorUpdateOrganizationProperty(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, string propertyKey, string value);

        /// <summary>
        /// Update Organization Property value Update organization property value.  &lt;div&gt;   &lt;code&gt;update:organization_properties&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="propertyKey">The identifier for the property</param>
        /// <param name="value">The new property value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationPropertyApiResponse"/>&gt;</returns>
        public async Task<IUpdateOrganizationPropertyApiResponse?> UpdateOrganizationPropertyOrDefaultAsync(string orgCode, string propertyKey, string value, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateOrganizationPropertyAsync(orgCode, propertyKey, value, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Organization Property value Update organization property value.  &lt;div&gt;   &lt;code&gt;update:organization_properties&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The identifier for the organization</param>
        /// <param name="propertyKey">The identifier for the property</param>
        /// <param name="value">The new property value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationPropertyApiResponse"/>&gt;</returns>
        public async Task<IUpdateOrganizationPropertyApiResponse> UpdateOrganizationPropertyAsync(string orgCode, string propertyKey, string value, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateOrganizationProperty(orgCode, propertyKey, value);

                FormatUpdateOrganizationProperty(ref orgCode, ref propertyKey, ref value);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/properties/{property_key}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/properties/{property_key}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bproperty_key%7D", Uri.EscapeDataString(propertyKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["value"] = ClientUtils.ParameterToString(value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<UpdateOrganizationPropertyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateOrganizationPropertyApiResponse>();
                        UpdateOrganizationPropertyApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new UpdateOrganizationPropertyApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/properties/{property_key}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterUpdateOrganizationPropertyDefaultImplementation(apiResponseLocalVar, orgCode, propertyKey, value);

                        Events.ExecuteOnUpdateOrganizationProperty(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateOrganizationPropertyDefaultImplementation(e, "/api/v1/organizations/{org_code}/properties/{property_key}", uriBuilderLocalVar.Path, orgCode, propertyKey, value);
                Events.ExecuteOnErrorUpdateOrganizationProperty(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateOrganizationPropertyApiResponse"/>
        /// </summary>
        public partial class UpdateOrganizationPropertyApiResponse : Kinde.Api.Client.ApiResponse, IUpdateOrganizationPropertyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateOrganizationPropertyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateOrganizationPropertyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOrganizationPropertyApiResponse(ILogger<UpdateOrganizationPropertyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="UpdateOrganizationPropertyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOrganizationPropertyApiResponse(ILogger<UpdateOrganizationPropertyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateOrganizationSessions(ref string orgCode, UpdateOrganizationSessionsRequest updateOrganizationSessionsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationSessionsRequest"></param>
        /// <returns></returns>
        private void ValidateUpdateOrganizationSessions(string orgCode, UpdateOrganizationSessionsRequest updateOrganizationSessionsRequest)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (updateOrganizationSessionsRequest == null)
                throw new ArgumentNullException(nameof(updateOrganizationSessionsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationSessionsRequest"></param>
        private void AfterUpdateOrganizationSessionsDefaultImplementation(IUpdateOrganizationSessionsApiResponse apiResponseLocalVar, string orgCode, UpdateOrganizationSessionsRequest updateOrganizationSessionsRequest)
        {
            bool suppressDefaultLog = false;
            AfterUpdateOrganizationSessions(ref suppressDefaultLog, apiResponseLocalVar, orgCode, updateOrganizationSessionsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationSessionsRequest"></param>
        partial void AfterUpdateOrganizationSessions(ref bool suppressDefaultLog, IUpdateOrganizationSessionsApiResponse apiResponseLocalVar, string orgCode, UpdateOrganizationSessionsRequest updateOrganizationSessionsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationSessionsRequest"></param>
        private void OnErrorUpdateOrganizationSessionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, UpdateOrganizationSessionsRequest updateOrganizationSessionsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateOrganizationSessions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, updateOrganizationSessionsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationSessionsRequest"></param>
        partial void OnErrorUpdateOrganizationSessions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, UpdateOrganizationSessionsRequest updateOrganizationSessionsRequest);

        /// <summary>
        /// Update organization session configuration Update the organization&#39;s session configuration.  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="updateOrganizationSessionsRequest">Organization session configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationSessionsApiResponse"/>&gt;</returns>
        public async Task<IUpdateOrganizationSessionsApiResponse?> UpdateOrganizationSessionsOrDefaultAsync(string orgCode, UpdateOrganizationSessionsRequest updateOrganizationSessionsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateOrganizationSessionsAsync(orgCode, updateOrganizationSessionsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update organization session configuration Update the organization&#39;s session configuration.  &lt;div&gt;   &lt;code&gt;update:organizations&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="updateOrganizationSessionsRequest">Organization session configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationSessionsApiResponse"/>&gt;</returns>
        public async Task<IUpdateOrganizationSessionsApiResponse> UpdateOrganizationSessionsAsync(string orgCode, UpdateOrganizationSessionsRequest updateOrganizationSessionsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateOrganizationSessions(orgCode, updateOrganizationSessionsRequest);

                FormatUpdateOrganizationSessions(ref orgCode, updateOrganizationSessionsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/sessions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/sessions");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));

                    httpRequestMessageLocalVar.Content = (updateOrganizationSessionsRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateOrganizationSessionsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<UpdateOrganizationSessionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateOrganizationSessionsApiResponse>();
                        UpdateOrganizationSessionsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new UpdateOrganizationSessionsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/sessions", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterUpdateOrganizationSessionsDefaultImplementation(apiResponseLocalVar, orgCode, updateOrganizationSessionsRequest);

                        Events.ExecuteOnUpdateOrganizationSessions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateOrganizationSessionsDefaultImplementation(e, "/api/v1/organizations/{org_code}/sessions", uriBuilderLocalVar.Path, orgCode, updateOrganizationSessionsRequest);
                Events.ExecuteOnErrorUpdateOrganizationSessions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateOrganizationSessionsApiResponse"/>
        /// </summary>
        public partial class UpdateOrganizationSessionsApiResponse : Kinde.Api.Client.ApiResponse, IUpdateOrganizationSessionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateOrganizationSessionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateOrganizationSessionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOrganizationSessionsApiResponse(ILogger<UpdateOrganizationSessionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="UpdateOrganizationSessionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOrganizationSessionsApiResponse(ILogger<UpdateOrganizationSessionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateOrganizationUsers(ref string orgCode, Option<UpdateOrganizationUsersRequest> updateOrganizationUsersRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationUsersRequest"></param>
        /// <returns></returns>
        private void ValidateUpdateOrganizationUsers(string orgCode, Option<UpdateOrganizationUsersRequest> updateOrganizationUsersRequest)
        {
            if (orgCode == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (updateOrganizationUsersRequest.IsSet && updateOrganizationUsersRequest.Value == null)
                throw new ArgumentNullException(nameof(updateOrganizationUsersRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationUsersRequest"></param>
        private void AfterUpdateOrganizationUsersDefaultImplementation(IUpdateOrganizationUsersApiResponse apiResponseLocalVar, string orgCode, Option<UpdateOrganizationUsersRequest> updateOrganizationUsersRequest)
        {
            bool suppressDefaultLog = false;
            AfterUpdateOrganizationUsers(ref suppressDefaultLog, apiResponseLocalVar, orgCode, updateOrganizationUsersRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationUsersRequest"></param>
        partial void AfterUpdateOrganizationUsers(ref bool suppressDefaultLog, IUpdateOrganizationUsersApiResponse apiResponseLocalVar, string orgCode, Option<UpdateOrganizationUsersRequest> updateOrganizationUsersRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationUsersRequest"></param>
        private void OnErrorUpdateOrganizationUsersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, Option<UpdateOrganizationUsersRequest> updateOrganizationUsersRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateOrganizationUsers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, orgCode, updateOrganizationUsersRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="orgCode"></param>
        /// <param name="updateOrganizationUsersRequest"></param>
        partial void OnErrorUpdateOrganizationUsers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string orgCode, Option<UpdateOrganizationUsersRequest> updateOrganizationUsersRequest);

        /// <summary>
        /// Update Organization Users Update users that belong to an organization.  &lt;div&gt;   &lt;code&gt;update:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="updateOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationUsersApiResponse"/>&gt;</returns>
        public async Task<IUpdateOrganizationUsersApiResponse?> UpdateOrganizationUsersOrDefaultAsync(string orgCode, Option<UpdateOrganizationUsersRequest> updateOrganizationUsersRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateOrganizationUsersAsync(orgCode, updateOrganizationUsersRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Organization Users Update users that belong to an organization.  &lt;div&gt;   &lt;code&gt;update:organization_users&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgCode">The organization&#39;s code.</param>
        /// <param name="updateOrganizationUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOrganizationUsersApiResponse"/>&gt;</returns>
        public async Task<IUpdateOrganizationUsersApiResponse> UpdateOrganizationUsersAsync(string orgCode, Option<UpdateOrganizationUsersRequest> updateOrganizationUsersRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateOrganizationUsers(orgCode, updateOrganizationUsersRequest);

                FormatUpdateOrganizationUsers(ref orgCode, updateOrganizationUsersRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/organizations/{org_code}/users"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/organizations/{org_code}/users");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borg_code%7D", Uri.EscapeDataString(orgCode.ToString()));

                    if (updateOrganizationUsersRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (updateOrganizationUsersRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateOrganizationUsersRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<UpdateOrganizationUsersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateOrganizationUsersApiResponse>();
                        UpdateOrganizationUsersApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                                apiResponseLocalVar = new UpdateOrganizationUsersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/organizations/{org_code}/users", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterUpdateOrganizationUsersDefaultImplementation(apiResponseLocalVar, orgCode, updateOrganizationUsersRequest);

                        Events.ExecuteOnUpdateOrganizationUsers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateOrganizationUsersDefaultImplementation(e, "/api/v1/organizations/{org_code}/users", uriBuilderLocalVar.Path, orgCode, updateOrganizationUsersRequest);
                Events.ExecuteOnErrorUpdateOrganizationUsers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateOrganizationUsersApiResponse"/>
        /// </summary>
        public partial class UpdateOrganizationUsersApiResponse : Kinde.Api.Client.ApiResponse, IUpdateOrganizationUsersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateOrganizationUsersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateOrganizationUsersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOrganizationUsersApiResponse(ILogger<UpdateOrganizationUsersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="UpdateOrganizationUsersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOrganizationUsersApiResponse(ILogger<UpdateOrganizationUsersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.UpdateOrganizationUsersResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.UpdateOrganizationUsersResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Kinde.Api.Model.UpdateOrganizationUsersResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests(out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
