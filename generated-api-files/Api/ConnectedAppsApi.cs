// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Kinde.Api.Client;
using Kinde.Api.Model;
using System.Diagnostics.CodeAnalysis;

namespace Kinde.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IConnectedAppsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ConnectedAppsApiEvents Events { get; }

        /// <summary>
        /// Get Connected App URL
        /// </summary>
        /// <remarks>
        /// Get a URL that authenticates and authorizes a user to a third-party connected app.  &lt;div&gt;   &lt;code&gt;read:connected_apps&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyCodeRef">The unique key code reference of the connected app to authenticate against.</param>
        /// <param name="userId">The id of the user that needs to authenticate to the third-party connected app. (optional)</param>
        /// <param name="orgCode">The code of the Kinde organization that needs to authenticate to the third-party connected app. (optional)</param>
        /// <param name="overrideCallbackUrl">A URL that overrides the default callback URL setup in your connected app configuration (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectedAppAuthUrlApiResponse"/>&gt;</returns>
        Task<IGetConnectedAppAuthUrlApiResponse> GetConnectedAppAuthUrlAsync(string keyCodeRef, Option<string> userId = default, Option<string> orgCode = default, Option<string> overrideCallbackUrl = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Connected App URL
        /// </summary>
        /// <remarks>
        /// Get a URL that authenticates and authorizes a user to a third-party connected app.  &lt;div&gt;   &lt;code&gt;read:connected_apps&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="keyCodeRef">The unique key code reference of the connected app to authenticate against.</param>
        /// <param name="userId">The id of the user that needs to authenticate to the third-party connected app. (optional)</param>
        /// <param name="orgCode">The code of the Kinde organization that needs to authenticate to the third-party connected app. (optional)</param>
        /// <param name="overrideCallbackUrl">A URL that overrides the default callback URL setup in your connected app configuration (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectedAppAuthUrlApiResponse"/>?&gt;</returns>
        Task<IGetConnectedAppAuthUrlApiResponse?> GetConnectedAppAuthUrlOrDefaultAsync(string keyCodeRef, Option<string> userId = default, Option<string> orgCode = default, Option<string> overrideCallbackUrl = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Connected App Token
        /// </summary>
        /// <remarks>
        /// Get an access token that can be used to call the third-party provider linked to the connected app.  &lt;div&gt;   &lt;code&gt;read:connected_apps&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The unique sesssion id representing the login session of a user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectedAppTokenApiResponse"/>&gt;</returns>
        Task<IGetConnectedAppTokenApiResponse> GetConnectedAppTokenAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Connected App Token
        /// </summary>
        /// <remarks>
        /// Get an access token that can be used to call the third-party provider linked to the connected app.  &lt;div&gt;   &lt;code&gt;read:connected_apps&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="sessionId">The unique sesssion id representing the login session of a user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectedAppTokenApiResponse"/>?&gt;</returns>
        Task<IGetConnectedAppTokenApiResponse?> GetConnectedAppTokenOrDefaultAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke Connected App Token
        /// </summary>
        /// <remarks>
        /// Revoke the tokens linked to the connected app session.  &lt;div&gt;   &lt;code&gt;create:connected_apps&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The unique sesssion id representing the login session of a user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeConnectedAppTokenApiResponse"/>&gt;</returns>
        Task<IRevokeConnectedAppTokenApiResponse> RevokeConnectedAppTokenAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke Connected App Token
        /// </summary>
        /// <remarks>
        /// Revoke the tokens linked to the connected app session.  &lt;div&gt;   &lt;code&gt;create:connected_apps&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="sessionId">The unique sesssion id representing the login session of a user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeConnectedAppTokenApiResponse"/>?&gt;</returns>
        Task<IRevokeConnectedAppTokenApiResponse?> RevokeConnectedAppTokenOrDefaultAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetConnectedAppAuthUrlApiResponse"/>
    /// </summary>
    public interface IGetConnectedAppAuthUrlApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.ConnectedAppsAuthUrl?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, INotFound<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IGetConnectedAppTokenApiResponse"/>
    /// </summary>
    public interface IGetConnectedAppTokenApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.ConnectedAppsAccessToken?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IRevokeConnectedAppTokenApiResponse"/>
    /// </summary>
    public interface IRevokeConnectedAppTokenApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>, IForbidden<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ConnectedAppsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetConnectedAppAuthUrl;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetConnectedAppAuthUrl;

        internal void ExecuteOnGetConnectedAppAuthUrl(ConnectedAppsApi.GetConnectedAppAuthUrlApiResponse apiResponse)
        {
            OnGetConnectedAppAuthUrl?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConnectedAppAuthUrl(Exception exception)
        {
            OnErrorGetConnectedAppAuthUrl?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetConnectedAppToken;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetConnectedAppToken;

        internal void ExecuteOnGetConnectedAppToken(ConnectedAppsApi.GetConnectedAppTokenApiResponse apiResponse)
        {
            OnGetConnectedAppToken?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConnectedAppToken(Exception exception)
        {
            OnErrorGetConnectedAppToken?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRevokeConnectedAppToken;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRevokeConnectedAppToken;

        internal void ExecuteOnRevokeConnectedAppToken(ConnectedAppsApi.RevokeConnectedAppTokenApiResponse apiResponse)
        {
            OnRevokeConnectedAppToken?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRevokeConnectedAppToken(Exception exception)
        {
            OnErrorRevokeConnectedAppToken?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ConnectedAppsApi : IConnectedAppsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ConnectedAppsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ConnectedAppsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectedAppsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectedAppsApi(ILogger<ConnectedAppsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ConnectedAppsApiEvents connectedAppsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ConnectedAppsApi>();
            HttpClient = httpClient;
            Events = connectedAppsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatGetConnectedAppAuthUrl(ref string keyCodeRef, ref Option<string> userId, ref Option<string> orgCode, ref Option<string> overrideCallbackUrl);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="keyCodeRef"></param>
        /// <param name="userId"></param>
        /// <param name="orgCode"></param>
        /// <param name="overrideCallbackUrl"></param>
        /// <returns></returns>
        private void ValidateGetConnectedAppAuthUrl(string keyCodeRef, Option<string> userId, Option<string> orgCode, Option<string> overrideCallbackUrl)
        {
            if (keyCodeRef == null)
                throw new ArgumentNullException(nameof(keyCodeRef));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId));

            if (orgCode.IsSet && orgCode.Value == null)
                throw new ArgumentNullException(nameof(orgCode));

            if (overrideCallbackUrl.IsSet && overrideCallbackUrl.Value == null)
                throw new ArgumentNullException(nameof(overrideCallbackUrl));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="keyCodeRef"></param>
        /// <param name="userId"></param>
        /// <param name="orgCode"></param>
        /// <param name="overrideCallbackUrl"></param>
        private void AfterGetConnectedAppAuthUrlDefaultImplementation(IGetConnectedAppAuthUrlApiResponse apiResponseLocalVar, string keyCodeRef, Option<string> userId, Option<string> orgCode, Option<string> overrideCallbackUrl)
        {
            bool suppressDefaultLog = false;
            AfterGetConnectedAppAuthUrl(ref suppressDefaultLog, apiResponseLocalVar, keyCodeRef, userId, orgCode, overrideCallbackUrl);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="keyCodeRef"></param>
        /// <param name="userId"></param>
        /// <param name="orgCode"></param>
        /// <param name="overrideCallbackUrl"></param>
        partial void AfterGetConnectedAppAuthUrl(ref bool suppressDefaultLog, IGetConnectedAppAuthUrlApiResponse apiResponseLocalVar, string keyCodeRef, Option<string> userId, Option<string> orgCode, Option<string> overrideCallbackUrl);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="keyCodeRef"></param>
        /// <param name="userId"></param>
        /// <param name="orgCode"></param>
        /// <param name="overrideCallbackUrl"></param>
        private void OnErrorGetConnectedAppAuthUrlDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string keyCodeRef, Option<string> userId, Option<string> orgCode, Option<string> overrideCallbackUrl)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConnectedAppAuthUrl(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, keyCodeRef, userId, orgCode, overrideCallbackUrl);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="keyCodeRef"></param>
        /// <param name="userId"></param>
        /// <param name="orgCode"></param>
        /// <param name="overrideCallbackUrl"></param>
        partial void OnErrorGetConnectedAppAuthUrl(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string keyCodeRef, Option<string> userId, Option<string> orgCode, Option<string> overrideCallbackUrl);

        /// <summary>
        /// Get Connected App URL Get a URL that authenticates and authorizes a user to a third-party connected app.  &lt;div&gt;   &lt;code&gt;read:connected_apps&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="keyCodeRef">The unique key code reference of the connected app to authenticate against.</param>
        /// <param name="userId">The id of the user that needs to authenticate to the third-party connected app. (optional)</param>
        /// <param name="orgCode">The code of the Kinde organization that needs to authenticate to the third-party connected app. (optional)</param>
        /// <param name="overrideCallbackUrl">A URL that overrides the default callback URL setup in your connected app configuration (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectedAppAuthUrlApiResponse"/>&gt;</returns>
        public async Task<IGetConnectedAppAuthUrlApiResponse?> GetConnectedAppAuthUrlOrDefaultAsync(string keyCodeRef, Option<string> userId = default, Option<string> orgCode = default, Option<string> overrideCallbackUrl = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConnectedAppAuthUrlAsync(keyCodeRef, userId, orgCode, overrideCallbackUrl, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Connected App URL Get a URL that authenticates and authorizes a user to a third-party connected app.  &lt;div&gt;   &lt;code&gt;read:connected_apps&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyCodeRef">The unique key code reference of the connected app to authenticate against.</param>
        /// <param name="userId">The id of the user that needs to authenticate to the third-party connected app. (optional)</param>
        /// <param name="orgCode">The code of the Kinde organization that needs to authenticate to the third-party connected app. (optional)</param>
        /// <param name="overrideCallbackUrl">A URL that overrides the default callback URL setup in your connected app configuration (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectedAppAuthUrlApiResponse"/>&gt;</returns>
        public async Task<IGetConnectedAppAuthUrlApiResponse> GetConnectedAppAuthUrlAsync(string keyCodeRef, Option<string> userId = default, Option<string> orgCode = default, Option<string> overrideCallbackUrl = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetConnectedAppAuthUrl(keyCodeRef, userId, orgCode, overrideCallbackUrl);

                FormatGetConnectedAppAuthUrl(ref keyCodeRef, ref userId, ref orgCode, ref overrideCallbackUrl);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/connected_apps/auth_url"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/connected_apps/auth_url");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["key_code_ref"] = ClientUtils.ParameterToString(keyCodeRef);

                    if (userId.IsSet)
                        parseQueryStringLocalVar["user_id"] = ClientUtils.ParameterToString(userId.Value);

                    if (orgCode.IsSet)
                        parseQueryStringLocalVar["org_code"] = ClientUtils.ParameterToString(orgCode.Value);

                    if (overrideCallbackUrl.IsSet)
                        parseQueryStringLocalVar["override_callback_url"] = ClientUtils.ParameterToString(overrideCallbackUrl.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetConnectedAppAuthUrlApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConnectedAppAuthUrlApiResponse>();
                        GetConnectedAppAuthUrlApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/connected_apps/auth_url", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetConnectedAppAuthUrlDefaultImplementation(apiResponseLocalVar, keyCodeRef, userId, orgCode, overrideCallbackUrl);

                        Events.ExecuteOnGetConnectedAppAuthUrl(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConnectedAppAuthUrlDefaultImplementation(e, "/api/v1/connected_apps/auth_url", uriBuilderLocalVar.Path, keyCodeRef, userId, orgCode, overrideCallbackUrl);
                Events.ExecuteOnErrorGetConnectedAppAuthUrl(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConnectedAppAuthUrlApiResponse"/>
        /// </summary>
        public partial class GetConnectedAppAuthUrlApiResponse : Kinde.Api.Client.ApiResponse, IGetConnectedAppAuthUrlApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConnectedAppAuthUrlApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConnectedAppAuthUrlApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectedAppAuthUrlApiResponse(ILogger<GetConnectedAppAuthUrlApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetConnectedAppAuthUrlApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectedAppAuthUrlApiResponse(ILogger<GetConnectedAppAuthUrlApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ConnectedAppsAuthUrl? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ConnectedAppsAuthUrl>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.ConnectedAppsAuthUrl? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetConnectedAppToken(ref string sessionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sessionId"></param>
        /// <returns></returns>
        private void ValidateGetConnectedAppToken(string sessionId)
        {
            if (sessionId == null)
                throw new ArgumentNullException(nameof(sessionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sessionId"></param>
        private void AfterGetConnectedAppTokenDefaultImplementation(IGetConnectedAppTokenApiResponse apiResponseLocalVar, string sessionId)
        {
            bool suppressDefaultLog = false;
            AfterGetConnectedAppToken(ref suppressDefaultLog, apiResponseLocalVar, sessionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sessionId"></param>
        partial void AfterGetConnectedAppToken(ref bool suppressDefaultLog, IGetConnectedAppTokenApiResponse apiResponseLocalVar, string sessionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sessionId"></param>
        private void OnErrorGetConnectedAppTokenDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string sessionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConnectedAppToken(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sessionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sessionId"></param>
        partial void OnErrorGetConnectedAppToken(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string sessionId);

        /// <summary>
        /// Get Connected App Token Get an access token that can be used to call the third-party provider linked to the connected app.  &lt;div&gt;   &lt;code&gt;read:connected_apps&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="sessionId">The unique sesssion id representing the login session of a user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectedAppTokenApiResponse"/>&gt;</returns>
        public async Task<IGetConnectedAppTokenApiResponse?> GetConnectedAppTokenOrDefaultAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConnectedAppTokenAsync(sessionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Connected App Token Get an access token that can be used to call the third-party provider linked to the connected app.  &lt;div&gt;   &lt;code&gt;read:connected_apps&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The unique sesssion id representing the login session of a user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectedAppTokenApiResponse"/>&gt;</returns>
        public async Task<IGetConnectedAppTokenApiResponse> GetConnectedAppTokenAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetConnectedAppToken(sessionId);

                FormatGetConnectedAppToken(ref sessionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/connected_apps/token"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/connected_apps/token");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["session_id"] = ClientUtils.ParameterToString(sessionId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<GetConnectedAppTokenApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConnectedAppTokenApiResponse>();
                        GetConnectedAppTokenApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/connected_apps/token", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterGetConnectedAppTokenDefaultImplementation(apiResponseLocalVar, sessionId);

                        Events.ExecuteOnGetConnectedAppToken(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConnectedAppTokenDefaultImplementation(e, "/api/v1/connected_apps/token", uriBuilderLocalVar.Path, sessionId);
                Events.ExecuteOnErrorGetConnectedAppToken(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConnectedAppTokenApiResponse"/>
        /// </summary>
        public partial class GetConnectedAppTokenApiResponse : Kinde.Api.Client.ApiResponse, IGetConnectedAppTokenApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConnectedAppTokenApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConnectedAppTokenApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectedAppTokenApiResponse(ILogger<GetConnectedAppTokenApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="GetConnectedAppTokenApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectedAppTokenApiResponse(ILogger<GetConnectedAppTokenApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ConnectedAppsAccessToken? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ConnectedAppsAccessToken>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.ConnectedAppsAccessToken? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRevokeConnectedAppToken(ref string sessionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sessionId"></param>
        /// <returns></returns>
        private void ValidateRevokeConnectedAppToken(string sessionId)
        {
            if (sessionId == null)
                throw new ArgumentNullException(nameof(sessionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sessionId"></param>
        private void AfterRevokeConnectedAppTokenDefaultImplementation(IRevokeConnectedAppTokenApiResponse apiResponseLocalVar, string sessionId)
        {
            bool suppressDefaultLog = false;
            AfterRevokeConnectedAppToken(ref suppressDefaultLog, apiResponseLocalVar, sessionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sessionId"></param>
        partial void AfterRevokeConnectedAppToken(ref bool suppressDefaultLog, IRevokeConnectedAppTokenApiResponse apiResponseLocalVar, string sessionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sessionId"></param>
        private void OnErrorRevokeConnectedAppTokenDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string sessionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRevokeConnectedAppToken(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sessionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sessionId"></param>
        partial void OnErrorRevokeConnectedAppToken(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string sessionId);

        /// <summary>
        /// Revoke Connected App Token Revoke the tokens linked to the connected app session.  &lt;div&gt;   &lt;code&gt;create:connected_apps&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="sessionId">The unique sesssion id representing the login session of a user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeConnectedAppTokenApiResponse"/>&gt;</returns>
        public async Task<IRevokeConnectedAppTokenApiResponse?> RevokeConnectedAppTokenOrDefaultAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RevokeConnectedAppTokenAsync(sessionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Revoke Connected App Token Revoke the tokens linked to the connected app session.  &lt;div&gt;   &lt;code&gt;create:connected_apps&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">The unique sesssion id representing the login session of a user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeConnectedAppTokenApiResponse"/>&gt;</returns>
        public async Task<IRevokeConnectedAppTokenApiResponse> RevokeConnectedAppTokenAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRevokeConnectedAppToken(sessionId);

                FormatRevokeConnectedAppToken(ref sessionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/connected_apps/revoke"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/connected_apps/revoke");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["session_id"] = ClientUtils.ParameterToString(sessionId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<RevokeConnectedAppTokenApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RevokeConnectedAppTokenApiResponse>();
                        RevokeConnectedAppTokenApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/connected_apps/revoke", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterRevokeConnectedAppTokenDefaultImplementation(apiResponseLocalVar, sessionId);

                        Events.ExecuteOnRevokeConnectedAppToken(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRevokeConnectedAppTokenDefaultImplementation(e, "/api/v1/connected_apps/revoke", uriBuilderLocalVar.Path, sessionId);
                Events.ExecuteOnErrorRevokeConnectedAppToken(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RevokeConnectedAppTokenApiResponse"/>
        /// </summary>
        public partial class RevokeConnectedAppTokenApiResponse : Kinde.Api.Client.ApiResponse, IRevokeConnectedAppTokenApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RevokeConnectedAppTokenApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RevokeConnectedAppTokenApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RevokeConnectedAppTokenApiResponse(ILogger<RevokeConnectedAppTokenApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="RevokeConnectedAppTokenApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RevokeConnectedAppTokenApiResponse(ILogger<RevokeConnectedAppTokenApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
