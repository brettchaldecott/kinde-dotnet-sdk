// <auto-generated>
/*
 * Kinde Management API
 *
 *  Provides endpoints to manage your Kinde Businesses.  ## Intro  ## How to use  1. [Set up and authorize a machine-to-machine (M2M) application](https://docs.kinde.com/developer-tools/kinde-api/connect-to-kinde-api/).  2. [Generate a test access token](https://docs.kinde.com/developer-tools/kinde-api/access-token-for-api/)  3. Test request any endpoint using the test token 
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Kinde.Api.Client;
using Kinde.Api.Model;
using System.Diagnostics.CodeAnalysis;

namespace Kinde.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IFeatureFlagsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        FeatureFlagsApiEvents Events { get; }

        /// <summary>
        /// Create Feature Flag
        /// </summary>
        /// <remarks>
        /// Create feature flag.  &lt;div&gt;   &lt;code&gt;create:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeatureFlagRequest">Flag details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFeatureFlagApiResponse"/>&gt;</returns>
        Task<ICreateFeatureFlagApiResponse> CreateFeatureFlagAsync(CreateFeatureFlagRequest createFeatureFlagRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Feature Flag
        /// </summary>
        /// <remarks>
        /// Create feature flag.  &lt;div&gt;   &lt;code&gt;create:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="createFeatureFlagRequest">Flag details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFeatureFlagApiResponse"/>?&gt;</returns>
        Task<ICreateFeatureFlagApiResponse?> CreateFeatureFlagOrDefaultAsync(CreateFeatureFlagRequest createFeatureFlagRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Feature Flag
        /// </summary>
        /// <remarks>
        /// Delete feature flag  &lt;div&gt;   &lt;code&gt;delete:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFeatureFlagApiResponse"/>&gt;</returns>
        Task<IDeleteFeatureFlagApiResponse> DeleteFeatureFlagAsync(string featureFlagKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Feature Flag
        /// </summary>
        /// <remarks>
        /// Delete feature flag  &lt;div&gt;   &lt;code&gt;delete:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFeatureFlagApiResponse"/>?&gt;</returns>
        Task<IDeleteFeatureFlagApiResponse?> DeleteFeatureFlagOrDefaultAsync(string featureFlagKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace Feature Flag
        /// </summary>
        /// <remarks>
        /// Update feature flag.  &lt;div&gt;   &lt;code&gt;update:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The key identifier for the feature flag.</param>
        /// <param name="name">The name of the flag.</param>
        /// <param name="description">Description of the flag purpose.</param>
        /// <param name="type">The variable type</param>
        /// <param name="allowOverrideLevel">Allow the flag to be overridden at a different level.</param>
        /// <param name="defaultValue">Default value for the flag used by environments and organizations.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFeatureFlagApiResponse"/>&gt;</returns>
        Task<IUpdateFeatureFlagApiResponse> UpdateFeatureFlagAsync(string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Replace Feature Flag
        /// </summary>
        /// <remarks>
        /// Update feature flag.  &lt;div&gt;   &lt;code&gt;update:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </remarks>
        /// <param name="featureFlagKey">The key identifier for the feature flag.</param>
        /// <param name="name">The name of the flag.</param>
        /// <param name="description">Description of the flag purpose.</param>
        /// <param name="type">The variable type</param>
        /// <param name="allowOverrideLevel">Allow the flag to be overridden at a different level.</param>
        /// <param name="defaultValue">Default value for the flag used by environments and organizations.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFeatureFlagApiResponse"/>?&gt;</returns>
        Task<IUpdateFeatureFlagApiResponse?> UpdateFeatureFlagOrDefaultAsync(string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateFeatureFlagApiResponse"/>
    /// </summary>
    public interface ICreateFeatureFlagApiResponse : Kinde.Api.Client.IApiResponse, ICreated<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteFeatureFlagApiResponse"/>
    /// </summary>
    public interface IDeleteFeatureFlagApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateFeatureFlagApiResponse"/>
    /// </summary>
    public interface IUpdateFeatureFlagApiResponse : Kinde.Api.Client.IApiResponse, IOk<Kinde.Api.Model.SuccessResponse?>, IBadRequest<Kinde.Api.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class FeatureFlagsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateFeatureFlag;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateFeatureFlag;

        internal void ExecuteOnCreateFeatureFlag(FeatureFlagsApi.CreateFeatureFlagApiResponse apiResponse)
        {
            OnCreateFeatureFlag?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateFeatureFlag(Exception exception)
        {
            OnErrorCreateFeatureFlag?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteFeatureFlag;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteFeatureFlag;

        internal void ExecuteOnDeleteFeatureFlag(FeatureFlagsApi.DeleteFeatureFlagApiResponse apiResponse)
        {
            OnDeleteFeatureFlag?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteFeatureFlag(Exception exception)
        {
            OnErrorDeleteFeatureFlag?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateFeatureFlag;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateFeatureFlag;

        internal void ExecuteOnUpdateFeatureFlag(FeatureFlagsApi.UpdateFeatureFlagApiResponse apiResponse)
        {
            OnUpdateFeatureFlag?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateFeatureFlag(Exception exception)
        {
            OnErrorUpdateFeatureFlag?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class FeatureFlagsApi : IFeatureFlagsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<FeatureFlagsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public FeatureFlagsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeatureFlagsApi(ILogger<FeatureFlagsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, FeatureFlagsApiEvents featureFlagsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<FeatureFlagsApi>();
            HttpClient = httpClient;
            Events = featureFlagsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCreateFeatureFlag(CreateFeatureFlagRequest createFeatureFlagRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createFeatureFlagRequest"></param>
        /// <returns></returns>
        private void ValidateCreateFeatureFlag(CreateFeatureFlagRequest createFeatureFlagRequest)
        {
            if (createFeatureFlagRequest == null)
                throw new ArgumentNullException(nameof(createFeatureFlagRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createFeatureFlagRequest"></param>
        private void AfterCreateFeatureFlagDefaultImplementation(ICreateFeatureFlagApiResponse apiResponseLocalVar, CreateFeatureFlagRequest createFeatureFlagRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateFeatureFlag(ref suppressDefaultLog, apiResponseLocalVar, createFeatureFlagRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createFeatureFlagRequest"></param>
        partial void AfterCreateFeatureFlag(ref bool suppressDefaultLog, ICreateFeatureFlagApiResponse apiResponseLocalVar, CreateFeatureFlagRequest createFeatureFlagRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createFeatureFlagRequest"></param>
        private void OnErrorCreateFeatureFlagDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateFeatureFlagRequest createFeatureFlagRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateFeatureFlag(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createFeatureFlagRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createFeatureFlagRequest"></param>
        partial void OnErrorCreateFeatureFlag(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateFeatureFlagRequest createFeatureFlagRequest);

        /// <summary>
        /// Create Feature Flag Create feature flag.  &lt;div&gt;   &lt;code&gt;create:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="createFeatureFlagRequest">Flag details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFeatureFlagApiResponse"/>&gt;</returns>
        public async Task<ICreateFeatureFlagApiResponse?> CreateFeatureFlagOrDefaultAsync(CreateFeatureFlagRequest createFeatureFlagRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateFeatureFlagAsync(createFeatureFlagRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Feature Flag Create feature flag.  &lt;div&gt;   &lt;code&gt;create:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeatureFlagRequest">Flag details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFeatureFlagApiResponse"/>&gt;</returns>
        public async Task<ICreateFeatureFlagApiResponse> CreateFeatureFlagAsync(CreateFeatureFlagRequest createFeatureFlagRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateFeatureFlag(createFeatureFlagRequest);

                FormatCreateFeatureFlag(createFeatureFlagRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/feature_flags"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/feature_flags");

                    httpRequestMessageLocalVar.Content = (createFeatureFlagRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createFeatureFlagRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<CreateFeatureFlagApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateFeatureFlagApiResponse>();
                        CreateFeatureFlagApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/feature_flags", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterCreateFeatureFlagDefaultImplementation(apiResponseLocalVar, createFeatureFlagRequest);

                        Events.ExecuteOnCreateFeatureFlag(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateFeatureFlagDefaultImplementation(e, "/api/v1/feature_flags", uriBuilderLocalVar.Path, createFeatureFlagRequest);
                Events.ExecuteOnErrorCreateFeatureFlag(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateFeatureFlagApiResponse"/>
        /// </summary>
        public partial class CreateFeatureFlagApiResponse : Kinde.Api.Client.ApiResponse, ICreateFeatureFlagApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateFeatureFlagApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateFeatureFlagApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateFeatureFlagApiResponse(ILogger<CreateFeatureFlagApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="CreateFeatureFlagApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateFeatureFlagApiResponse(ILogger<CreateFeatureFlagApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteFeatureFlag(ref string featureFlagKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="featureFlagKey"></param>
        /// <returns></returns>
        private void ValidateDeleteFeatureFlag(string featureFlagKey)
        {
            if (featureFlagKey == null)
                throw new ArgumentNullException(nameof(featureFlagKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="featureFlagKey"></param>
        private void AfterDeleteFeatureFlagDefaultImplementation(IDeleteFeatureFlagApiResponse apiResponseLocalVar, string featureFlagKey)
        {
            bool suppressDefaultLog = false;
            AfterDeleteFeatureFlag(ref suppressDefaultLog, apiResponseLocalVar, featureFlagKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="featureFlagKey"></param>
        partial void AfterDeleteFeatureFlag(ref bool suppressDefaultLog, IDeleteFeatureFlagApiResponse apiResponseLocalVar, string featureFlagKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="featureFlagKey"></param>
        private void OnErrorDeleteFeatureFlagDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string featureFlagKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteFeatureFlag(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, featureFlagKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="featureFlagKey"></param>
        partial void OnErrorDeleteFeatureFlag(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string featureFlagKey);

        /// <summary>
        /// Delete Feature Flag Delete feature flag  &lt;div&gt;   &lt;code&gt;delete:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFeatureFlagApiResponse"/>&gt;</returns>
        public async Task<IDeleteFeatureFlagApiResponse?> DeleteFeatureFlagOrDefaultAsync(string featureFlagKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteFeatureFlagAsync(featureFlagKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Feature Flag Delete feature flag  &lt;div&gt;   &lt;code&gt;delete:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The identifier for the feature flag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFeatureFlagApiResponse"/>&gt;</returns>
        public async Task<IDeleteFeatureFlagApiResponse> DeleteFeatureFlagAsync(string featureFlagKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteFeatureFlag(featureFlagKey);

                FormatDeleteFeatureFlag(ref featureFlagKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/feature_flags/{feature_flag_key}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/feature_flags/{feature_flag_key}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfeature_flag_key%7D", Uri.EscapeDataString(featureFlagKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<DeleteFeatureFlagApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteFeatureFlagApiResponse>();
                        DeleteFeatureFlagApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/feature_flags/{feature_flag_key}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterDeleteFeatureFlagDefaultImplementation(apiResponseLocalVar, featureFlagKey);

                        Events.ExecuteOnDeleteFeatureFlag(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteFeatureFlagDefaultImplementation(e, "/api/v1/feature_flags/{feature_flag_key}", uriBuilderLocalVar.Path, featureFlagKey);
                Events.ExecuteOnErrorDeleteFeatureFlag(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteFeatureFlagApiResponse"/>
        /// </summary>
        public partial class DeleteFeatureFlagApiResponse : Kinde.Api.Client.ApiResponse, IDeleteFeatureFlagApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteFeatureFlagApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteFeatureFlagApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteFeatureFlagApiResponse(ILogger<DeleteFeatureFlagApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="DeleteFeatureFlagApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteFeatureFlagApiResponse(ILogger<DeleteFeatureFlagApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateFeatureFlag(ref string featureFlagKey, ref string name, ref string description, ref string type, ref string allowOverrideLevel, ref string defaultValue);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="featureFlagKey"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <param name="type"></param>
        /// <param name="allowOverrideLevel"></param>
        /// <param name="defaultValue"></param>
        /// <returns></returns>
        private void ValidateUpdateFeatureFlag(string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue)
        {
            if (featureFlagKey == null)
                throw new ArgumentNullException(nameof(featureFlagKey));

            if (name == null)
                throw new ArgumentNullException(nameof(name));

            if (description == null)
                throw new ArgumentNullException(nameof(description));

            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (allowOverrideLevel == null)
                throw new ArgumentNullException(nameof(allowOverrideLevel));

            if (defaultValue == null)
                throw new ArgumentNullException(nameof(defaultValue));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="featureFlagKey"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <param name="type"></param>
        /// <param name="allowOverrideLevel"></param>
        /// <param name="defaultValue"></param>
        private void AfterUpdateFeatureFlagDefaultImplementation(IUpdateFeatureFlagApiResponse apiResponseLocalVar, string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue)
        {
            bool suppressDefaultLog = false;
            AfterUpdateFeatureFlag(ref suppressDefaultLog, apiResponseLocalVar, featureFlagKey, name, description, type, allowOverrideLevel, defaultValue);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="featureFlagKey"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <param name="type"></param>
        /// <param name="allowOverrideLevel"></param>
        /// <param name="defaultValue"></param>
        partial void AfterUpdateFeatureFlag(ref bool suppressDefaultLog, IUpdateFeatureFlagApiResponse apiResponseLocalVar, string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="featureFlagKey"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <param name="type"></param>
        /// <param name="allowOverrideLevel"></param>
        /// <param name="defaultValue"></param>
        private void OnErrorUpdateFeatureFlagDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateFeatureFlag(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, featureFlagKey, name, description, type, allowOverrideLevel, defaultValue);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="featureFlagKey"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <param name="type"></param>
        /// <param name="allowOverrideLevel"></param>
        /// <param name="defaultValue"></param>
        partial void OnErrorUpdateFeatureFlag(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue);

        /// <summary>
        /// Replace Feature Flag Update feature flag.  &lt;div&gt;   &lt;code&gt;update:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <param name="featureFlagKey">The key identifier for the feature flag.</param>
        /// <param name="name">The name of the flag.</param>
        /// <param name="description">Description of the flag purpose.</param>
        /// <param name="type">The variable type</param>
        /// <param name="allowOverrideLevel">Allow the flag to be overridden at a different level.</param>
        /// <param name="defaultValue">Default value for the flag used by environments and organizations.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFeatureFlagApiResponse"/>&gt;</returns>
        public async Task<IUpdateFeatureFlagApiResponse?> UpdateFeatureFlagOrDefaultAsync(string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateFeatureFlagAsync(featureFlagKey, name, description, type, allowOverrideLevel, defaultValue, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Replace Feature Flag Update feature flag.  &lt;div&gt;   &lt;code&gt;update:feature_flags&lt;/code&gt; &lt;/div&gt; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureFlagKey">The key identifier for the feature flag.</param>
        /// <param name="name">The name of the flag.</param>
        /// <param name="description">Description of the flag purpose.</param>
        /// <param name="type">The variable type</param>
        /// <param name="allowOverrideLevel">Allow the flag to be overridden at a different level.</param>
        /// <param name="defaultValue">Default value for the flag used by environments and organizations.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFeatureFlagApiResponse"/>&gt;</returns>
        public async Task<IUpdateFeatureFlagApiResponse> UpdateFeatureFlagAsync(string featureFlagKey, string name, string description, string type, string allowOverrideLevel, string defaultValue, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateFeatureFlag(featureFlagKey, name, description, type, allowOverrideLevel, defaultValue);

                FormatUpdateFeatureFlag(ref featureFlagKey, ref name, ref description, ref type, ref allowOverrideLevel, ref defaultValue);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/feature_flags/{feature_flag_key}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/feature_flags/{feature_flag_key}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfeature_flag_key%7D", Uri.EscapeDataString(featureFlagKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name);
                    parseQueryStringLocalVar["description"] = ClientUtils.ParameterToString(description);
                    parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type);
                    parseQueryStringLocalVar["allow_override_level"] = ClientUtils.ParameterToString(allowOverrideLevel);
                    parseQueryStringLocalVar["default_value"] = ClientUtils.ParameterToString(defaultValue);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/json; charset=utf-8"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<UpdateFeatureFlagApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateFeatureFlagApiResponse>();
                        UpdateFeatureFlagApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/feature_flags/{feature_flag_key}", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterUpdateFeatureFlagDefaultImplementation(apiResponseLocalVar, featureFlagKey, name, description, type, allowOverrideLevel, defaultValue);

                        Events.ExecuteOnUpdateFeatureFlag(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateFeatureFlagDefaultImplementation(e, "/api/v1/feature_flags/{feature_flag_key}", uriBuilderLocalVar.Path, featureFlagKey, name, description, type, allowOverrideLevel, defaultValue);
                Events.ExecuteOnErrorUpdateFeatureFlag(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateFeatureFlagApiResponse"/>
        /// </summary>
        public partial class UpdateFeatureFlagApiResponse : Kinde.Api.Client.ApiResponse, IUpdateFeatureFlagApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateFeatureFlagApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateFeatureFlagApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateFeatureFlagApiResponse(ILogger<UpdateFeatureFlagApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="UpdateFeatureFlagApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateFeatureFlagApiResponse(ILogger<UpdateFeatureFlagApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.SuccessResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.SuccessResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Kinde.Api.Model.SuccessResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Kinde.Api.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Kinde.Api.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Kinde.Api.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
